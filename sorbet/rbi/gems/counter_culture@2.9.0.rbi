# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `counter_culture` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module CounterCulture
  def batch_size; end
  def batch_size=(val); end

  class << self
    def batch_size; end
    def batch_size=(val); end
    def config; end
  end
end

class CounterCulture::Counter
  def initialize(model, relation, options); end

  def attribute_changed?(obj, attr); end
  def change_counter_cache(obj, options); end
  def column_names; end
  def counter_cache_name; end
  def counter_cache_name_for(obj); end
  def counter_delta_magnitude_for(obj); end
  def delta_column; end
  def delta_magnitude; end
  def execute_after_commit; end
  def execute_now_or_after_commit(obj, &block); end
  def first_level_relation_changed?(instance); end
  def first_level_relation_foreign_key; end
  def first_level_relation_foreign_type; end
  def foreign_key_value(obj, relation, was = T.unsafe(nil)); end
  def foreign_key_values; end
  def full_primary_key(klass); end
  def model; end
  def polymorphic?; end
  def previous_model(obj); end
  def relation; end
  def relation_foreign_key(relation); end
  def relation_klass(relation, source: T.unsafe(nil), was: T.unsafe(nil)); end
  def relation_primary_key(relation, source: T.unsafe(nil), was: T.unsafe(nil)); end
  def relation_reflect(relation); end
  def touch; end

  private

  def attribute_was(obj, attr); end
end

CounterCulture::Counter::ACTIVE_RECORD_VERSION = T.let(T.unsafe(nil), Gem::Version)
CounterCulture::Counter::CONFIG_OPTIONS = T.let(T.unsafe(nil), Array)

module CounterCulture::Extensions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::CounterCulture::Extensions::ClassMethods

  private

  def _update_counts_after_create; end
  def _update_counts_after_destroy; end
  def _update_counts_after_update; end
  def destroyed_for_counter_culture?; end
end

module CounterCulture::Extensions::ClassMethods
  def after_commit_counter_cache; end
  def counter_culture(relation, options = T.unsafe(nil)); end
  def counter_culture_fix_counts(options = T.unsafe(nil)); end
end

class CounterCulture::Reconciler
  def initialize(counter, options = T.unsafe(nil)); end

  def changes; end
  def column_names(*args, &block); end
  def counter; end
  def counter_cache_name(*args, &block); end
  def delta_column(*args, &block); end
  def delta_magnitude(*args, &block); end
  def execute_after_commit(*args, &block); end
  def foreign_key_values(*args, &block); end
  def full_primary_key(*args, &block); end
  def model(*args, &block); end
  def options; end
  def polymorphic?(*args, &block); end
  def reconcile!; end
  def relation(*args, &block); end
  def relation_reflect(*args, &block); end
  def touch(*args, &block); end

  private

  def associated_model_class; end
  def associated_model_classes; end
  def polymorphic_associated_model_classes; end
end

CounterCulture::Reconciler::ACTIVE_RECORD_VERSION = T.let(T.unsafe(nil), Gem::Version)

class CounterCulture::Reconciler::Reconciliation
  def initialize(counter, changes_holder, options, relation_class); end

  def column_names(*args, &block); end
  def counter; end
  def counter_cache_name(*args, &block); end
  def delta_column(*args, &block); end
  def delta_magnitude(*args, &block); end
  def execute_after_commit(*args, &block); end
  def foreign_key_values(*args, &block); end
  def full_primary_key(*args, &block); end
  def model(*args, &block); end
  def options; end
  def perform; end
  def polymorphic?(*args, &block); end
  def relation(*args, &block); end
  def relation_class; end
  def relation_reflect(*args, &block); end
  def touch(*args, &block); end

  private

  def count_select; end
  def join_clauses(where); end
  def log(message); end
  def log?; end
  def log_without_newline(message); end
  def parameterize(string); end
  def quote_table_name(table_name); end
  def self_table_name; end
  def track_change(record, column_name, count); end
  def update_count_for_batch(column_name, records); end
end

CounterCulture::VERSION = T.let(T.unsafe(nil), String)
