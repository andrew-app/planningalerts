# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stripe/all/stripe.rbi
#
# stripe-1.58.0

module Stripe
  def self._deprecated_uri_encode(params); end
  def self.api_base; end
  def self.api_base=(arg0); end
  def self.api_error(error, resp, error_obj); end
  def self.api_key; end
  def self.api_key=(arg0); end
  def self.api_url(url = nil, api_base_url = nil); end
  def self.api_version; end
  def self.api_version=(arg0); end
  def self.authentication_error(error, resp, error_obj); end
  def self.ca_bundle_path; end
  def self.ca_bundle_path=(path); end
  def self.ca_store; end
  def self.card_error(error, resp, error_obj); end
  def self.connect_base; end
  def self.connect_base=(arg0); end
  def self.execute_request(opts); end
  def self.execute_request_with_rescues(request_opts, api_base_url, retry_count = nil); end
  def self.general_api_error(rcode, rbody); end
  def self.get_uname; end
  def self.get_uname_from_system; end
  def self.get_uname_from_system_ver; end
  def self.handle_api_error(resp); end
  def self.handle_restclient_error(e, request_opts, retry_count, api_base_url = nil); end
  def self.initial_network_retry_delay; end
  def self.invalid_request_error(error, resp, error_obj); end
  def self.max_network_retries; end
  def self.max_network_retries=(val); end
  def self.max_network_retry_delay; end
  def self.open_timeout; end
  def self.open_timeout=(arg0); end
  def self.parse(response); end
  def self.permission_error(error, resp, error_obj); end
  def self.rate_limit_error(error, resp, error_obj); end
  def self.read_timeout; end
  def self.read_timeout=(arg0); end
  def self.request(method, url, api_key, params = nil, headers = nil, api_base_url = nil); end
  def self.request_headers(api_key, method); end
  def self.should_retry?(e, retry_count); end
  def self.sleep_time(retry_count); end
  def self.stripe_account; end
  def self.stripe_account=(arg0); end
  def self.uploads_base; end
  def self.uploads_base=(arg0); end
  def self.uri_encode(*args, &block); end
  def self.user_agent; end
  def self.verify_ssl_certs; end
  def self.verify_ssl_certs=(arg0); end
end
module Stripe::APIOperations
end
module Stripe::APIOperations::Create
  def create(params = nil, opts = nil); end
end
module Stripe::APIOperations::Save
  def save(params = nil, opts = nil); end
  def save_url; end
  def self.included(base); end
end
module Stripe::APIOperations::Save::ClassMethods
  def update(id, params = nil, opts = nil); end
end
module Stripe::APIOperations::Delete
  def delete(params = nil, opts = nil); end
end
module Stripe::APIOperations::List
  def all(filters = nil, opts = nil); end
  def list(filters = nil, opts = nil); end
end
module Stripe::APIOperations::Request
  def request(method, url, params = nil, opts = nil); end
  def self.included(base); end
end
module Stripe::APIOperations::Request::ClassMethods
  def request(method, url, params = nil, opts = nil); end
end
class Stripe::StripeError < StandardError
  def http_body; end
  def http_headers; end
  def http_status; end
  def initialize(message = nil, http_status = nil, http_body = nil, json_body = nil, http_headers = nil); end
  def json_body; end
  def message; end
  def request_id; end
  def to_s; end
end
class Stripe::AuthenticationError < Stripe::StripeError
end
class Stripe::APIConnectionError < Stripe::StripeError
end
class Stripe::APIError < Stripe::StripeError
end
class Stripe::CardError < Stripe::StripeError
  def code; end
  def initialize(message, param, code, http_status = nil, http_body = nil, json_body = nil, http_headers = nil); end
  def param; end
end
class Stripe::InvalidRequestError < Stripe::StripeError
  def initialize(message, param, http_status = nil, http_body = nil, json_body = nil, http_headers = nil); end
  def param; end
  def param=(arg0); end
end
class Stripe::PermissionError < Stripe::StripeError
end
class Stripe::RateLimitError < Stripe::StripeError
end
module Stripe::Util
  def self.array_to_hash(array); end
  def self.check_api_key!(key); end
  def self.check_array_of_maps_start_keys!(arr); end
  def self.check_string_argument!(key); end
  def self.convert_to_stripe_object(resp, opts); end
  def self.encode_parameters(params); end
  def self.file_readable(file); end
  def self.flatten_params(params, parent_key = nil); end
  def self.flatten_params_array(value, calculated_key); end
  def self.normalize_id(id); end
  def self.normalize_opts(opts); end
  def self.object_classes; end
  def self.objects_to_ids(h); end
  def self.symbolize_names(object); end
  def self.url_encode(key); end
end
class Stripe::StripeObject
  def ==(other); end
  def [](k); end
  def []=(k, v); end
  def _deprecated_refresh_from(values, opts, partial = nil); end
  def _dump(level); end
  def add_accessors(keys, values); end
  def as_json(*a); end
  def deleted?; end
  def dirty!; end
  def dirty_value!(value); end
  def each(&blk); end
  def empty_values(obj); end
  def initialize(id = nil, opts = nil); end
  def initialize_from(values, opts, partial = nil); end
  def inspect; end
  def keys; end
  def metaclass; end
  def method_missing(name, *args); end
  def refresh_from(*args, &block); end
  def remove_accessors(keys); end
  def respond_to_missing?(symbol, include_private = nil); end
  def self._deprecated_serialize_params(obj, options = nil); end
  def self._load(args); end
  def self.construct_from(values, opts = nil); end
  def self.protected_fields; end
  def self.serialize_params(*args, &block); end
  def serialize_params(options = nil); end
  def serialize_params_value(value, original, unsaved, force); end
  def to_hash; end
  def to_json(*a); end
  def to_s(*args); end
  def update_attributes(values, opts = nil, method_options = nil); end
  def values; end
  extend Gem::Deprecate
  include Enumerable
end
class Stripe::ListObject < Stripe::StripeObject
  def [](k); end
  def auto_paging_each(&blk); end
  def each(&blk); end
  def empty?; end
  def filters; end
  def filters=(arg0); end
  def initialize(*args); end
  def next_page(params = nil, opts = nil); end
  def previous_page(params = nil, opts = nil); end
  def resource_url; end
  def retrieve(id, opts = nil); end
  def self.empty_list(opts = nil); end
  extend Stripe::APIOperations::Request::ClassMethods
  include Enumerable
  include Stripe::APIOperations::Create
  include Stripe::APIOperations::List
  include Stripe::APIOperations::Request
end
class Stripe::APIResource < Stripe::StripeObject
  def refresh; end
  def resource_url; end
  def save_with_parent; end
  def save_with_parent=(arg0); end
  def self.class_name; end
  def self.resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.save_nested_resource(name); end
  extend Stripe::APIOperations::Request::ClassMethods
  include Stripe::APIOperations::Request
end
class Stripe::SingletonAPIResource < Stripe::APIResource
  def resource_url; end
  def self.resource_url; end
  def self.retrieve(opts = nil); end
end
class Stripe::Account < Stripe::APIResource
  def _deprecated_bank_account=(value); end
  def bank_account=(*args, &block); end
  def deauthorize(client_id, opts = nil); end
  def external_account=(value); end
  def legal_entity; end
  def legal_entity=(_); end
  def reject(params = nil, opts = nil); end
  def resource_url; end
  def self.protected_fields; end
  def self.retrieve(id = nil, opts = nil); end
  def serialize_additional_owners(legal_entity, additional_owners); end
  def serialize_params(options = nil); end
  def serialize_params_account(obj, update_hash); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::AlipayAccount < Stripe::APIResource
  def resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::ApplePayDomain < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::ApplicationFee < Stripe::APIResource
  def refund(params = nil, opts = nil); end
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::ApplicationFeeRefund < Stripe::APIResource
  def resource_url; end
  def self.retrieve(id, api_key = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Balance < Stripe::SingletonAPIResource
end
class Stripe::BalanceTransaction < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::BankAccount < Stripe::APIResource
  def resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def verify(params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::BitcoinReceiver < Stripe::APIResource
  def resource_url; end
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::BitcoinTransaction < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::Card < Stripe::APIResource
  def resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Charge < Stripe::APIResource
  def capture(params = nil, opts = nil); end
  def capture_url; end
  def close_dispute(params = nil, opts = nil); end
  def close_dispute_url; end
  def dispute_url; end
  def mark_as_fraudulent; end
  def mark_as_safe; end
  def refund(params = nil, opts = nil); end
  def refund_url; end
  def update_dispute(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::CountrySpec < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::Coupon < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Customer < Stripe::APIResource
  def add_invoice_item(params, opts = nil); end
  def cancel_subscription(params = nil, opts = nil); end
  def charges(params = nil, opts = nil); end
  def create_subscription(params = nil, opts = nil); end
  def create_upcoming_invoice(params = nil, opts = nil); end
  def delete_discount; end
  def discount_url; end
  def invoice_items(params = nil, opts = nil); end
  def invoices(params = nil, opts = nil); end
  def source=(value); end
  def subscription_url; end
  def subscriptions_url; end
  def upcoming_invoice(params = nil, opts = nil); end
  def update_subscription(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Dispute < Stripe::APIResource
  def close(params = nil, opts = nil); end
  def close_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Event < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::FileUpload < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.request(method, url, params = nil, opts = nil); end
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Invoice < Stripe::APIResource
  def pay(opts = nil); end
  def pay_url; end
  def self.upcoming(params, opts = nil); end
  def self.upcoming_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::InvoiceItem < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Order < Stripe::APIResource
  def pay(params, opts = nil); end
  def pay_url; end
  def return_order(params, opts = nil); end
  def returns_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::OrderReturn < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::Plan < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Product < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Recipient < Stripe::APIResource
  def transfers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Refund < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Reversal < Stripe::APIResource
  def resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::SKU < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Source < Stripe::APIResource
  def verify(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Subscription < Stripe::APIResource
  def delete_discount; end
  def discount_url; end
  def self.create(params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def source=(value); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionItem < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::ThreeDSecure < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::Create
end
class Stripe::Token < Stripe::APIResource
  extend Stripe::APIOperations::Create
end
class Stripe::Transfer < Stripe::APIResource
  def cancel; end
  def cancel_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
