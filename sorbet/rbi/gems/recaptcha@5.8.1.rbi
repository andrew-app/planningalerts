# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `recaptcha` gem.
# Please instead update this file by running `bin/tapioca gem recaptcha`.

# typed: true

module Recaptcha
  class << self
    def action_valid?(action, expected_action); end
    def api_verification_enterprise(query_params, body, project_id, timeout: T.unsafe(nil)); end
    def api_verification_free(verify_hash, timeout: T.unsafe(nil)); end
    def configuration; end
    def configure; end
    def hostname_valid?(hostname, validation); end
    def http_client_for(uri:, timeout: T.unsafe(nil)); end
    def invalid_response?(resp); end
    def score_above_threshold?(score, minimum_score); end
    def skip_env?(env); end
    def verify_via_api_call(response, options); end
    def verify_via_api_call_enterprise(response, options); end
    def verify_via_api_call_free(response, options); end
    def with_configuration(config); end
  end
end

module Recaptcha::Adapters; end

module Recaptcha::Adapters::ControllerMethods
  private

  def recaptcha_error(model, attribute, message); end
  def recaptcha_flash_supported?; end
  def recaptcha_reply; end
  def recaptcha_response_token(action = T.unsafe(nil)); end
  def verify_recaptcha(options = T.unsafe(nil)); end
  def verify_recaptcha!(options = T.unsafe(nil)); end
end

module Recaptcha::Adapters::ViewMethods
  def invisible_recaptcha_tags(options = T.unsafe(nil)); end
  def recaptcha_tags(options = T.unsafe(nil)); end
  def recaptcha_v3(options = T.unsafe(nil)); end
end

class Recaptcha::Configuration
  def initialize; end

  def api_server_url; end
  def api_server_url=(_arg0); end
  def default_env; end
  def default_env=(_arg0); end
  def enterprise; end
  def enterprise=(_arg0); end
  def enterprise_api_key; end
  def enterprise_api_key!; end
  def enterprise_api_key=(_arg0); end
  def enterprise_project_id; end
  def enterprise_project_id!; end
  def enterprise_project_id=(_arg0); end
  def handle_timeouts_gracefully; end
  def handle_timeouts_gracefully=(_arg0); end
  def hostname; end
  def hostname=(_arg0); end
  def proxy; end
  def proxy=(_arg0); end
  def secret_key; end
  def secret_key!; end
  def secret_key=(_arg0); end
  def site_key; end
  def site_key!; end
  def site_key=(_arg0); end
  def skip_verify_env; end
  def skip_verify_env=(_arg0); end
  def verify_url; end
  def verify_url=(_arg0); end
end

Recaptcha::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)
Recaptcha::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

module Recaptcha::Helpers
  class << self
    def invisible_recaptcha_tags(custom); end
    def recaptcha_execute_method_name; end
    def recaptcha_ready_method_name; end
    def recaptcha_tags(options); end
    def recaptcha_v3(options = T.unsafe(nil)); end
    def recaptcha_v3_async_execute_function_name(action); end
    def recaptcha_v3_default_callback_name(action); end
    def recaptcha_v3_execute_function_name(action); end
    def to_error_message(key); end
    def to_message(key, default); end

    private

    def components(options); end
    def dasherize_action(action); end
    def default_callback(options = T.unsafe(nil)); end
    def default_callback_required?(options); end
    def hash_to_query(hash); end
    def recaptcha_v3_define_default_callback(callback); end
    def recaptcha_v3_define_default_callback?(callback, action, options); end
    def recaptcha_v3_inline_script(site_key, action, callback, id, options = T.unsafe(nil)); end
    def recaptcha_v3_inline_script?(options); end
    def recaptcha_v3_onload_script(site_key, action, callback, id, options = T.unsafe(nil)); end
    def sanitize_action_for_js(action); end
  end
end

Recaptcha::Helpers::DEFAULT_ERRORS = T.let(T.unsafe(nil), Hash)
Recaptcha::RESPONSE_LIMIT = T.let(T.unsafe(nil), Integer)

class Recaptcha::Railtie < ::Rails::Railtie
  class << self
    protected

    def add(pattern); end
    def pattern_from(args); end
  end
end

class Recaptcha::RecaptchaError < ::StandardError; end
class Recaptcha::VerifyError < ::Recaptcha::RecaptchaError; end
