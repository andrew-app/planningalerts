# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activeadmin/all/activeadmin.rbi
#
# activeadmin-2.7.0

module ActiveAdmin
  def self.after_load(&block); end
  def self.application; end
  def self.application=(arg0); end
  def self.before_load(&block); end
  def self.load!(*args, &block); end
  def self.register(*args, &block); end
  def self.register_page(*args, &block); end
  def self.routes(*args, &block); end
  def self.setup; end
  def self.unload!(*args, &block); end
  def self.wrap_block_for_active_support_notifications(block); end
end
module ActiveAdmin::Helpers
end
module ActiveAdmin::Helpers::I18n
end
class ActiveAdmin::Engine < Rails::Engine
end
class ActiveAdmin::AccessDenied < StandardError
  def action; end
  def initialize(user, action, subject = nil); end
  def message; end
  def subject; end
  def user; end
end
class ActiveAdmin::Error < RuntimeError
end
class ActiveAdmin::ErrorLoading < ActiveAdmin::Error
  def find_cause(folder, backtrace); end
end
class ActiveAdmin::DatabaseHitDuringLoad < ActiveAdmin::ErrorLoading
  def initialize(exception); end
  def self.capture; end
  def self.database_error_classes; end
end
class ActiveAdmin::DependencyError < ActiveAdmin::ErrorLoading
end
class ActiveAdmin::NoMenuError < KeyError
end
class ActiveAdmin::GeneratorError < ActiveAdmin::Error
end
class ActiveAdmin::Router
  def apply; end
  def build_action(action); end
  def build_route(verbs, *args); end
  def define_actions(config); end
  def define_belongs_to_routes(config); end
  def define_namespace(config); end
  def define_resource_routes(config); end
  def define_resources_routes; end
  def define_root_routes; end
  def define_routes(config); end
  def initialize(router:, namespaces:); end
  def namespaces; end
  def page_or_resource_routes(config); end
  def page_routes(config); end
  def resource_routes(config); end
  def router; end
end
class ActiveAdmin::SettingsNode
  def self.build(superclass = nil); end
  def self.register(name, value); end
end
class ActiveAdmin::ApplicationSettings < ActiveAdmin::SettingsNode
  def app_path; end
  def app_path=(val); end
  def app_path?; end
  def default_namespace; end
  def default_namespace=(val); end
  def default_namespace?; end
  def disable_streaming_in; end
  def disable_streaming_in=(val); end
  def disable_streaming_in?; end
  def display_name_methods; end
  def display_name_methods=(val); end
  def display_name_methods?; end
  def filter_attributes; end
  def filter_attributes=(val); end
  def filter_attributes?; end
  def load_paths; end
  def load_paths=(val); end
  def load_paths?; end
  def localize_format; end
  def localize_format=(val); end
  def localize_format?; end
  def self.app_path; end
  def self.app_path=(val); end
  def self.app_path?; end
  def self.default_namespace; end
  def self.default_namespace=(val); end
  def self.default_namespace?; end
  def self.disable_streaming_in; end
  def self.disable_streaming_in=(val); end
  def self.disable_streaming_in?; end
  def self.display_name_methods; end
  def self.display_name_methods=(val); end
  def self.display_name_methods?; end
  def self.filter_attributes; end
  def self.filter_attributes=(val); end
  def self.filter_attributes?; end
  def self.load_paths; end
  def self.load_paths=(val); end
  def self.load_paths?; end
  def self.localize_format; end
  def self.localize_format=(val); end
  def self.localize_format?; end
end
class ActiveAdmin::DynamicSetting
  def initialize(setting); end
  def self.build(setting, type); end
  def self.klass(type); end
  def value(*_args); end
end
class ActiveAdmin::StringSymbolOrProcSetting < ActiveAdmin::DynamicSetting
  def value(context = nil); end
end
class ActiveAdmin::DynamicSettingsNode < ActiveAdmin::SettingsNode
  def self.add_reader(name); end
  def self.add_writer(name, type); end
  def self.register(name, value, type = nil); end
end
class ActiveAdmin::AbstractViewFactory < ActiveAdmin::SettingsNode
  def [](key); end
  def []=(key, value); end
  def default_for(key); end
  def register(view_hash); end
  def self.add_writer(name); end
  def self.register(view_hash); end
end
class ActiveAdmin::Component < Arbre::Component
end
module ActiveAdmin::Views
end
class ActiveAdmin::Views::ActionItems < ActiveAdmin::Component
  def build(action_items); end
end
class ActiveAdmin::Views::FormtasticProxy < Arbre::Rails::Forms::FormBuilderProxy
  def closing_tag; end
  def opening_tag; end
  def split_string_on(string, match); end
  def to_s; end
end
class ActiveAdmin::Views::ActiveAdminForm < ActiveAdmin::Views::FormtasticProxy
  def actions(*args, &block); end
  def add_create_another_checkbox; end
  def build(resource, options = nil, &block); end
  def commit_action_with_cancel_link; end
  def create_another_checkbox; end
  def form_buffers; end
  def has_many(*args, &block); end
  def input(*args); end
  def inputs(*args, &block); end
  def multipart?; end
  def object; end
end
module Arbre::Element::BuilderMethods
  def action_items(*args, &block); end
  def active_admin_comments_for(*args, &block); end
  def active_admin_form_for(*args, &block); end
  def attributes_table_for(*args, &block); end
  def batch_action_form(*args, &block); end
  def batch_action_selector(*args, &block); end
  def blank_slate(*args, &block); end
  def columns(*args, &block); end
  def dropdown_menu(*args, &block); end
  def edit_page(*args, &block); end
  def global_navigation(*args, &block); end
  def index_list_renderer(*args, &block); end
  def index_page(*args, &block); end
  def index_scopes(*args, &block); end
  def layout(*args, &block); end
  def menu_item(*args, &block); end
  def new_page(*args, &block); end
  def page(*args, &block); end
  def paginated_collection(*args, &block); end
  def panel(*args, &block); end
  def resource_selection_cell(*args, &block); end
  def resource_selection_toggle_cell(*args, &block); end
  def resource_selection_toggle_panel(*args, &block); end
  def scopes_renderer(*args, &block); end
  def show_page(*args, &block); end
  def sidebar(*args, &block); end
  def sidebar_section(*args, &block); end
  def site_title(*args, &block); end
  def status_tag(*args, &block); end
  def table_actions(*args, &block); end
  def table_for(*args, &block); end
  def tabs(*args, &block); end
  def title_bar(*args, &block); end
  def unsupported_browser(*args, &block); end
  def utility_navigation(*args, &block); end
end
class ActiveAdmin::Views::SemanticInputsProxy < ActiveAdmin::Views::FormtasticProxy
  def build(form_builder, *args, &block); end
end
class ActiveAdmin::Views::SemanticActionsProxy < ActiveAdmin::Views::FormtasticProxy
  def build(form_builder, *args, &block); end
end
class ActiveAdmin::Views::HasManyProxy < ActiveAdmin::Views::FormtasticProxy
  def build(form_builder, *args, &block); end
end
class ActiveAdmin::Views::AttributesTable < ActiveAdmin::Component
  def build(obj, *attrs); end
  def build_colgroups; end
  def content_for(record, attr); end
  def default_id_for_prefix; end
  def empty_value; end
  def header_content_for(attr); end
  def row(*args, &block); end
  def rows(*attrs); end
  def single_record?; end
end
class ActiveAdmin::Views::BlankSlate < ActiveAdmin::Component
  def build(content); end
  def default_class_name; end
end
class ActiveAdmin::Views::Columns < ActiveAdmin::Component
  def add_child(*arg0); end
  def calculate_columns!; end
  def closing_tag; end
  def column(*args, &block); end
  def columns; end
  def columns_span_count; end
  def margin_size; end
end
class ActiveAdmin::Views::Column < ActiveAdmin::Component
  def build(options = nil); end
  def max_width; end
  def max_width=(arg0); end
  def min_width; end
  def min_width=(arg0); end
  def safe_width(width); end
  def set_column_styles(column_width, margin_width, is_last_column = nil); end
  def span_size; end
  def span_size=(arg0); end
end
class ActiveAdmin::Views::DropdownMenu < ActiveAdmin::Component
  def build(name, options = nil); end
  def build_button(name, button_options); end
  def build_menu(options); end
  def item(*args); end
end
module ActiveAdmin::Helpers::Collection
  def collection_is_empty?(c = nil); end
  def collection_size(c = nil); end
end
class ActiveAdmin::Views::IndexList < ActiveAdmin::Component
  def build(index_classes); end
  def build_index_list(index_class); end
  def classes_for_index(index_class); end
  def current_filter_search_empty?; end
  def current_index?(index_class); end
  def default_class_name; end
  def tag_name; end
  include ActiveAdmin::Helpers::Collection
end
class ActiveAdmin::Views::Menu < ActiveAdmin::Component
  def build(menu, options = nil); end
  def menu; end
  def tag_name; end
end
class ActiveAdmin::Views::MenuItem < ActiveAdmin::Component
  def <=>(other); end
  def build(item, options = nil); end
  def label; end
  def priority; end
  def real_url?; end
  def tag_name; end
  def to_s; end
  def url; end
  def visible?; end
end
module ActiveAdmin::ViewHelpers
  include ActiveAdmin::Filters::ViewHelper
  include ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
  include ActiveAdmin::ViewHelpers::AutoLinkHelper
  include ActiveAdmin::ViewHelpers::BreadcrumbHelper
  include ActiveAdmin::ViewHelpers::DisplayHelper
  include ActiveAdmin::ViewHelpers::FlashHelper
  include ActiveAdmin::ViewHelpers::FormHelper
  include ActiveAdmin::ViewHelpers::ScopeNameHelper
  include ActiveAdmin::ViewHelpers::SidebarHelper
  include ActiveAdmin::ViewHelpers::TitleHelper
  include ActiveAdmin::ViewHelpers::ViewFactoryHelper
  include MethodOrProcHelper
end
module ActiveAdmin::ViewHelpers::FlashHelper
  def flash_messages; end
end
module ActiveAdmin::ViewHelpers::SidebarHelper
  def skip_sidebar!; end
  def skip_sidebar?; end
end
module ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
  def active_admin_application; end
end
module ActiveAdmin::ViewHelpers::AutoLinkHelper
  def active_admin_resource_for(klass); end
  def auto_link(resource, content = nil); end
  def auto_url_for(resource); end
end
module ActiveAdmin::ViewHelpers::DisplayHelper
  def association_methods_for(resource); end
  def boolean_attr?(resource, attr, value); end
  def display_name(resource); end
  def display_name_method_for(resource); end
  def find_value(resource, attr); end
  def format_attribute(resource, attr); end
  def format_collection(collection); end
  def pretty_format(object); end
end
module ActiveAdmin::ViewHelpers::FormHelper
  def active_admin_form_for(resource, options = nil, &block); end
  def fields_for_params(params, options = nil); end
  def hidden_field_tags_for(params, options = nil); end
end
module ActiveAdmin::ViewHelpers::TitleHelper
  def title(_title); end
end
module ActiveAdmin::ViewHelpers::ScopeNameHelper
  def scope_name(scope); end
end
module MethodOrProcHelper
  def call_method_or_exec_proc(symbol_or_proc, *args); end
  def call_method_or_proc_on(receiver, *args); end
  def render_in_context(context, obj, *args); end
  def render_or_call_method_or_proc_on(obj, string_symbol_or_proc, options = nil); end
  extend MethodOrProcHelper
end
module ActiveAdmin::ViewHelpers::ViewFactoryHelper
  def view_factory; end
end
module ActiveAdmin::ViewHelpers::BreadcrumbHelper
  def breadcrumb_links(path = nil); end
end
module ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  def build_download_format_links(formats = nil); end
  def build_download_formats(download_links); end
  def self.included(base); end
end
module ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper::ClassMethods
  def add_format(format); end
  def formats; end
end
class ActiveAdmin::Views::PaginatedCollection < ActiveAdmin::Component
  def add_child(*args, &block); end
  def build(collection, options = nil); end
  def build_pagination; end
  def build_pagination_with_formats(options); end
  def build_per_page_select; end
  def collection; end
  def page_entries_info(options = nil); end
  extend ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper::ClassMethods
  include ActiveAdmin::Helpers::Collection
  include ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
end
class ActiveAdmin::Views::Panel < ActiveAdmin::Component
  def add_child(child); end
  def build(title, attributes = nil); end
  def children?; end
  def header_action(*args); end
end
module ActiveAdmin::ScopeChain
  def scope_chain(scope, chain); end
end
class ActiveAdmin::Views::Scopes < ActiveAdmin::Component
  def build(scopes, options = nil); end
  def build_scope(scope, options); end
  def classes_for_scope(scope); end
  def current_scope?(scope); end
  def default_class_name; end
  def get_scope_count(scope); end
  def group_class(group); end
  def tag_name; end
  include ActiveAdmin::Helpers::Collection
  include ActiveAdmin::ScopeChain
end
class ActiveAdmin::Views::Sidebar < ActiveAdmin::Component
  def build(sections, attributes = nil); end
end
class ActiveAdmin::Views::SidebarSection < ActiveAdmin::Views::Panel
  def attributes_table(*args, &block); end
  def build(section); end
  def build_sidebar_content; end
end
class ActiveAdmin::Views::SiteTitle < ActiveAdmin::Component
  def build(namespace); end
  def site_title_content; end
  def site_title_image; end
  def site_title_link?; end
  def site_title_with_link; end
  def tag_name; end
  def title_image; end
  def title_text; end
end
class ActiveAdmin::Views::StatusTag < ActiveAdmin::Component
  def build(status, options = nil); end
  def convert_to_boolean_status(status); end
  def default_class_name; end
  def status_to_class(status); end
  def tag_name; end
end
class ActiveAdmin::Views::TableFor < Arbre::HTML::Table
  def build(obj, *attrs); end
  def build_table; end
  def build_table_body; end
  def build_table_cell(col, resource); end
  def build_table_head; end
  def build_table_header(col); end
  def column(*args, &block); end
  def columns(*attrs); end
  def current_sort; end
  def default_options; end
  def order_for_sort_key(sort_key); end
  def sortable?; end
  def tag_name; end
end
class ActiveAdmin::Views::TableFor::Column
  def data; end
  def data=(arg0); end
  def html_class; end
  def html_class=(arg0); end
  def initialize(*args, &block); end
  def pretty_title; end
  def sort_column_name; end
  def sort_key; end
  def sortable?; end
  def title; end
  def title=(arg0); end
end
class ActiveAdmin::Views::Tabs < ActiveAdmin::Component
  def build(&block); end
  def build_content_item(title, options, &block); end
  def build_menu_item(title, options, &block); end
  def fragmentize(string); end
  def tab(title, options = nil, &block); end
end
class ActiveAdmin::Views::UnsupportedBrowser < ActiveAdmin::Component
  def build; end
end
class ActiveAdmin::Views::Footer < ActiveAdmin::Component
  def build(namespace); end
  def footer_text; end
  def powered_by_message; end
end
class ActiveAdmin::Views::Header < ActiveAdmin::Component
  def build(namespace, menu); end
end
class ActiveAdmin::Views::IndexAsBlock < ActiveAdmin::Component
  def build(page_presenter, collection); end
  def self.index_name; end
end
class ActiveAdmin::Views::IndexAsBlog < ActiveAdmin::Component
  def body(method = nil, &block); end
  def build(page_presenter, collection); end
  def build_body(post); end
  def build_post(post); end
  def build_posts; end
  def build_title(post); end
  def render_method_on_post_or_call_proc(post, proc); end
  def self.index_name; end
  def title(method = nil, &block); end
end
class ActiveAdmin::Views::IndexAsGrid < ActiveAdmin::Component
  def build(page_presenter, collection); end
  def build_empty_cell; end
  def build_item(item); end
  def build_row(group); end
  def build_table; end
  def default_number_of_columns; end
  def number_of_columns; end
  def self.index_name; end
end
class ActiveAdmin::Views::IndexAsTable < ActiveAdmin::Component
  def build(page_presenter, collection); end
  def default_table; end
  def self.index_name; end
  def table_for(*args, &block); end
end
class ActiveAdmin::Views::IndexAsTable::IndexTableFor < ActiveAdmin::Views::TableFor
  def actions(options = nil, &block); end
  def default_actions; end
  def defaults(resource, options = nil); end
  def id_column; end
  def index_column(start_value = nil); end
  def selectable_column; end
end
class ActiveAdmin::Views::IndexAsTable::IndexTableFor::TableActions < ActiveAdmin::Component
  def item(*args); end
end
module ActiveAdmin::Views::Pages
end
class ActiveAdmin::Views::Pages::Base < Arbre::HTML::Document
  def action_items_for_action; end
  def active_admin_config(*args, &block); end
  def body_classes; end
  def build(*args); end
  def build_active_admin_head; end
  def build_flash_messages; end
  def build_main_content_wrapper; end
  def build_page; end
  def build_page_content; end
  def build_unsupported_browser; end
  def controller(*args, &block); end
  def html_title(*args, &block); end
  def main_content; end
  def params(*args, &block); end
  def sidebar_sections_for_action; end
  def skip_sidebar?; end
  def title; end
end
class ActiveAdmin::Views::Pages::Form < ActiveAdmin::Views::Pages::Base
  def default_form_config; end
  def default_form_options; end
  def default_form_path; end
  def form_presenter; end
  def main_content; end
  def normalized_action; end
  def title; end
end
class ActiveAdmin::Views::Pages::Index < ActiveAdmin::Views::Pages::Base
  def any_table_tools?; end
  def blank_slate_link; end
  def build_batch_actions_selector; end
  def build_collection; end
  def build_index_list; end
  def build_scopes; end
  def build_table_tools; end
  def config; end
  def default_blank_slate_link; end
  def find_index_renderer_class(klass); end
  def items_in_collection?; end
  def main_content; end
  def render_blank_slate; end
  def render_empty_results; end
  def render_index; end
  def title; end
  def wrap_with_batch_action_form(&block); end
  extend ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper::ClassMethods
  include ActiveAdmin::Helpers::Collection
  include ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
end
class ActiveAdmin::Views::Pages::Layout < ActiveAdmin::Views::Pages::Base
  def main_content; end
  def title; end
end
class ActiveAdmin::Views::Pages::Page < ActiveAdmin::Views::Pages::Base
  def main_content; end
  def page_presenter; end
  def title; end
end
class ActiveAdmin::Views::Pages::Show < ActiveAdmin::Views::Pages::Base
  def attributes_table(*args, &block); end
  def config; end
  def default_title; end
  def main_content; end
  def title; end
  include ActiveAdmin::Comments::ShowPageHelper
  include ActiveAdmin::Views::Pages::Show::DefaultMainContent
end
module ActiveAdmin::Views::Pages::Show::DefaultMainContent
  def default_attribute_table_rows; end
  def default_main_content(&block); end
end
class ActiveAdmin::Views::TabbedNavigation < ActiveAdmin::Views::Menu
  def build(menu, options = nil); end
end
class ActiveAdmin::Views::TitleBar < ActiveAdmin::Component
  def build(title, action_items); end
  def build_action_items; end
  def build_breadcrumb(separator = nil); end
  def build_title_tag; end
  def build_titlebar_left; end
  def build_titlebar_right; end
end
class ActiveAdmin::ViewFactory < ActiveAdmin::AbstractViewFactory
  def action_items; end
  def action_items=(val); end
  def action_items?; end
  def blank_slate; end
  def blank_slate=(val); end
  def blank_slate?; end
  def edit_page; end
  def edit_page=(val); end
  def edit_page?; end
  def footer; end
  def footer=(val); end
  def footer?; end
  def global_navigation; end
  def global_navigation=(val); end
  def global_navigation?; end
  def header; end
  def header=(val); end
  def header?; end
  def index_page; end
  def index_page=(val); end
  def index_page?; end
  def index_scopes; end
  def index_scopes=(val); end
  def index_scopes?; end
  def layout; end
  def layout=(val); end
  def layout?; end
  def new_page; end
  def new_page=(val); end
  def new_page?; end
  def page; end
  def page=(val); end
  def page?; end
  def self.action_items; end
  def self.action_items=(value); end
  def self.action_items?; end
  def self.blank_slate; end
  def self.blank_slate=(value); end
  def self.blank_slate?; end
  def self.edit_page; end
  def self.edit_page=(value); end
  def self.edit_page?; end
  def self.footer; end
  def self.footer=(value); end
  def self.footer?; end
  def self.global_navigation; end
  def self.global_navigation=(value); end
  def self.global_navigation?; end
  def self.header; end
  def self.header=(value); end
  def self.header?; end
  def self.index_page; end
  def self.index_page=(value); end
  def self.index_page?; end
  def self.index_scopes; end
  def self.index_scopes=(value); end
  def self.index_scopes?; end
  def self.layout; end
  def self.layout=(value); end
  def self.layout?; end
  def self.new_page; end
  def self.new_page=(value); end
  def self.new_page?; end
  def self.page; end
  def self.page=(value); end
  def self.page?; end
  def self.show_page; end
  def self.show_page=(value); end
  def self.show_page?; end
  def self.site_title; end
  def self.site_title=(value); end
  def self.site_title?; end
  def self.title_bar; end
  def self.title_bar=(value); end
  def self.title_bar?; end
  def self.unsupported_browser; end
  def self.unsupported_browser=(value); end
  def self.unsupported_browser?; end
  def self.utility_navigation; end
  def self.utility_navigation=(value); end
  def self.utility_navigation?; end
  def show_page; end
  def show_page=(val); end
  def show_page?; end
  def site_title; end
  def site_title=(val); end
  def site_title?; end
  def title_bar; end
  def title_bar=(val); end
  def title_bar?; end
  def unsupported_browser; end
  def unsupported_browser=(val); end
  def unsupported_browser?; end
  def utility_navigation; end
  def utility_navigation=(val); end
  def utility_navigation?; end
end
module ActiveAdmin::Authorization
end
class ActiveAdmin::AuthorizationAdapter
  def authorized?(action, subject = nil); end
  def initialize(resource, user); end
  def normalized(klass); end
  def resource; end
  def scope_collection(collection, action = nil); end
  def user; end
end
class ActiveAdmin::AuthorizationAdapter::NormalizedMatcher
  def ===(other); end
  def initialize(klass); end
end
class ActiveAdmin::OrderClause
  def active_admin_config; end
  def apply(chain); end
  def custom_sql; end
  def field; end
  def initialize(active_admin_config, clause); end
  def order; end
  def sql; end
  def table; end
  def table_column; end
  def to_sql; end
  def valid?; end
end
class ActiveAdmin::NamespaceSettings < ActiveAdmin::DynamicSettingsNode
  def authentication_method_setting; end
  def authentication_method_setting=(val); end
  def authentication_method_setting?; end
  def authorization_adapter_setting; end
  def authorization_adapter_setting=(val); end
  def authorization_adapter_setting?; end
  def batch_actions_setting; end
  def batch_actions_setting=(val); end
  def batch_actions_setting?; end
  def breadcrumb_setting; end
  def breadcrumb_setting=(val); end
  def breadcrumb_setting?; end
  def comments_menu_setting; end
  def comments_menu_setting=(val); end
  def comments_menu_setting?; end
  def comments_order_setting; end
  def comments_order_setting=(val); end
  def comments_order_setting?; end
  def comments_registration_name_setting; end
  def comments_registration_name_setting=(val); end
  def comments_registration_name_setting?; end
  def comments_setting; end
  def comments_setting=(val); end
  def comments_setting?; end
  def create_another_setting; end
  def create_another_setting=(val); end
  def create_another_setting?; end
  def csv_options_setting; end
  def csv_options_setting=(val); end
  def csv_options_setting?; end
  def current_filters_setting; end
  def current_filters_setting=(val); end
  def current_filters_setting?; end
  def current_user_method_setting; end
  def current_user_method_setting=(val); end
  def current_user_method_setting?; end
  def default_per_page_setting; end
  def default_per_page_setting=(val); end
  def default_per_page_setting?; end
  def download_links_setting; end
  def download_links_setting=(val); end
  def download_links_setting?; end
  def favicon_setting; end
  def favicon_setting=(val); end
  def favicon_setting?; end
  def filter_columns_for_large_association_setting; end
  def filter_columns_for_large_association_setting=(val); end
  def filter_columns_for_large_association_setting?; end
  def filter_method_for_large_association_setting; end
  def filter_method_for_large_association_setting=(val); end
  def filter_method_for_large_association_setting?; end
  def filters_setting; end
  def filters_setting=(val); end
  def filters_setting?; end
  def flash_keys_to_except_setting; end
  def flash_keys_to_except_setting=(val); end
  def flash_keys_to_except_setting?; end
  def footer_setting; end
  def footer_setting=(val); end
  def footer_setting?; end
  def head_setting; end
  def head_setting=(val); end
  def head_setting?; end
  def include_default_association_filters_setting; end
  def include_default_association_filters_setting=(val); end
  def include_default_association_filters_setting?; end
  def logout_link_method_setting; end
  def logout_link_method_setting=(val); end
  def logout_link_method_setting?; end
  def logout_link_path_setting; end
  def logout_link_path_setting=(val); end
  def logout_link_path_setting?; end
  def max_per_page_setting; end
  def max_per_page_setting=(val); end
  def max_per_page_setting?; end
  def maximum_association_filter_arity_setting; end
  def maximum_association_filter_arity_setting=(val); end
  def maximum_association_filter_arity_setting?; end
  def meta_tags_for_logged_out_pages_setting; end
  def meta_tags_for_logged_out_pages_setting=(val); end
  def meta_tags_for_logged_out_pages_setting?; end
  def meta_tags_setting; end
  def meta_tags_setting=(val); end
  def meta_tags_setting?; end
  def on_unauthorized_access_setting; end
  def on_unauthorized_access_setting=(val); end
  def on_unauthorized_access_setting?; end
  def order_clause_setting; end
  def order_clause_setting=(val); end
  def order_clause_setting?; end
  def permitted_params_setting; end
  def permitted_params_setting=(val); end
  def permitted_params_setting?; end
  def root_to_options_setting; end
  def root_to_options_setting=(val); end
  def root_to_options_setting?; end
  def root_to_setting; end
  def root_to_setting=(val); end
  def root_to_setting?; end
  def route_options_setting; end
  def route_options_setting=(val); end
  def route_options_setting?; end
  def scopes_show_count_setting; end
  def scopes_show_count_setting=(val); end
  def scopes_show_count_setting?; end
  def self.authentication_method(*args); end
  def self.authentication_method=(value); end
  def self.authentication_method_setting; end
  def self.authentication_method_setting=(val); end
  def self.authentication_method_setting?; end
  def self.authorization_adapter(*args); end
  def self.authorization_adapter=(value); end
  def self.authorization_adapter_setting; end
  def self.authorization_adapter_setting=(val); end
  def self.authorization_adapter_setting?; end
  def self.batch_actions(*args); end
  def self.batch_actions=(value); end
  def self.batch_actions_setting; end
  def self.batch_actions_setting=(val); end
  def self.batch_actions_setting?; end
  def self.breadcrumb(*args); end
  def self.breadcrumb=(value); end
  def self.breadcrumb_setting; end
  def self.breadcrumb_setting=(val); end
  def self.breadcrumb_setting?; end
  def self.comments(*args); end
  def self.comments=(value); end
  def self.comments_menu(*args); end
  def self.comments_menu=(value); end
  def self.comments_menu_setting; end
  def self.comments_menu_setting=(val); end
  def self.comments_menu_setting?; end
  def self.comments_order(*args); end
  def self.comments_order=(value); end
  def self.comments_order_setting; end
  def self.comments_order_setting=(val); end
  def self.comments_order_setting?; end
  def self.comments_registration_name(*args); end
  def self.comments_registration_name=(value); end
  def self.comments_registration_name_setting; end
  def self.comments_registration_name_setting=(val); end
  def self.comments_registration_name_setting?; end
  def self.comments_setting; end
  def self.comments_setting=(val); end
  def self.comments_setting?; end
  def self.create_another(*args); end
  def self.create_another=(value); end
  def self.create_another_setting; end
  def self.create_another_setting=(val); end
  def self.create_another_setting?; end
  def self.csv_options(*args); end
  def self.csv_options=(value); end
  def self.csv_options_setting; end
  def self.csv_options_setting=(val); end
  def self.csv_options_setting?; end
  def self.current_filters(*args); end
  def self.current_filters=(value); end
  def self.current_filters_setting; end
  def self.current_filters_setting=(val); end
  def self.current_filters_setting?; end
  def self.current_user_method(*args); end
  def self.current_user_method=(value); end
  def self.current_user_method_setting; end
  def self.current_user_method_setting=(val); end
  def self.current_user_method_setting?; end
  def self.default_per_page(*args); end
  def self.default_per_page=(value); end
  def self.default_per_page_setting; end
  def self.default_per_page_setting=(val); end
  def self.default_per_page_setting?; end
  def self.download_links(*args); end
  def self.download_links=(value); end
  def self.download_links_setting; end
  def self.download_links_setting=(val); end
  def self.download_links_setting?; end
  def self.favicon(*args); end
  def self.favicon=(value); end
  def self.favicon_setting; end
  def self.favicon_setting=(val); end
  def self.favicon_setting?; end
  def self.filter_columns_for_large_association(*args); end
  def self.filter_columns_for_large_association=(value); end
  def self.filter_columns_for_large_association_setting; end
  def self.filter_columns_for_large_association_setting=(val); end
  def self.filter_columns_for_large_association_setting?; end
  def self.filter_method_for_large_association(*args); end
  def self.filter_method_for_large_association=(value); end
  def self.filter_method_for_large_association_setting; end
  def self.filter_method_for_large_association_setting=(val); end
  def self.filter_method_for_large_association_setting?; end
  def self.filters(*args); end
  def self.filters=(value); end
  def self.filters_setting; end
  def self.filters_setting=(val); end
  def self.filters_setting?; end
  def self.flash_keys_to_except(*args); end
  def self.flash_keys_to_except=(value); end
  def self.flash_keys_to_except_setting; end
  def self.flash_keys_to_except_setting=(val); end
  def self.flash_keys_to_except_setting?; end
  def self.footer(*args); end
  def self.footer=(value); end
  def self.footer_setting; end
  def self.footer_setting=(val); end
  def self.footer_setting?; end
  def self.head(*args); end
  def self.head=(value); end
  def self.head_setting; end
  def self.head_setting=(val); end
  def self.head_setting?; end
  def self.include_default_association_filters(*args); end
  def self.include_default_association_filters=(value); end
  def self.include_default_association_filters_setting; end
  def self.include_default_association_filters_setting=(val); end
  def self.include_default_association_filters_setting?; end
  def self.logout_link_method(*args); end
  def self.logout_link_method=(value); end
  def self.logout_link_method_setting; end
  def self.logout_link_method_setting=(val); end
  def self.logout_link_method_setting?; end
  def self.logout_link_path(*args); end
  def self.logout_link_path=(value); end
  def self.logout_link_path_setting; end
  def self.logout_link_path_setting=(val); end
  def self.logout_link_path_setting?; end
  def self.max_per_page(*args); end
  def self.max_per_page=(value); end
  def self.max_per_page_setting; end
  def self.max_per_page_setting=(val); end
  def self.max_per_page_setting?; end
  def self.maximum_association_filter_arity(*args); end
  def self.maximum_association_filter_arity=(value); end
  def self.maximum_association_filter_arity_setting; end
  def self.maximum_association_filter_arity_setting=(val); end
  def self.maximum_association_filter_arity_setting?; end
  def self.meta_tags(*args); end
  def self.meta_tags=(value); end
  def self.meta_tags_for_logged_out_pages(*args); end
  def self.meta_tags_for_logged_out_pages=(value); end
  def self.meta_tags_for_logged_out_pages_setting; end
  def self.meta_tags_for_logged_out_pages_setting=(val); end
  def self.meta_tags_for_logged_out_pages_setting?; end
  def self.meta_tags_setting; end
  def self.meta_tags_setting=(val); end
  def self.meta_tags_setting?; end
  def self.on_unauthorized_access(*args); end
  def self.on_unauthorized_access=(value); end
  def self.on_unauthorized_access_setting; end
  def self.on_unauthorized_access_setting=(val); end
  def self.on_unauthorized_access_setting?; end
  def self.order_clause(*args); end
  def self.order_clause=(value); end
  def self.order_clause_setting; end
  def self.order_clause_setting=(val); end
  def self.order_clause_setting?; end
  def self.permitted_params(*args); end
  def self.permitted_params=(value); end
  def self.permitted_params_setting; end
  def self.permitted_params_setting=(val); end
  def self.permitted_params_setting?; end
  def self.root_to(*args); end
  def self.root_to=(value); end
  def self.root_to_options(*args); end
  def self.root_to_options=(value); end
  def self.root_to_options_setting; end
  def self.root_to_options_setting=(val); end
  def self.root_to_options_setting?; end
  def self.root_to_setting; end
  def self.root_to_setting=(val); end
  def self.root_to_setting?; end
  def self.route_options(*args); end
  def self.route_options=(value); end
  def self.route_options_setting; end
  def self.route_options_setting=(val); end
  def self.route_options_setting?; end
  def self.scopes_show_count(*args); end
  def self.scopes_show_count=(value); end
  def self.scopes_show_count_setting; end
  def self.scopes_show_count_setting=(val); end
  def self.scopes_show_count_setting?; end
  def self.site_title(*args); end
  def self.site_title=(value); end
  def self.site_title_image(*args); end
  def self.site_title_image=(value); end
  def self.site_title_image_setting; end
  def self.site_title_image_setting=(val); end
  def self.site_title_image_setting?; end
  def self.site_title_link(*args); end
  def self.site_title_link=(value); end
  def self.site_title_link_setting; end
  def self.site_title_link_setting=(val); end
  def self.site_title_link_setting?; end
  def self.site_title_setting; end
  def self.site_title_setting=(val); end
  def self.site_title_setting?; end
  def self.unsupported_browser_matcher(*args); end
  def self.unsupported_browser_matcher=(value); end
  def self.unsupported_browser_matcher_setting; end
  def self.unsupported_browser_matcher_setting=(val); end
  def self.unsupported_browser_matcher_setting?; end
  def self.use_webpacker(*args); end
  def self.use_webpacker=(value); end
  def self.use_webpacker_setting; end
  def self.use_webpacker_setting=(val); end
  def self.use_webpacker_setting?; end
  def self.view_factory(*args); end
  def self.view_factory=(value); end
  def self.view_factory_setting; end
  def self.view_factory_setting=(val); end
  def self.view_factory_setting?; end
  def site_title_image_setting; end
  def site_title_image_setting=(val); end
  def site_title_image_setting?; end
  def site_title_link_setting; end
  def site_title_link_setting=(val); end
  def site_title_link_setting?; end
  def site_title_setting; end
  def site_title_setting=(val); end
  def site_title_setting?; end
  def unsupported_browser_matcher_setting; end
  def unsupported_browser_matcher_setting=(val); end
  def unsupported_browser_matcher_setting?; end
  def use_webpacker_setting; end
  def use_webpacker_setting=(val); end
  def use_webpacker_setting?; end
  def view_factory_setting; end
  def view_factory_setting=(val); end
  def view_factory_setting?; end
end
module ActiveAdmin::AssetRegistration
  def clear_javascripts!; end
  def clear_stylesheets!; end
  def javascripts; end
  def register_javascript(name); end
  def register_stylesheet(path, options = nil); end
  def stylesheets; end
end
class ActiveAdmin::Application
  def after_action(*args, &block); end
  def append_after_action(*args, &block); end
  def append_around_action(*args, &block); end
  def append_before_action(*args, &block); end
  def around_action(*args, &block); end
  def attach_reloader; end
  def before_action(*args, &block); end
  def controllers_for_filters; end
  def files; end
  def initialize; end
  def load!; end
  def load(file); end
  def loaded?; end
  def method_missing(method, *args); end
  def namespace(name); end
  def namespace_settings; end
  def namespaces; end
  def prepare!; end
  def prepend_after_action(*args, &block); end
  def prepend_around_action(*args, &block); end
  def prepend_before_action(*args, &block); end
  def register(resource, options = nil, &block); end
  def register_default_assets; end
  def register_page(name, options = nil, &block); end
  def remove_active_admin_load_paths_from_rails_autoload_and_eager_load; end
  def respond_to_missing?(method, include_private = nil); end
  def routes(rails_router); end
  def self.inheritable_setting(name, default); end
  def self.setting(name, default); end
  def settings; end
  def setup!; end
  def skip_after_action(*args, &block); end
  def skip_around_action(*args, &block); end
  def skip_before_action(*args, &block); end
  def unload!; end
  include ActiveAdmin::AssetRegistration
end
module ActiveAdmin::Filters
end
module ActiveAdmin::Filters::DSL
  def filter(attribute, options = nil); end
  def preserve_default_filters!; end
  def remove_filter(*attributes); end
end
class ActiveAdmin::Filters::Disabled < RuntimeError
  def initialize; end
end
module ActiveAdmin::Filters::ResourceExtension
  def add_filter(attribute, options = nil); end
  def add_filters_sidebar_section; end
  def add_search_status_sidebar_section; end
  def current_filters=(bool); end
  def current_filters_enabled?; end
  def custom_ransack_filters; end
  def default_association_filters; end
  def default_filters; end
  def filter_lookup; end
  def filters; end
  def filters=(bool); end
  def filters_enabled?; end
  def filters_sidebar_section; end
  def initialize(*arg0); end
  def preserve_default_filters!; end
  def preserve_default_filters?; end
  def remove_filter(*attributes); end
  def reset_filters!; end
  def search_columns; end
  def searchable_column_for(relation); end
end
module ActiveAdmin::Filters::FormtasticAddons
  def column; end
  def column_for(method); end
  def has_predicate?; end
  def humanized_method_name; end
  def klass; end
  def polymorphic_foreign_type?(method); end
  def ransacker?; end
  def reflection_for(method); end
  def scope?; end
  def searchable_has_many_through?; end
  def seems_searchable?; end
end
module ActiveAdmin::Inputs
  extend ActiveSupport::Autoload
end
module ActiveAdmin::Inputs::Filters
  extend ActiveSupport::Autoload
end
module Formtastic
end
module Formtastic::Inputs
end
module Formtastic::Inputs::Base
  def input_wrapping(&block); end
end
class ActiveAdmin::FormBuilder < Formtastic::FormBuilder
  def already_in_an_inputs_block; end
  def already_in_an_inputs_block=(arg0); end
  def cancel_link(url = nil, html_options = nil, li_attrs = nil); end
  def has_many(assoc, options = nil, &block); end
  def self.action_class_finder; end
  def self.input_class_finder; end
  def self.input_namespaces; end
end
class ActiveAdmin::HasManyBuilder < SimpleDelegator
  def allow_destroy?(form_object); end
  def assoc; end
  def assoc_klass; end
  def content_has_many(&block); end
  def default_heading; end
  def destroy_option; end
  def extract_custom_settings!(options); end
  def has_many_actions(form_builder, contents); end
  def heading; end
  def initialize(has_many_form, assoc, options); end
  def js_for_has_many(class_string, &form_block); end
  def new_record; end
  def options; end
  def render(&block); end
  def render_has_many_form(form_builder, parent, &block); end
  def sortable_column; end
  def sortable_start; end
  def sorted_children(column); end
  def without_wrapper; end
  def wrap_div_or_li(html); end
end
class ActiveAdmin::Filters::FormBuilder < ActiveAdmin::FormBuilder
  def default_input_type(method, options = nil); end
  def filter(method, options = nil); end
  def self.input_class_finder; end
  def self.input_namespaces; end
  include ActiveAdmin::Filters::FormtasticAddons
end
module ActiveAdmin::Filters::ViewHelper
  def active_admin_filters_form_for(search, filters, options = nil); end
  def except_hidden_fields; end
end
module ActiveAdmin::OptionalDisplay
  def display_on?(action, render_context = nil); end
  def normalize_display_options!; end
end
class ActiveAdmin::Filters::ActiveFilter
  def attribute_name; end
  def condition; end
  def condition_attribute; end
  def filter; end
  def filter_label; end
  def find_class; end
  def find_class?; end
  def find_predicate_association; end
  def html_options; end
  def initialize(resource, condition); end
  def label; end
  def name; end
  def predicate_association; end
  def predicate_name; end
  def ransack_predicate_name; end
  def related_class; end
  def related_class_name; end
  def related_primary_key; end
  def resource; end
  def resource_class; end
  def values; end
  include ActiveAdmin::ViewHelpers
end
class ActiveAdmin::Filters::Active
  def build_filters(conditions); end
  def filters; end
  def filters=(arg0); end
  def initialize(resource, search); end
  def resource; end
  def resource=(arg0); end
end
class ActiveAdmin::SidebarSection
  def block; end
  def block=(arg0); end
  def custom_class; end
  def id; end
  def initialize(name, options = nil, &block); end
  def name; end
  def name=(arg0); end
  def options; end
  def options=(arg0); end
  def partial_name; end
  def priority; end
  def title; end
  include ActiveAdmin::OptionalDisplay
end
class ActiveAdmin::Filters::ActiveSidebar < ActiveAdmin::SidebarSection
  def block; end
  def initialize; end
  def sidebar_options; end
  def title; end
end
class ActiveAdmin::DSL
  def action_item(name, options = nil, &block); end
  def batch_action(title, options = nil, &block); end
  def breadcrumb(&block); end
  def config; end
  def controller(&block); end
  def include(mod); end
  def initialize(config); end
  def menu(options = nil); end
  def navigation_menu(menu_name = nil, &block); end
  def run_registration_block(&block); end
  def sidebar(name, options = nil, &block); end
end
class ActiveAdmin::ResourceDSL < ActiveAdmin::DSL
  def action(set, name, options = nil, &block); end
  def actions(*args, &block); end
  def after_action(*args, &block); end
  def after_build(*args, &block); end
  def after_create(*args, &block); end
  def after_destroy(*args, &block); end
  def after_save(*args, &block); end
  def after_update(*args, &block); end
  def around_action(*args, &block); end
  def before_action(*args, &block); end
  def before_build(*args, &block); end
  def before_create(*args, &block); end
  def before_destroy(*args, &block); end
  def before_save(*args, &block); end
  def before_update(*args, &block); end
  def belongs_to(target, options = nil); end
  def collection_action(name, options = nil, &block); end
  def csv(options = nil, &block); end
  def decorate_with(decorator_class); end
  def form(options = nil, &block); end
  def includes(*args); end
  def index(options = nil, &block); end
  def member_action(name, options = nil, &block); end
  def order_by(column, &block); end
  def permit_params(*args, &block); end
  def scope(*args, &block); end
  def scope_to(*args, &block); end
  def show(options = nil, &block); end
  def skip_action(*args, &block); end
  def skip_after_action(*args, &block); end
  def skip_before_action(*args, &block); end
  include ActiveAdmin::Filters::DSL
end
class ActiveAdmin::Resource
  def association_columns; end
  def belongs_to(target, options = nil); end
  def belongs_to?; end
  def belongs_to_config; end
  def belongs_to_param; end
  def breadcrumb; end
  def breadcrumb=(arg0); end
  def clear_collection_actions!; end
  def clear_member_actions!; end
  def collection_actions; end
  def comments; end
  def comments=(arg0); end
  def content_columns; end
  def create_another; end
  def create_another=(arg0); end
  def csv_builder; end
  def csv_builder=(arg0); end
  def decorator_class; end
  def decorator_class_name; end
  def decorator_class_name=(arg0); end
  def default_csv_builder; end
  def define_resource_name_extension(resource); end
  def defined_actions; end
  def dsl; end
  def dsl=(arg0); end
  def find_resource(id); end
  def member_actions; end
  def method_for_find(id); end
  def namespace; end
  def order_clause; end
  def order_clause=(arg0); end
  def resource_attributes; end
  def resource_class; end
  def resource_class_name; end
  def resource_column_names; end
  def resource_columns; end
  def resource_name_extension; end
  def resource_quoted_column_name(column); end
  def resource_table_name; end
  def sort_order; end
  def sort_order=(arg0); end
  include ActiveAdmin::Authorization
  include ActiveAdmin::Comments::ResourceHelper
  include ActiveAdmin::Filters::ResourceExtension
  include ActiveAdmin::Resource::ActionItems
  include ActiveAdmin::Resource::Attributes
  include ActiveAdmin::Resource::Base
  include ActiveAdmin::Resource::Controllers
  include ActiveAdmin::Resource::Includes
  include ActiveAdmin::Resource::Menu
  include ActiveAdmin::Resource::Naming
  include ActiveAdmin::Resource::Ordering
  include ActiveAdmin::Resource::PagePresenters
  include ActiveAdmin::Resource::Pagination
  include ActiveAdmin::Resource::Routes
  include ActiveAdmin::Resource::ScopeTo
  include ActiveAdmin::Resource::Scopes
  include ActiveAdmin::Resource::Sidebars
  include MethodOrProcHelper
end
module ActiveAdmin::Resource::ActionItems
  def action_items; end
  def action_items?; end
  def action_items_for(action, render_context = nil); end
  def add_action_item(name, options = nil, &block); end
  def add_default_action_items; end
  def add_default_edit_action_item; end
  def add_default_new_action_item; end
  def add_default_show_action_item; end
  def clear_action_items!; end
  def initialize(*args); end
  def remove_action_item(name); end
end
class ActiveAdmin::ActionItem
  def block; end
  def block=(arg0); end
  def html_class; end
  def initialize(name, options = nil, &block); end
  def name; end
  def name=(arg0); end
  def priority; end
  include ActiveAdmin::OptionalDisplay
end
module ActiveAdmin::Resource::Attributes
  def counter_cache_col?(c); end
  def default_attributes; end
  def filtered_col?(c); end
  def foreign_methods; end
  def method_for_column(c); end
  def primary_col?(c); end
  def reject_col?(c); end
  def sti_col?(c); end
end
module ActiveAdmin::Resource::Controllers
  def controller; end
  def controller_name; end
  def resources_configuration(*args, &block); end
end
module ActiveAdmin::Resource::Menu
  def add_to_menu(menu_collection); end
  def default_menu_options; end
  def include_in_menu?; end
  def menu_item; end
  def menu_item_options; end
  def menu_item_options=(options); end
  def navigation_menu; end
  def navigation_menu_name; end
  def navigation_menu_name=(menu_name); end
end
module ActiveAdmin::Resource::PagePresenters
  def default_index_class; end
  def find_index_class(symbol_or_class); end
  def get_page_presenter(action, type = nil); end
  def page_presenters; end
  def set_index_presenter(index_as, page_presenter); end
  def set_page_presenter(action, page_presenter); end
end
module ActiveAdmin::Resource::Pagination
  def initialize(*args); end
  def max_per_page; end
  def max_per_page=(arg0); end
  def paginate; end
  def paginate=(arg0); end
  def per_page; end
  def per_page=(arg0); end
end
module ActiveAdmin::Resource::Routes
  def route_batch_action_path(params = nil, additional_params = nil); end
  def route_builder; end
  def route_collection_path(params = nil, additional_params = nil); end
  def route_edit_instance_path(resource, additional_params = nil); end
  def route_instance_path(resource, additional_params = nil); end
  def route_member_action_path(action, resource, additional_params = nil); end
  def route_prefix; end
  def route_uncountable?; end
end
class ActiveAdmin::Resource::Routes::RouteBuilder
  def batch_action_path(params, additional_params = nil); end
  def belongs_to_config; end
  def belongs_to_name; end
  def belongs_to_target_name; end
  def collection_path(params, additional_params = nil); end
  def initialize(resource); end
  def instance_path(instance, additional_params = nil); end
  def member_action_path(action, instance, additional_params = nil); end
  def nested?; end
  def resource; end
  def route_collection_params(params); end
  def route_instance_params(instance); end
  def route_name(resource_path_name, options = nil); end
  def routes; end
end
module ActiveAdmin::Resource::Naming
  def param_key; end
  def plural_resource_label(options = nil); end
  def resource_label; end
  def resource_name; end
end
class ActiveAdmin::Resource::Name < ActiveModel::Name
  def eql?(other); end
  def hash(*args, &block); end
  def initialize(klass, name = nil); end
  def route_key; end
  def translate(options = nil); end
end
module ActiveAdmin::Resource::Scopes
  def default_scope(context = nil); end
  def get_scope_by_id(id); end
  def scope(*args, &block); end
  def scopes; end
end
module ActiveAdmin::Resource::Includes
  def includes; end
end
module ActiveAdmin::Resource::ScopeTo
  def scope_to(*args, &block); end
  def scope_to?(context = nil); end
  def scope_to_association_method; end
  def scope_to_config; end
  def scope_to_method; end
end
module ActiveAdmin::Resource::Sidebars
  def clear_sidebar_sections!; end
  def sidebar_sections; end
  def sidebar_sections?; end
  def sidebar_sections_for(action, render_context = nil); end
end
class ActiveAdmin::Resource::BelongsTo
  def initialize(owner, target_name, options = nil); end
  def namespace; end
  def optional?; end
  def owner; end
  def required?; end
  def resource; end
  def target; end
  def target_name; end
  def to_param; end
end
class ActiveAdmin::Resource::BelongsTo::TargetNotFound < StandardError
  def initialize(key, namespace); end
end
module ActiveAdmin::Resource::Ordering
  def ordering; end
end
class ActiveAdmin::Model
  def initialize(resource, record); end
  def to_model; end
end
module ActiveAdmin::Resource::Base
  def initialize(namespace, resource_class, options = nil); end
end
module ActiveAdmin::Comments
end
module ActiveAdmin::Comments::Views
end
class ActiveAdmin::Comments::Views::Comments < ActiveAdmin::Views::Panel
  def build(resource); end
  def build_comment(comment); end
  def build_comment_form; end
  def build_comments; end
  def build_empty_message; end
  def comment_form_url; end
  def comments_url(*args); end
  def default_id_for_prefix; end
  def resource; end
  def resource=(arg0); end
  def title; end
end
module ActiveAdmin::Comments::ShowPageHelper
  def active_admin_comments(*args, &block); end
  def default_main_content; end
end
module ActiveAdmin::Comments::NamespaceHelper
  def comments?; end
end
module ActiveAdmin::Comments::ResourceHelper
  def comments?; end
  extend ActiveSupport::Concern
end
class ActiveAdmin::ResourceCollection
  def [](obj); end
  def add(resource); end
  def each(&block); end
  def empty?(*args, &block); end
  def find_resource(obj); end
  def has_key?(*args, &block); end
  def initialize; end
  def keys(*args, &block); end
  def raise_if_mismatched!(existing, given); end
  def resources; end
  def size(*args, &block); end
  def values(*args, &block); end
  extend Forwardable
  include Enumerable
end
class ActiveAdmin::ResourceCollection::IncorrectClass < StandardError
  def initialize(existing, given); end
end
class ActiveAdmin::ResourceCollection::ConfigMismatch < StandardError
  def initialize(existing, given); end
end
class ActiveAdmin::Namespace
  def add_current_user_to_menu(menu, priority = nil, html_options = nil); end
  def add_logout_button_to_menu(menu, priority = nil, html_options = nil); end
  def application; end
  def build_default_utility_nav; end
  def build_menu(name = nil); end
  def build_menu_collection; end
  def build_page(name, options); end
  def fetch_menu(name); end
  def find_or_build_resource(resource_class, options); end
  def initialize(application, name); end
  def menus; end
  def method_missing(method, *args); end
  def module_name; end
  def name; end
  def parse_page_registration_block(config, &block); end
  def parse_registration_block(config, &block); end
  def register(resource_class, options = nil, &block); end
  def register_module; end
  def register_page(name, options = nil, &block); end
  def register_page_controller(config); end
  def register_resource_controller(config); end
  def reset_menu!; end
  def resource_for(klass); end
  def resources; end
  def respond_to_missing?(method, include_private = nil); end
  def root?; end
  def route_prefix; end
  def self.setting(name, default); end
  def settings; end
  def unload!; end
  def unload_resources!; end
  include ActiveAdmin::Comments::NamespaceHelper
end
class ActiveAdmin::Namespace::Store
  def [](*args, &block); end
  def []=(*args, &block); end
  def each(&block); end
  def empty?(*args, &block); end
  def initialize; end
  def names; end
  include Enumerable
end
module ActiveAdmin::Helpers::Routes
  def self.default_url_options; end
  extend ActiveAdmin::Helpers::Routes::UrlHelpers
end
module ActiveAdmin::Helpers::Routes::UrlHelpers
  def default_url_options=(obj); end
  def self._routes; end
  def self.default_url_options=(obj); end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_26
end
module Anonymous_Module_26
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
module ActiveAdmin::BatchActions
end
module ActiveAdmin::BatchActions::ResourceExtension
  def add_batch_action(sym, title, options = nil, &block); end
  def add_default_batch_action; end
  def batch_actions; end
  def batch_actions=(bool); end
  def batch_actions_enabled?; end
  def clear_batch_actions!; end
  def initialize(*arg0); end
  def remove_batch_action(sym); end
end
class ActiveAdmin::BatchAction
  def <=>(other); end
  def block; end
  def confirm; end
  def display_if_block; end
  def initialize(sym, title, options = nil, &block); end
  def inputs; end
  def priority; end
  def sym; end
  def title; end
  include Comparable
end
module ActiveAdmin::BatchActions::Controller
  def action_present?; end
  def batch_action; end
  def batch_action_collection(only = nil); end
  def current_batch_action; end
end
module InheritedResources
end
class ApplicationController < ActionController::Base
  def _layout(formats); end
  def authenticate_active_admin_user!(*args, &blk); end
  def configure_permitted_parameters(*args, &blk); end
  def current_theme; end
  def layout_from_theme; end
  def self.__callbacks; end
  def self._helper_methods; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def set_header_variable(*args, &blk); end
  def theme_instance; end
  def theme_resolver(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend ThemesOnRails::ControllerAdditions::ClassMethods
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_29
end
module ApplicationHelper
  def contributor_profile_url(*args, &blk); end
  def contributors(*args, &blk); end
  def donate_url(*args, &blk); end
  def facebook_share_url(*args, &blk); end
  def km_in_words(*args, &blk); end
  def li_selected(*args, &blk); end
  def meters_in_words(*args, &blk); end
  def nav_item(*args, &blk); end
  def our_sanitize(*args, &blk); end
  def page_matches?(*args, &blk); end
  def significant_figure(*args, &blk); end
  def significant_figure_remove_trailing_zero(*args, &blk); end
  def twitter_share_url(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Anonymous_Module_29
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
module AlertMailerHelper
  def application_url_with_tracking(*args, &blk); end
  def base_tracking_params(*args, &blk); end
  def capitalise_initial_character(*args, &blk); end
  def comment_url_with_tracking(*args, &blk); end
  def new_comment_url_with_tracking(*args, &blk); end
  def subject(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module ApiHowtoHelper
  def api_example_area_url(*args, &blk); end
  def api_example_area_url_html(*args, &blk); end
  def api_example_authority_url(*args, &blk); end
  def api_example_authority_url_html(*args, &blk); end
  def api_example_latlong_url(*args, &blk); end
  def api_example_latlong_url_html(*args, &blk); end
  def api_example_postcode_url(*args, &blk); end
  def api_example_postcode_url_html(*args, &blk); end
  def api_example_suburb_state_and_postcode_url(*args, &blk); end
  def api_example_suburb_state_and_postcode_url_html(*args, &blk); end
  def api_key(*args, &blk); end
  def htmlify(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include ApplicationsHelper
end
module ApplicationsHelper
  def api_host(*args, &blk); end
  def days_ago_in_words(*args, &blk); end
  def days_in_future_in_words(*args, &blk); end
  def display_description_with_address(*args, &blk); end
  def distance_and_heading_in_words(*args, &blk); end
  def google_signed_url(*args, &blk); end
  def google_static_map(*args, &blk); end
  def google_static_map_lat_lng(*args, &blk); end
  def google_static_map_url(*args, &blk); end
  def google_static_map_url_lat_lng(*args, &blk); end
  def google_static_streetview(*args, &blk); end
  def google_static_streetview_url(*args, &blk); end
  def heading_in_words(*args, &blk); end
  def non_symmetric_round(*args, &blk); end
  def on_notice_text(*args, &blk); end
  def page_title(*args, &blk); end
  def scraped_and_received_text(*args, &blk); end
  def sign_gmap_bus_api_url(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module AtdisHelper
  def attribute_value(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include ApplicationsHelper
end
module AuthoritiesHelper
  def github_issues_url(*args, &blk); end
  def github_url(*args, &blk); end
  def morph_url(*args, &blk); end
  def morph_watchers_url(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CommentsHelper
  def comment_as_html(*args, &blk); end
  def comment_path(*args, &blk); end
  def comment_url(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include ApplicationHelper
end
module SignupHelper
  def draw_box_javascript(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module StaticHelper
end
module DeviseHelper
  def devise_error_messages!; end
end
class InheritedResources::Base < ApplicationController
  def _layout(formats); end
  def parents_symbols; end
  def parents_symbols?; end
  def resource_class; end
  def resource_class?; end
  def resources_configuration; end
  def resources_configuration?; end
  def self._helper_methods; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.inherit_resources(base); end
  def self.middleware_stack; end
  def self.mimes_for_respond_to; end
  def self.parents_symbols; end
  def self.parents_symbols=(val); end
  def self.parents_symbols?; end
  def self.resource_class; end
  def self.resource_class=(val); end
  def self.resource_class?; end
  def self.resources_configuration; end
  def self.resources_configuration=(val); end
  def self.resources_configuration?; end
  def self.responder; end
  extend InheritedResources::ClassMethods
  extend InheritedResources::UrlHelpers
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_30
  include InheritedResources::Actions
  include InheritedResources::BaseHelpers
end
module Anonymous_Module_30
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
class ActiveAdmin::BaseController < InheritedResources::Base
  def _collection_params(*given_args); end
  def _edit_resource_params(*given_args); end
  def _layout(formats); end
  def _new_resource_params(*given_args); end
  def _resource_params(*given_args); end
  def active_admin_config; end
  def active_admin_namespace; end
  def active_admin_root; end
  def authenticate_active_admin_user; end
  def collection_path(*given_args); end
  def collection_url(*given_args); end
  def current_active_admin_user; end
  def current_active_admin_user?; end
  def determine_active_admin_layout; end
  def edit_resource_path(*given_args); end
  def edit_resource_url(*given_args); end
  def new_resource_path(*given_args); end
  def new_resource_url(*given_args); end
  def only_render_implemented_actions; end
  def resource_path(*given_args); end
  def resource_url(*given_args); end
  def self.__callbacks; end
  def self._helper_methods; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.actions(*actions_to_keep); end
  def self.active_admin_config; end
  def self.active_admin_config=(arg0); end
  def self.helpers_path; end
  def self.middleware_stack; end
  def self.parents_symbols; end
  def self.rescue_handlers; end
  def self.resource_class; end
  def self.resources_configuration; end
  include ActionDispatch::Routing::UrlFor
  include ActiveAdmin::BaseController::Authorization
  include ActiveAdmin::BaseController::Menu
  include Anonymous_Module_31
end
module Anonymous_Module_31
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
module ActiveAdmin::BaseController::Authorization
  def action_to_permission(action); end
  def active_admin_authorization; end
  def active_admin_authorization_adapter; end
  def authorize!(action, subject = nil); end
  def authorize_resource!(resource); end
  def authorized?(action, subject = nil); end
  def dispatch_active_admin_access_denied(exception); end
  def redirect_backwards_or_to_root; end
  def rescue_active_admin_access_denied(exception); end
  extend ActiveSupport::Concern
end
module ActiveAdmin::BaseController::Menu
  def current_menu; end
  def set_current_tab; end
  extend ActiveSupport::Concern
end
class ActiveAdmin::ResourceController < ActiveAdmin::BaseController
  def _collection_params(*given_args); end
  def _edit_resource_params(*given_args); end
  def _layout(formats); end
  def _new_resource_params(*given_args); end
  def _resource_params(*given_args); end
  def collection_path(*given_args); end
  def collection_url(*given_args); end
  def edit_resource_path(*given_args); end
  def edit_resource_url(*given_args); end
  def new_resource_path(*given_args); end
  def new_resource_url(*given_args); end
  def renderer_for(action); end
  def resource_path(*given_args); end
  def resource_url(*given_args); end
  def restrict_format_access!; end
  def run_build_callbacks(*args, &block); end
  def run_create_callbacks(*args, &block); end
  def run_destroy_callbacks(*args, &block); end
  def run_save_callbacks(*args, &block); end
  def run_update_callbacks(*args, &block); end
  def self.__callbacks; end
  def self._helper_methods; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.active_admin_config=(config); end
  def self.after_build(method = nil, &block); end
  def self.after_build_callbacks; end
  def self.after_create(method = nil, &block); end
  def self.after_create_callbacks; end
  def self.after_destroy(method = nil, &block); end
  def self.after_destroy_callbacks; end
  def self.after_save(method = nil, &block); end
  def self.after_save_callbacks; end
  def self.after_update(method = nil, &block); end
  def self.after_update_callbacks; end
  def self.before_build(method = nil, &block); end
  def self.before_build_callbacks; end
  def self.before_create(method = nil, &block); end
  def self.before_create_callbacks; end
  def self.before_destroy(method = nil, &block); end
  def self.before_destroy_callbacks; end
  def self.before_save(method = nil, &block); end
  def self.before_save_callbacks; end
  def self.before_update(method = nil, &block); end
  def self.before_update_callbacks; end
  def self.helpers_path; end
  def self.inherited(base); end
  def self.middleware_stack; end
  def self.mimes_for_respond_to; end
  def self.parents_symbols; end
  def self.resource_class; end
  def self.resources_configuration; end
  extend ActiveAdmin::Callbacks::ClassMethods
  extend ActiveAdmin::ResourceController::ActionBuilder::ClassMethods
  extend ActiveAdmin::ResourceController::ResourceClassMethods
  extend ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper::ClassMethods
  include ActionDispatch::Routing::UrlFor
  include ActiveAdmin::Callbacks
  include ActiveAdmin::ResourceController::ActionBuilder
  include ActiveAdmin::ResourceController::DataAccess
  include ActiveAdmin::ResourceController::Decorators
  include ActiveAdmin::ResourceController::PolymorphicRoutes
  include ActiveAdmin::ResourceController::Scoping
  include ActiveAdmin::ResourceController::Sidebars
  include ActiveAdmin::ResourceController::Streaming
  include ActiveAdmin::ScopeChain
  include ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  include Anonymous_Module_32
end
module Anonymous_Module_32
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
module ActiveAdmin::ResourceController::ActionBuilder
  extend ActiveSupport::Concern
end
module ActiveAdmin::ResourceController::ActionBuilder::ClassMethods
  def clear_collection_actions!; end
  def clear_member_actions!; end
  def remove_action_methods(actions_type); end
end
module ActiveAdmin::ResourceController::DataAccess
  def apply_authorization_scope(collection); end
  def apply_decorations(resource); end
  def apply_filtering(chain); end
  def apply_includes(chain); end
  def apply_pagination(chain); end
  def apply_scoping(chain); end
  def apply_sorting(chain); end
  def assign_attributes(resource, attributes); end
  def build_new_resource; end
  def build_resource; end
  def collection; end
  def collection_applies(options = nil); end
  def collection_before_scope; end
  def configured_per_page; end
  def create_another?; end
  def create_resource(object); end
  def current_scope; end
  def destroy_resource(object); end
  def dynamic_per_page; end
  def find_collection(options = nil); end
  def find_resource; end
  def per_page; end
  def resource; end
  def save_resource(object); end
  def scoped_collection; end
  def self.included(base); end
  def smart_resource_url; end
  def update_resource(object, attributes); end
end
module ActiveAdmin::ResourceController::Decorators
  def apply_collection_decorator(collection); end
  def apply_decorator(resource); end
  def collection_decorator; end
  def decorate?; end
  def decorator_class; end
  def self.undecorate(resource); end
end
class ActiveAdmin::ResourceController::Decorators::Wrapper
  def self.draper_collection_decorator; end
  def self.draper_collection_decorator?(decorator); end
  def self.find_collection_decorator(decorator); end
  def self.wrap!(parent, name); end
  def self.wrap(decorator); end
end
module ActiveAdmin::ResourceController::PolymorphicRoutes
  def map_named_resources_for(record_or_hash_or_array); end
  def polymorphic_path(record_or_hash_or_array, options = nil); end
  def polymorphic_url(record_or_hash_or_array, options = nil); end
  def to_named_resource(record); end
end
module ActiveAdmin::ResourceController::Scoping
  def begin_of_association_chain; end
  def method_for_association_chain; end
  extend ActiveSupport::Concern
end
module ActiveAdmin::ResourceController::Streaming
  def csv_filename; end
  def index; end
  def stream_csv; end
  def stream_resource(&block); end
end
module ActiveAdmin::ResourceController::Sidebars
  def skip_sidebar!; end
  def skip_sidebar?; end
end
module ActiveAdmin::ResourceController::ResourceClassMethods
  def override_resource_class_methods!; end
end
module ActiveAdmin::Callbacks
  def run_callback(method, *args); end
  extend ActiveSupport::Concern
end
module ActiveAdmin::Callbacks::ClassMethods
  def define_active_admin_callbacks(*names); end
end
class ActiveAdmin::BatchActions::BatchActionForm < ActiveAdmin::Component
  def build(options = nil, &block); end
  def closing_form_tag; end
  def prefix_html; end
  def to_s; end
end
class ActiveAdmin::BatchActions::ResourceSelectionToggleCell < ActiveAdmin::Component
  def build(label_text = nil); end
end
class ActiveAdmin::BatchActions::ResourceSelectionCell < ActiveAdmin::Component
  def build(resource); end
end
class ActiveAdmin::BatchActions::ResourceSelectionTogglePanel < ActiveAdmin::Component
  def build; end
end
class ActiveAdmin::BatchActions::BatchActionSelector < ActiveAdmin::Component
  def batch_actions_to_display; end
  def build(batch_actions); end
  def build_drop_down; end
  def to_s; end
end
class ActiveAdmin::MenuCollection
  def add(menu_name, menu_item_options = nil); end
  def before_build(&block); end
  def build_default_menu; end
  def build_menus!; end
  def built?; end
  def clear!; end
  def exists?(menu_name); end
  def fetch(menu_name); end
  def find_or_create(menu_name); end
  def initialize; end
  def menu(menu_name); end
  def on_build(&block); end
  def run_on_build_callbacks; end
end
class ActiveAdmin::Page
  def add_default_action_items; end
  def add_default_sidebar_sections; end
  def belongs_to(target, options = nil); end
  def belongs_to?; end
  def belongs_to_config; end
  def breadcrumb; end
  def breadcrumb=(arg0); end
  def camelized_resource_name; end
  def clear_page_actions!; end
  def controller_name; end
  def default_menu_options; end
  def name; end
  def namespace; end
  def namespace_name; end
  def order_clause; end
  def page_actions; end
  def plural_resource_label; end
  def resource_name; end
  def route_uncountable?; end
  def underscored_resource_name; end
  include ActiveAdmin::Page::Base
  include ActiveAdmin::Resource::ActionItems
  include ActiveAdmin::Resource::Controllers
  include ActiveAdmin::Resource::Menu
  include ActiveAdmin::Resource::Naming
  include ActiveAdmin::Resource::PagePresenters
  include ActiveAdmin::Resource::Routes
  include ActiveAdmin::Resource::Sidebars
end
module ActiveAdmin::Page::Base
  def initialize(namespace, name, options); end
end
class ActiveAdmin::PageController < ActiveAdmin::BaseController
  def _collection_params(*given_args); end
  def _edit_resource_params(*given_args); end
  def _layout(formats); end
  def _new_resource_params(*given_args); end
  def _resource_params(*given_args); end
  def authorize_access!; end
  def clear_page_actions!; end
  def collection_path(*given_args); end
  def collection_url(*given_args); end
  def edit_resource_path(*given_args); end
  def edit_resource_url(*given_args); end
  def index(options = nil, &block); end
  def new_resource_path(*given_args); end
  def new_resource_url(*given_args); end
  def resource_path(*given_args); end
  def resource_url(*given_args); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def self.parents_symbols; end
  def self.resource_class; end
  def self.resources_configuration; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_33
end
module Anonymous_Module_33
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_27
  extend Anonymous_Module_28
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_27
  include Anonymous_Module_28
end
class ActiveAdmin::PageDSL < ActiveAdmin::DSL
  def belongs_to(target, options = nil); end
  def content(options = nil, &block); end
  def page_action(name, options = nil, &block); end
end
class ActiveAdmin::PagePresenter
  def [](key); end
  def block; end
  def fetch(*args, &block); end
  def has_key?(*args, &block); end
  def initialize(options = nil, &block); end
  def options; end
end
module ActiveAdmin::Localizers
  def self.resource(active_admin_config); end
end
class ActiveAdmin::Localizers::ResourceLocalizer
  def array_to_key(*arr); end
  def initialize(model_name, model = nil); end
  def self.from_resource(resource_config); end
  def self.t(key, options); end
  def self.translate(key, options); end
  def t(key, options = nil); end
  def translate(key, options = nil); end
end
class ActiveAdmin::Scope
  def default_block; end
  def display_if_block; end
  def group; end
  def id; end
  def initialize(name, method = nil, options = nil, &block); end
  def name; end
  def scope_block; end
  def scope_method; end
  def show_count; end
end
class ActiveAdmin::ControllerAction
  def http_verb; end
  def initialize(name, options = nil); end
  def name; end
end
class ActiveAdmin::CSVBuilder
  def batch_size; end
  def build(controller, csv); end
  def build_row(resource, columns, options); end
  def column(name, options = nil, &block); end
  def column_transitive_options; end
  def columns; end
  def encode(content, options); end
  def exec_columns(view_context = nil); end
  def initialize(options = nil, &block); end
  def method_missing(method, *args, &block); end
  def options; end
  def paginated_collection(page_no = nil); end
  def self.default_for_resource(resource); end
  def view_context; end
end
class ActiveAdmin::CSVBuilder::Column
  def data; end
  def humanize_name(name, resource, humanize_name_option); end
  def initialize(name, resource = nil, options = nil, block = nil); end
  def name; end
  def options; end
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_34
end
class ActiveAdmin::Comment < ActiveRecord::Base
  def autosave_associated_records_for_author(*args); end
  def autosave_associated_records_for_resource(*args); end
  def belongs_to_counter_cache_after_update(reflection); end
  def counter_cache_target(reflection, model, foreign_key); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.find_for_resource_in_namespace(resource, namespace); end
  def self.page(num = nil); end
  def self.resource_type(resource); end
  def set_resource_type; end
  extend Kaminari::ConfigurationMethods::ClassMethods
  include ActiveAdmin::Comment::GeneratedAssociationMethods
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_34
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
end
module ActiveAdmin::Comment::GeneratedAssociationMethods
  def author; end
  def author=(value); end
  def reload_author; end
  def reload_resource; end
  def resource; end
  def resource=(value); end
end
class ActiveAdmin::Comment::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveAdmin::Comment::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
end
module ActiveAdmin::Comment::GeneratedRelationMethods
end
class ActiveAdmin::Comment::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveAdmin::Comment::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
end
class ActiveAdmin::Comment::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveAdmin::Comment::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
end
