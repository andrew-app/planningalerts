# This is an autogenerated file for dynamic methods in Application
# Please rerun bundle exec rake rails_rbi:models[Application] to regenerate.

# typed: strong
module Application::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Application::GeneratedAttributeMethods
  sig { returns(Integer) }
  def authority_id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def authority_id=(value); end

  sig { returns(T::Boolean) }
  def authority_id?; end

  sig { returns(String) }
  def council_reference; end

  sig { params(value: T.any(String, Symbol)).void }
  def council_reference=(value); end

  sig { returns(T::Boolean) }
  def council_reference?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(Integer)) }
  def no_alerted; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def no_alerted=(value); end

  sig { returns(T::Boolean) }
  def no_alerted?; end

  sig { returns(Integer) }
  def visible_comments_count; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def visible_comments_count=(value); end

  sig { returns(T::Boolean) }
  def visible_comments_count?; end
end

module Application::GeneratedAssociationMethods
  sig { returns(::Authority) }
  def authority; end

  sig { params(value: ::Authority).void }
  def authority=(value); end

  sig { returns(::Comment::ActiveRecord_Associations_CollectionProxy) }
  def comments; end

  sig { returns(T::Array[Integer]) }
  def comment_ids; end

  sig { params(value: T::Enumerable[::Comment]).void }
  def comments=(value); end

  sig { returns(T.nilable(::ApplicationVersion)) }
  def current_version; end

  sig { params(value: T.nilable(::ApplicationVersion)).void }
  def current_version=(value); end

  sig { returns(T.nilable(::ApplicationVersion)) }
  def first_version; end

  sig { params(value: T.nilable(::ApplicationVersion)).void }
  def first_version=(value); end

  sig { returns(::ApplicationVersion::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::ApplicationVersion]).void }
  def versions=(value); end
end

module Application::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Application]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Application]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Application]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Application)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Application) }
  def find_by_id!(id); end
end

class Application < ApplicationRecord
  include Application::GeneratedAttributeMethods
  include Application::GeneratedAssociationMethods
  extend Application::CustomFinderMethods
  extend Application::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Application::ActiveRecord_Relation, Application::ActiveRecord_Associations_CollectionProxy, Application::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.in_past_week(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.near(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.not_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.not_reverse_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.recent(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.with_current_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.with_first_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def self.within_bounding_box(*args); end
end

class Application::ActiveRecord_Relation < ActiveRecord::Relation
  include Application::ActiveRelation_WhereNot
  include Application::CustomFinderMethods
  include Application::QueryMethodsReturningRelation
  Elem = type_member(fixed: Application)

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def in_past_week(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def near(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def not_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def not_reverse_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def recent(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def with_current_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def with_first_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def within_bounding_box(*args); end
end

class Application::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Application::ActiveRelation_WhereNot
  include Application::CustomFinderMethods
  include Application::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Application)

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def in_past_week(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def near(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def not_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def not_reverse_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def recent(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def with_current_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def with_first_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def within_bounding_box(*args); end
end

class Application::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Application::CustomFinderMethods
  include Application::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Application)

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def in_past_week(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def near(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def not_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def not_reverse_geocoded(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def recent(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def with_current_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def with_first_version(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def within_bounding_box(*args); end

  sig { params(records: T.any(Application, T::Array[Application])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Application, T::Array[Application])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Application, T::Array[Application])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Application, T::Array[Application])).returns(T.self_type) }
  def concat(*records); end
end

module Application::QueryMethodsReturningRelation
  sig { returns(Application::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Application::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Application::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Application::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Application::QueryMethodsReturningAssociationRelation
  sig { returns(Application::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Application::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Application::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Application::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Application::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
