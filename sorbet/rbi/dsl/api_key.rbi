# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ApiKey`.
# Please instead update this file by running `bin/tapioca dsl ApiKey`.

# typed: true

class ApiKey
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def bulk; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def bulk=(value); end

    sig { returns(T::Boolean) }
    def bulk?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bulk_before_last_save; end

    sig { returns(T.untyped) }
    def bulk_before_type_cast; end

    sig { returns(T::Boolean) }
    def bulk_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bulk_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bulk_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def bulk_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bulk_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bulk_previous_change; end

    sig { returns(T::Boolean) }
    def bulk_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bulk_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def bulk_was; end

    sig { void }
    def bulk_will_change!; end

    sig { returns(T::Boolean) }
    def commercial; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def commercial=(value); end

    sig { returns(T::Boolean) }
    def commercial?; end

    sig { returns(T.nilable(T::Boolean)) }
    def commercial_before_last_save; end

    sig { returns(T.untyped) }
    def commercial_before_type_cast; end

    sig { returns(T::Boolean) }
    def commercial_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def commercial_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def commercial_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def commercial_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def commercial_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def commercial_previous_change; end

    sig { returns(T::Boolean) }
    def commercial_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def commercial_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def commercial_was; end

    sig { void }
    def commercial_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def daily_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def daily_limit=(value); end

    sig { returns(T::Boolean) }
    def daily_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def daily_limit_before_last_save; end

    sig { returns(T.untyped) }
    def daily_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def daily_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def daily_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def daily_limit_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def daily_limit_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def daily_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def daily_limit_previous_change; end

    sig { returns(T::Boolean) }
    def daily_limit_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def daily_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def daily_limit_was; end

    sig { void }
    def daily_limit_will_change!; end

    sig { returns(T::Boolean) }
    def disabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def disabled=(value); end

    sig { returns(T::Boolean) }
    def disabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def disabled_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_previous_change; end

    sig { returns(T::Boolean) }
    def disabled_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_was; end

    sig { void }
    def disabled_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { void }
    def restore_bulk!; end

    sig { void }
    def restore_commercial!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_daily_limit!; end

    sig { void }
    def restore_disabled!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_value!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_bulk; end

    sig { returns(T::Boolean) }
    def saved_change_to_bulk?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_commercial; end

    sig { returns(T::Boolean) }
    def saved_change_to_commercial?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_daily_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_daily_limit?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_disabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_value?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { returns(T::Boolean) }
    def user_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(::String) }
    def value; end

    sig { params(value: ::String).returns(::String) }
    def value=(value); end

    sig { returns(T::Boolean) }
    def value?; end

    sig { returns(T.nilable(::String)) }
    def value_before_last_save; end

    sig { returns(T.untyped) }
    def value_before_type_cast; end

    sig { returns(T::Boolean) }
    def value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def value_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_previous_change; end

    sig { returns(T::Boolean) }
    def value_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def value_was; end

    sig { void }
    def value_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bulk?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_commercial?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_daily_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_value?; end
  end
end
