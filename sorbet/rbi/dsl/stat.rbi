# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Stat`.
# Please instead update this file by running `bin/tapioca dsl Stat`.

# typed: true

class Stat
  include GeneratedAttributeMethods

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def key; end

    sig { params(value: ::String).returns(::String) }
    def key=(value); end

    sig { returns(T::Boolean) }
    def key?; end

    sig { returns(T.nilable(::String)) }
    def key_before_last_save; end

    sig { returns(T.untyped) }
    def key_before_type_cast; end

    sig { returns(T::Boolean) }
    def key_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def key_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def key_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def key_previous_change; end

    sig { returns(T::Boolean) }
    def key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def key_was; end

    sig { void }
    def key_will_change!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_key!; end

    sig { void }
    def restore_value!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_key?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_value?; end

    sig { returns(::Integer) }
    def value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def value=(value); end

    sig { returns(T::Boolean) }
    def value?; end

    sig { returns(T.nilable(::Integer)) }
    def value_before_last_save; end

    sig { returns(T.untyped) }
    def value_before_type_cast; end

    sig { returns(T::Boolean) }
    def value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def value_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def value_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def value_previous_change; end

    sig { returns(T::Boolean) }
    def value_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def value_was; end

    sig { void }
    def value_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_value?; end
  end
end
