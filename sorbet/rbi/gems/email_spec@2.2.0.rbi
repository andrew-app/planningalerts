# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `email_spec` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module EmailSpec
end

module EmailSpec::ARMailerDeliveries
  def all_emails; end
  def last_email_sent; end
  def mailbox_for(address); end
  def parse_to_mail(email); end
  def reset_mailer; end
end

class EmailSpec::AddressConverter
  include(::Singleton)
  extend(::Singleton::SingletonClassMethods)

  def conversion(&block); end
  def convert(input); end
  def converter; end
  def converter=(_arg0); end

  class << self
    def instance; end
  end
end

class EmailSpec::CouldNotFindEmailError < ::StandardError
end

module EmailSpec::Deliveries
  include(::EmailSpec::MailerDeliveries)

  def mailer; end
end

class EmailSpec::EmailViewer
  extend(::EmailSpec::MailerDeliveries)
  extend(::EmailSpec::Deliveries)

  class << self
    def open_in_browser(filename); end
    def open_in_text_editor(filename); end
    def save_and_open_all_html_emails; end
    def save_and_open_all_raw_emails; end
    def save_and_open_all_text_emails; end
    def save_and_open_email(mail); end
    def save_and_open_email_attachments_list(mail); end
    def tmp_email_filename(extension = T.unsafe(nil)); end
  end
end

module EmailSpec::Helpers
  include(::EmailSpec::MailerDeliveries)
  include(::EmailSpec::Deliveries)

  def click_email_link_matching(regex, email = T.unsafe(nil)); end
  def click_first_link_in_email(email = T.unsafe(nil)); end
  def current_email(address = T.unsafe(nil)); end
  def current_email_attachments(address = T.unsafe(nil)); end
  def find_email(address, opts = T.unsafe(nil)); end
  def links_in_email(email); end
  def open_email(address, opts = T.unsafe(nil)); end
  def open_email_for(address, opts = T.unsafe(nil)); end
  def open_last_email; end
  def open_last_email_for(address); end
  def read_emails_for(address); end
  def unread_emails_for(address); end
  def visit_in_email(link_text, address = T.unsafe(nil)); end

  private

  def convert_address(address); end
  def current_email_address; end
  def email_spec_deprecate(text); end
  def email_spec_hash; end
  def find_email!(address, opts = T.unsafe(nil)); end
  def last_email_address; end
  def mailbox_for(address); end
  def parse_email_count(amount); end
  def parse_email_for_anchor_text_link(email, link_text); end
  def parse_email_for_explicit_link(email, regex); end
  def parse_email_for_link(email, text_or_regex); end
  def request_uri(link); end
  def set_current_email(email); end
  def textify_images(email_body); end
end

EmailSpec::Helpers::A_TAG_BEGIN_REGEX = T.let(T.unsafe(nil), Regexp)

EmailSpec::Helpers::A_TAG_END_REGEX = T.let(T.unsafe(nil), Regexp)

module EmailSpec::MailExt
  def default_part; end
  def default_part_body; end
  def html; end
end

module EmailSpec::MailerDeliveries
  def all_emails; end
  def last_email_sent; end
  def mailbox_for(address); end
  def reset_mailer; end

  protected

  def deliveries; end
end

module EmailSpec::Matchers
  def bcc_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def be_delivered_from(email); end
  def be_delivered_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def cc_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def deliver_from(email); end
  def deliver_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def have_body_text(text); end
  def have_header(name, value); end
  def have_reply_to(email); end
  def have_subject(subject); end
  def include_email_with_subject(*emails); end
  def reply_to(email); end

  class << self
    def included(base); end
  end
end

class EmailSpec::Matchers::BccTo < ::EmailSpec::Matchers::EmailMatcher
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::CcTo < ::EmailSpec::Matchers::EmailMatcher
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::DeliverFrom < ::EmailSpec::Matchers::EmailMatcher
  def initialize(email); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::DeliverTo < ::EmailSpec::Matchers::EmailMatcher
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::EmailMatcher
  def address_array; end
end

class EmailSpec::Matchers::HaveBodyText
  def initialize(text); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::HaveHeader
  def initialize(name, value); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def mail_headers_hash(email_headers); end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::HaveSubject
  def initialize(subject); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::IncludeEmailWithSubject
  def initialize(subject); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(emails); end
  def negative_failure_message; end
end

class EmailSpec::Matchers::ReplyTo
  def initialize(email); end

  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(email); end
  def negative_failure_message; end
end

class EmailSpec::NoEmailAddressProvided < ::StandardError
end

class EmailSpec::TestObserver
  class << self
    def delivered_email(message); end
  end
end
