# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/counter_culture/all/counter_culture.rbi
#
# counter_culture-2.5.1

module CounterCulture
  def batch_size; end
  def batch_size=(obj); end
  def self.batch_size; end
  def self.batch_size=(obj); end
  def self.config; end
end
module CounterCulture::Extensions
  def _update_counts_after_create; end
  def _update_counts_after_destroy; end
  def _update_counts_after_update; end
  def destroyed_for_counter_culture?; end
  extend ActiveSupport::Concern
end
module CounterCulture::Extensions::ClassMethods
  def after_commit_counter_cache; end
  def counter_culture(relation, options = nil); end
  def counter_culture_fix_counts(options = nil); end
end
class CounterCulture::Counter
  def attribute_changed?(obj, attr); end
  def attribute_was(obj, attr); end
  def change_counter_cache(obj, options); end
  def column_names; end
  def counter_cache_name; end
  def counter_cache_name_for(obj); end
  def counter_delta_magnitude_for(obj); end
  def delta_column; end
  def delta_magnitude; end
  def first_level_relation_changed?(instance); end
  def first_level_relation_foreign_key; end
  def first_level_relation_foreign_type; end
  def foreign_key_value(obj, relation, was = nil); end
  def foreign_key_values; end
  def full_primary_key(klass); end
  def initialize(model, relation, options); end
  def model; end
  def polymorphic?; end
  def previous_model(obj); end
  def relation; end
  def relation_foreign_key(relation); end
  def relation_klass(relation, source: nil, was: nil); end
  def relation_primary_key(relation, source: nil, was: nil); end
  def relation_reflect(relation); end
  def touch; end
end
class CounterCulture::Reconciler
  def associated_model_class; end
  def associated_model_classes; end
  def changes; end
  def column_names(*args, &block); end
  def counter; end
  def counter_cache_name(*args, &block); end
  def delta_column(*args, &block); end
  def delta_magnitude(*args, &block); end
  def foreign_key_values(*args, &block); end
  def full_primary_key(*args, &block); end
  def initialize(counter, options = nil); end
  def model(*args, &block); end
  def options; end
  def polymorphic?(*args, &block); end
  def polymorphic_associated_model_classes; end
  def reconcile!; end
  def relation(*args, &block); end
  def relation_reflect(*args, &block); end
  def touch(*args, &block); end
end
class CounterCulture::Reconciler::Reconciliation
  def column_names(*args, &block); end
  def count_select; end
  def counter; end
  def counter_cache_name(*args, &block); end
  def delta_column(*args, &block); end
  def delta_magnitude(*args, &block); end
  def foreign_key_values(*args, &block); end
  def full_primary_key(*args, &block); end
  def initialize(counter, changes_holder, options, relation_class); end
  def join_clauses(where); end
  def log(message); end
  def log?; end
  def log_without_newline(message); end
  def model(*args, &block); end
  def options; end
  def parameterize(string); end
  def perform; end
  def polymorphic?(*args, &block); end
  def quote_table_name(table_name); end
  def relation(*args, &block); end
  def relation_class; end
  def relation_reflect(*args, &block); end
  def self_table_name; end
  def touch(*args, &block); end
  def track_change(record, column_name, count); end
  def update_count_for_batch(column_name, records); end
end
