# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `twitter` gem.
# Please instead update this file by running `bin/tapioca gem twitter`.

# typed: true

module Twitter; end

class Twitter::Arguments < ::Array
  def initialize(args); end

  def options; end
end

class Twitter::Base
  include ::Memoizable::InstanceMethods
  include ::Memoizable
  include ::Twitter::Utils
  extend ::Forwardable
  extend ::Memoizable::ModuleMethods

  def initialize(attrs = T.unsafe(nil)); end

  def [](method); end
  def attrs; end
  def to_h; end
  def to_hash; end

  private

  def attr_falsey_or_empty?(key); end
  def attrs_for_object(key1, key2 = T.unsafe(nil)); end

  class << self
    def attr_reader(*attrs); end
    def define_attribute_method(key1, klass = T.unsafe(nil), key2 = T.unsafe(nil)); end
    def define_predicate_method(key1, key2 = T.unsafe(nil)); end
    def define_uri_method(key1, key2); end
    def display_uri_attr_reader; end
    def object_attr_reader(klass, key1, key2 = T.unsafe(nil)); end
    def predicate_attr_reader(*attrs); end
    def uri_attr_reader(*attrs); end
  end
end

class Twitter::BasicUser < ::Twitter::Identity
  def following?(&block); end
  def screen_name(&block); end
  def screen_name?(&block); end
end

class Twitter::Client
  include ::Twitter::Utils

  def initialize(options = T.unsafe(nil)); end

  def access_token; end
  def access_token=(_arg0); end
  def access_token_secret; end
  def access_token_secret=(_arg0); end
  def consumer_key; end
  def consumer_key=(_arg0); end
  def consumer_secret; end
  def consumer_secret=(_arg0); end
  def credentials; end
  def credentials?; end
  def dev_environment; end
  def dev_environment=(_arg0); end
  def proxy; end
  def proxy=(_arg0); end
  def timeouts; end
  def timeouts=(_arg0); end
  def user_agent; end
  def user_agent=(_arg0); end
  def user_token?; end

  private

  def blank_string?(string); end
end

class Twitter::Configuration < ::Twitter::Base
  def characters_reserved_per_media(&block); end
  def characters_reserved_per_media?(&block); end
  def dm_text_character_limit(&block); end
  def dm_text_character_limit?(&block); end
  def max_media_per_upload(&block); end
  def max_media_per_upload?(&block); end
  def non_username_paths(&block); end
  def non_username_paths?(&block); end
  def photo_size_limit(&block); end
  def photo_size_limit?(&block); end
  def photo_sizes(&block); end
  def short_uri_length(&block); end
  def short_uri_length_https(&block); end
  def short_url_length(&block); end
  def short_url_length?(&block); end
  def short_url_length_https(&block); end
  def short_url_length_https?(&block); end
end

module Twitter::Creatable
  include ::Memoizable::InstanceMethods
  include ::Memoizable
  extend ::Memoizable::ModuleMethods
  include ::Memoizable

  mixes_in_class_methods ::Memoizable::ModuleMethods

  def created?(&block); end
  def created_at(&block); end
end

class Twitter::Cursor
  include ::Enumerable
  include ::Twitter::Enumerable
  include ::Twitter::Utils

  def initialize(key, klass, request, limit = T.unsafe(nil)); end

  def attrs; end
  def to_h; end
  def to_hash; end

  private

  def attrs=(attrs); end
  def fetch_next_page; end
  def last?; end
  def next; end
  def next_cursor; end
  def reached_limit?; end
end

class Twitter::DirectMessage < ::Twitter::Identity
  include ::Twitter::Creatable
  include ::Twitter::Entities

  def full_text(&block); end
  def recipient(&block); end
  def recipient?(&block); end
  def recipient_id(&block); end
  def recipient_id?(&block); end
  def sender(&block); end
  def sender?(&block); end
  def sender_id(&block); end
  def sender_id?(&block); end
  def text(&block); end
  def text?(&block); end
end

class Twitter::DirectMessageEvent < ::Twitter::Identity
  include ::Twitter::Creatable
  include ::Twitter::Entities

  def initialize(attrs); end

  def created_timestamp(&block); end
  def created_timestamp?(&block); end
  def direct_message(&block); end
  def direct_message?(&block); end

  private

  def build_direct_message(attrs, text); end
  def read_from_response(attrs); end
end

module Twitter::DirectMessages; end

class Twitter::DirectMessages::WelcomeMessage < ::Twitter::Identity
  include ::Twitter::Creatable
  include ::Twitter::Entities

  def full_text(&block); end
  def name(&block); end
  def name?(&block); end
  def text(&block); end
  def text?(&block); end
end

class Twitter::DirectMessages::WelcomeMessageRule < ::Twitter::Identity
  include ::Twitter::Creatable

  def welcome_message_id(&block); end
  def welcome_message_id?(&block); end
end

class Twitter::DirectMessages::WelcomeMessageRuleWrapper < ::Twitter::Identity
  def initialize(attrs); end

  def created_timestamp(&block); end
  def created_timestamp?(&block); end
  def welcome_message_rule(&block); end
  def welcome_message_rule?(&block); end

  private

  def build_welcome_message_rule(attrs); end
  def read_from_response(attrs); end
end

class Twitter::DirectMessages::WelcomeMessageWrapper < ::Twitter::Identity
  def initialize(attrs); end

  def created_timestamp(&block); end
  def created_timestamp?(&block); end
  def welcome_message(&block); end
  def welcome_message?(&block); end

  private

  def build_welcome_message(attrs, text); end
  def read_from_response(attrs); end
end

module Twitter::Entities
  include ::Memoizable::InstanceMethods
  include ::Memoizable
  extend ::Memoizable::ModuleMethods
  include ::Memoizable

  mixes_in_class_methods ::Memoizable::ModuleMethods

  def entities?(&block); end
  def hashtags(&block); end
  def hashtags?(&block); end
  def media(&block); end
  def media?(&block); end
  def symbols(&block); end
  def symbols?(&block); end
  def uris(&block); end
  def uris?; end
  def urls(&block); end
  def urls?; end
  def user_mentions(&block); end
  def user_mentions?(&block); end

  private

  def entities(klass, key2, key1 = T.unsafe(nil)); end
end

class Twitter::Entity < ::Twitter::Base
  def indices(&block); end
  def indices?(&block); end
end

class Twitter::Entity::Hashtag < ::Twitter::Entity
  def text(&block); end
  def text?(&block); end
end

class Twitter::Entity::Symbol < ::Twitter::Entity
  def text(&block); end
  def text?(&block); end
end

class Twitter::Entity::URI < ::Twitter::Entity
  def display_uri(&block); end
  def display_uri?(&block); end
  def display_url(&block); end
  def display_url?(&block); end
  def expanded_uri(&block); end
  def expanded_uri?(&block); end
  def expanded_url(&block); end
  def expanded_url?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
end

class Twitter::Entity::UserMention < ::Twitter::Entity
  def id(&block); end
  def id?(&block); end
  def name(&block); end
  def name?(&block); end
  def screen_name(&block); end
  def screen_name?(&block); end
end

module Twitter::Enumerable
  include ::Enumerable

  def each(start = T.unsafe(nil), &block); end

  private

  def finished?; end
  def last?; end
  def reached_limit?; end
end

class Twitter::Error < ::StandardError
  extend ::Twitter::Utils

  def initialize(message = T.unsafe(nil), rate_limit = T.unsafe(nil), code = T.unsafe(nil)); end

  def code; end
  def rate_limit; end

  class << self
    def from_processing_response(error, headers); end
    def from_response(body, headers); end

    private

    def extract_message_from_errors(body); end
    def parse_error(body); end
  end
end

class Twitter::Error::AlreadyFavorited < ::Twitter::Error::Forbidden; end
class Twitter::Error::AlreadyRetweeted < ::Twitter::Error::Forbidden; end
class Twitter::Error::BadGateway < ::Twitter::Error::ServerError; end
class Twitter::Error::BadRequest < ::Twitter::Error::ClientError; end
class Twitter::Error::ClientError < ::Twitter::Error; end
module Twitter::Error::Code; end
Twitter::Error::Code::ALREADY_FAVORITED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::AUTHENTICATION_PROBLEM = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::BAD_AUTHENTICATION_DATA = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::CANNOT_MUTE = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::CANNOT_UNMUTE = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::CANNOT_WRITE = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::DEPRECATED_CALL = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::DUPLICATE_STATUS = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::ENDPOINT_RETIRED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::FOLLOW_ALREADY_REQUESTED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::FOLLOW_LIMIT_EXCEEDED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::INTERNAL_ERROR = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::INVALID_OR_EXPIRED_TOKEN = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::LOGIN_VERIFICATION_NEEDED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::OAUTH_TIMESTAMP_OUT_OF_RANGE = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::OVER_CAPACITY = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::OVER_UPDATE_LIMIT = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::PROTECTED_STATUS = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::RATE_LIMIT_EXCEEDED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::RESOURCE_NOT_FOUND = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::SPAM = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::SSL_REQUIRED = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::SUSPENDED_ACCOUNT = T.let(T.unsafe(nil), Integer)
Twitter::Error::Code::UNABLE_TO_VERIFY_CREDENTIALS = T.let(T.unsafe(nil), Integer)
class Twitter::Error::DuplicateStatus < ::Twitter::Error::Forbidden; end
Twitter::Error::ERRORS = T.let(T.unsafe(nil), Hash)
Twitter::Error::FORBIDDEN_MESSAGES = T.let(T.unsafe(nil), Proc)
class Twitter::Error::Forbidden < ::Twitter::Error::ClientError; end
class Twitter::Error::GatewayTimeout < ::Twitter::Error::ServerError; end
class Twitter::Error::InternalServerError < ::Twitter::Error::ServerError; end
class Twitter::Error::InvalidMedia < ::Twitter::Error::MediaError; end
Twitter::Error::MEDIA_ERRORS = T.let(T.unsafe(nil), Hash)
class Twitter::Error::MediaError < ::Twitter::Error; end
class Twitter::Error::MediaInternalError < ::Twitter::Error::MediaError; end
class Twitter::Error::NotAcceptable < ::Twitter::Error::ClientError; end
class Twitter::Error::NotFound < ::Twitter::Error::ClientError; end
class Twitter::Error::RequestEntityTooLarge < ::Twitter::Error::ClientError; end
class Twitter::Error::ServerError < ::Twitter::Error; end
class Twitter::Error::ServiceUnavailable < ::Twitter::Error::ServerError; end
class Twitter::Error::TimeoutError < ::Twitter::Error; end
class Twitter::Error::TooManyRequests < ::Twitter::Error::ClientError; end
class Twitter::Error::Unauthorized < ::Twitter::Error::ClientError; end
class Twitter::Error::UnprocessableEntity < ::Twitter::Error::ClientError; end
class Twitter::Error::UnsupportedMedia < ::Twitter::Error::MediaError; end

class Twitter::Factory
  class << self
    def new(method, klass, attrs = T.unsafe(nil)); end
  end
end

class Twitter::Geo < ::Twitter::Base
  include ::Equalizer::Methods

  def coordinates(&block); end
  def coordinates?(&block); end
  def coords(&block); end
end

class Twitter::Geo::Point < ::Twitter::Geo
  def lat; end
  def latitude; end
  def lng; end
  def long; end
  def longitude; end
end

class Twitter::Geo::Polygon < ::Twitter::Geo; end

class Twitter::GeoFactory < ::Twitter::Factory
  class << self
    def new(attrs = T.unsafe(nil)); end
  end
end

class Twitter::GeoResults
  include ::Enumerable
  include ::Twitter::Enumerable
  include ::Twitter::Utils

  def initialize(attrs = T.unsafe(nil)); end

  def attrs; end
  def to_h; end
  def to_hash; end
  def token; end
end

class Twitter::Headers
  def initialize(client, request_method, url, options = T.unsafe(nil)); end

  def bearer_token_request?; end
  def oauth_auth_header; end
  def request_headers; end

  private

  def auth_header; end
  def bearer_auth_header; end
  def bearer_token_credentials_auth_header; end
end

class Twitter::Identity < ::Twitter::Base
  include ::Equalizer::Methods

  def initialize(attrs = T.unsafe(nil)); end

  def id(&block); end
  def id?(&block); end
end

class Twitter::Language < ::Twitter::Base
  def code(&block); end
  def code?(&block); end
  def name(&block); end
  def name?(&block); end
  def status(&block); end
  def status?(&block); end
end

class Twitter::List < ::Twitter::Identity
  include ::Twitter::Creatable

  def description(&block); end
  def description?(&block); end
  def following?(&block); end
  def full_name(&block); end
  def full_name?(&block); end
  def member_count(&block); end
  def member_count?(&block); end
  def members_uri(&block); end
  def members_url(&block); end
  def mode(&block); end
  def mode?(&block); end
  def name(&block); end
  def name?(&block); end
  def slug(&block); end
  def slug?(&block); end
  def subscriber_count(&block); end
  def subscriber_count?(&block); end
  def subscribers_uri(&block); end
  def subscribers_url(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def user(&block); end
  def user?(&block); end
end

module Twitter::Media; end
class Twitter::Media::AnimatedGif < ::Twitter::Media::Video; end

class Twitter::Media::Photo < ::Twitter::Identity
  def display_uri(&block); end
  def display_uri?(&block); end
  def display_url(&block); end
  def display_url?(&block); end
  def expanded_uri(&block); end
  def expanded_uri?(&block); end
  def expanded_url(&block); end
  def expanded_url?(&block); end
  def indices(&block); end
  def indices?(&block); end
  def media_uri(&block); end
  def media_uri?(&block); end
  def media_uri_https(&block); end
  def media_uri_https?(&block); end
  def media_url(&block); end
  def media_url?(&block); end
  def media_url_https(&block); end
  def media_url_https?(&block); end
  def sizes(&block); end
  def type(&block); end
  def type?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
end

class Twitter::Media::Video < ::Twitter::Identity
  def display_uri(&block); end
  def display_uri?(&block); end
  def display_url(&block); end
  def display_url?(&block); end
  def expanded_uri(&block); end
  def expanded_uri?(&block); end
  def expanded_url(&block); end
  def expanded_url?(&block); end
  def indices(&block); end
  def indices?(&block); end
  def media_uri(&block); end
  def media_uri?(&block); end
  def media_uri_https(&block); end
  def media_uri_https?(&block); end
  def media_url(&block); end
  def media_url?(&block); end
  def media_url_https(&block); end
  def media_url_https?(&block); end
  def sizes(&block); end
  def type(&block); end
  def type?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
  def video_info(&block); end
end

class Twitter::Media::VideoInfo < ::Twitter::Base
  def aspect_ratio(&block); end
  def aspect_ratio?(&block); end
  def duration_millis(&block); end
  def duration_millis?(&block); end
  def variants(&block); end
end

class Twitter::MediaFactory < ::Twitter::Factory
  class << self
    def new(attrs = T.unsafe(nil)); end
  end
end

class Twitter::Metadata < ::Twitter::Base
  def iso_language_code(&block); end
  def iso_language_code?(&block); end
  def result_type(&block); end
  def result_type?(&block); end
end

class Twitter::NullObject < ::Naught::BasicObject
  include ::Naught::Conversions
  include ::Naught::NullObjectTag
  include ::Twitter::NullObject::GeneratedMethods
  include ::Comparable
  include ::Twitter::NullObject::Customizations

  def class; end

  class << self
    def get(*_arg0); end
  end
end

Twitter::NullObject::Conversions = Naught::Conversions

module Twitter::NullObject::Customizations
  include ::Comparable

  def !; end
  def <=>(other); end
  def as_json(*_arg0); end
  def blank?; end
  def instance_of?(klass); end
  def is_a?(mod); end
  def kind_of?(mod); end
  def nil?; end
  def presence; end
  def present?; end
  def respond_to?(*_arg0); end
  def to_json(*args); end
end

module Twitter::NullObject::GeneratedMethods
  extend ::Forwardable

  def initialize(*_arg0); end

  def inspect; end
  def method_missing(method_name, *args, &block); end
  def respond_to?(*_arg0); end
  def to_a(*args, &block); end
  def to_ary; end
  def to_c(*args, &block); end
  def to_f(*args, &block); end
  def to_h(*args, &block); end
  def to_hash; end
  def to_i(*args, &block); end
  def to_int; end
  def to_r(*args, &block); end
  def to_s(*args, &block); end
  def to_str; end
end

class Twitter::OEmbed < ::Twitter::Base
  def author_name(&block); end
  def author_name?(&block); end
  def author_uri(&block); end
  def author_uri?(&block); end
  def author_url(&block); end
  def author_url?(&block); end
  def cache_age(&block); end
  def cache_age?(&block); end
  def height(&block); end
  def height?(&block); end
  def html(&block); end
  def html?(&block); end
  def provider_name(&block); end
  def provider_name?(&block); end
  def provider_uri(&block); end
  def provider_uri?(&block); end
  def provider_url(&block); end
  def provider_url?(&block); end
  def type(&block); end
  def type?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
  def version(&block); end
  def version?(&block); end
  def width(&block); end
  def width?(&block); end
end

class Twitter::Place < ::Twitter::Identity
  def initialize(attrs = T.unsafe(nil)); end

  def attributes(&block); end
  def attributes?(&block); end
  def bounding_box(&block); end
  def bounding_box?(&block); end
  def contained?(&block); end
  def contained_within(&block); end
  def contained_within?(&block); end
  def country(&block); end
  def country?(&block); end
  def country_code(&block); end
  def full_name(&block); end
  def full_name?(&block); end
  def name(&block); end
  def name?(&block); end
  def parent_id(&block); end
  def place_type(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
  def woe_id(&block); end
  def woeid(&block); end
end

class Twitter::PremiumSearchResults
  include ::Enumerable
  include ::Twitter::Enumerable
  include ::Twitter::Utils

  def initialize(request, request_config = T.unsafe(nil)); end

  def attrs; end
  def to_h; end
  def to_hash; end

  private

  def attrs=(attrs); end
  def fetch_next_page; end
  def last?; end
  def next_page; end
  def next_page?; end
end

module Twitter::Profile
  include ::Memoizable::InstanceMethods
  include ::Memoizable
  extend ::Memoizable::ModuleMethods
  include ::Memoizable

  mixes_in_class_methods ::Memoizable::ModuleMethods

  def profile_banner_uri(size = T.unsafe(nil)); end
  def profile_banner_uri?(&block); end
  def profile_banner_uri_https(size = T.unsafe(nil)); end
  def profile_banner_uri_https?(&block); end
  def profile_banner_url(size = T.unsafe(nil)); end
  def profile_banner_url?(&block); end
  def profile_banner_url_https(size = T.unsafe(nil)); end
  def profile_banner_url_https?(&block); end
  def profile_image_uri(size = T.unsafe(nil)); end
  def profile_image_uri?(&block); end
  def profile_image_uri_https(size = T.unsafe(nil)); end
  def profile_image_uri_https?(&block); end
  def profile_image_url(size = T.unsafe(nil)); end
  def profile_image_url?(&block); end
  def profile_image_url_https(size = T.unsafe(nil)); end
  def profile_image_url_https?(&block); end

  private

  def insecure_uri(uri); end
  def parse_uri(uri); end
  def profile_image_suffix(size); end

  class << self
    private

    def alias_method_sub(method, pattern, replacement); end
    def alias_predicate_uri_methods(method); end
  end
end

Twitter::Profile::PREDICATE_URI_METHOD_REGEX = T.let(T.unsafe(nil), Regexp)
Twitter::Profile::PROFILE_IMAGE_SUFFIX_REGEX = T.let(T.unsafe(nil), Regexp)

class Twitter::ProfileBanner < ::Twitter::Base
  def sizes(&block); end
end

module Twitter::REST; end

module Twitter::REST::API
  include ::Twitter::REST::UploadUtils
  include ::Twitter::Utils
  include ::Twitter::REST::Utils
  include ::Twitter::REST::AccountActivity
  include ::Twitter::REST::DirectMessages
  include ::Twitter::REST::DirectMessages::WelcomeMessages
  include ::Twitter::REST::Favorites
  include ::Twitter::REST::FriendsAndFollowers
  include ::Twitter::REST::Help
  include ::Twitter::REST::Lists
  include ::Twitter::REST::OAuth
  include ::Twitter::REST::PlacesAndGeo
  include ::Twitter::REST::PremiumSearch
  include ::Twitter::REST::SavedSearches
  include ::Twitter::REST::Search
  include ::Twitter::REST::SpamReporting
  include ::Twitter::REST::SuggestedUsers
  include ::Twitter::REST::Timelines
  include ::Twitter::REST::Trends
  include ::Twitter::REST::Tweets
  include ::Twitter::REST::Undocumented
  include ::Twitter::REST::Users
end

module Twitter::REST::AccountActivity
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def check_subscription(env_name); end
  def create_subscription(env_name); end
  def create_webhook(env_name, url); end
  def deactivate_subscription(env_name); end
  def delete_webhook(env_name, webhook_id); end
  def list_webhooks(env_name); end
  def trigger_crc_check(env_name, webhook_id); end
end

class Twitter::REST::Client < ::Twitter::Client
  include ::Twitter::REST::UploadUtils
  include ::Twitter::REST::Utils
  include ::Twitter::REST::AccountActivity
  include ::Twitter::REST::DirectMessages
  include ::Twitter::REST::DirectMessages::WelcomeMessages
  include ::Twitter::REST::Favorites
  include ::Twitter::REST::FriendsAndFollowers
  include ::Twitter::REST::Help
  include ::Twitter::REST::Lists
  include ::Twitter::REST::OAuth
  include ::Twitter::REST::PlacesAndGeo
  include ::Twitter::REST::PremiumSearch
  include ::Twitter::REST::SavedSearches
  include ::Twitter::REST::Search
  include ::Twitter::REST::SpamReporting
  include ::Twitter::REST::SuggestedUsers
  include ::Twitter::REST::Timelines
  include ::Twitter::REST::Trends
  include ::Twitter::REST::Tweets
  include ::Twitter::REST::Undocumented
  include ::Twitter::REST::Users
  include ::Twitter::REST::API

  def bearer_token; end
  def bearer_token=(_arg0); end
  def bearer_token?; end
  def credentials?; end
end

module Twitter::REST::DirectMessages
  include ::Twitter::REST::UploadUtils
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def create_direct_message(user_id, text, options = T.unsafe(nil)); end
  def create_direct_message_event(*args); end
  def create_direct_message_event_with_media(user, text, media, options = T.unsafe(nil)); end
  def d(user_id, text, options = T.unsafe(nil)); end
  def destroy_direct_message(*ids); end
  def direct_message(id, options = T.unsafe(nil)); end
  def direct_message_event(id, options = T.unsafe(nil)); end
  def direct_messages(*args); end
  def direct_messages_events(options = T.unsafe(nil)); end
  def direct_messages_list(options = T.unsafe(nil)); end
  def direct_messages_received(options = T.unsafe(nil)); end
  def direct_messages_sent(options = T.unsafe(nil)); end
  def dm(user_id, text, options = T.unsafe(nil)); end
  def m(user_id, text, options = T.unsafe(nil)); end

  private

  def format_json_options(user_id, text, options); end
end

module Twitter::REST::DirectMessages::WelcomeMessages
  include ::Twitter::REST::UploadUtils
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def create_welcome_message(text, name = T.unsafe(nil), options = T.unsafe(nil)); end
  def create_welcome_message_rule(welcome_message_id, options = T.unsafe(nil)); end
  def destroy_welcome_message(*ids); end
  def destroy_welcome_message_rule(*ids); end
  def update_welcome_message(welcome_message_id, text, options = T.unsafe(nil)); end
  def welcome_message(id, options = T.unsafe(nil)); end
  def welcome_message_list(options = T.unsafe(nil)); end
  def welcome_message_rule(id, options = T.unsafe(nil)); end
  def welcome_message_rule_list(options = T.unsafe(nil)); end
end

module Twitter::REST::Favorites
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def create_favorite!(*args); end
  def destroy_favorite(*args); end
  def fav(*args); end
  def fav!(*args); end
  def fave(*args); end
  def fave!(*args); end
  def favorite(*args); end
  def favorite!(*args); end
  def favorites(*args); end
  def unfavorite(*args); end
  def unfavorite!(*args); end
end

module Twitter::REST::FriendsAndFollowers
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def create_friendship(*args); end
  def create_friendship!(*args); end
  def destroy_friendship(*args); end
  def follow(*args); end
  def follow!(*args); end
  def follower_ids(*args); end
  def followers(*args); end
  def following(*args); end
  def friend_ids(*args); end
  def friends(*args); end
  def friendship(source, target, options = T.unsafe(nil)); end
  def friendship?(source, target, options = T.unsafe(nil)); end
  def friendship_show(source, target, options = T.unsafe(nil)); end
  def friendship_update(user, options = T.unsafe(nil)); end
  def friendships(*args); end
  def friendships_incoming(options = T.unsafe(nil)); end
  def friendships_outgoing(options = T.unsafe(nil)); end
  def no_retweet_ids(options = T.unsafe(nil)); end
  def no_retweets_ids(options = T.unsafe(nil)); end
  def relationship(source, target, options = T.unsafe(nil)); end
  def unfollow(*args); end
end

module Twitter::REST::Help
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def configuration(options = T.unsafe(nil)); end
  def languages(options = T.unsafe(nil)); end
  def privacy(options = T.unsafe(nil)); end
  def tos(options = T.unsafe(nil)); end
end

module Twitter::REST::Lists
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def add_list_member(*args); end
  def add_list_members(*args); end
  def create_list(name, options = T.unsafe(nil)); end
  def destroy_list(*args); end
  def list(*args); end
  def list_member?(*args); end
  def list_members(*args); end
  def list_subscribe(*args); end
  def list_subscriber?(*args); end
  def list_subscribers(*args); end
  def list_timeline(*args); end
  def list_unsubscribe(*args); end
  def list_update(*args); end
  def lists(*args); end
  def lists_subscribed_to(*args); end
  def memberships(*args); end
  def owned_lists(*args); end
  def remove_list_member(*args); end
  def remove_list_members(*args); end
  def subscriptions(*args); end

  private

  def cursor_from_response_with_list(path, args); end
  def list_from_response(request_method, path, args); end
  def list_from_response_with_user(path, args); end
  def list_from_response_with_users(path, args); end
  def list_user?(request_method, path, args); end
  def merge_list!(hash, list); end
  def merge_list_and_owner!(hash, list); end
  def merge_owner!(hash, user); end
  def merge_slug_and_owner!(hash, path); end
end

Twitter::REST::Lists::MAX_USERS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

module Twitter::REST::OAuth
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def bearer_token(options = T.unsafe(nil)); end
  def invalidate_token(access_token, options = T.unsafe(nil)); end
  def reverse_token; end
  def token(options = T.unsafe(nil)); end
end

module Twitter::REST::PlacesAndGeo
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def geo_search(options = T.unsafe(nil)); end
  def place(place_id, options = T.unsafe(nil)); end
  def places_nearby(options = T.unsafe(nil)); end
  def places_similar(options = T.unsafe(nil)); end
  def reverse_geocode(options = T.unsafe(nil)); end
  def similar_places(options = T.unsafe(nil)); end
end

module Twitter::REST::PremiumSearch
  def premium_search(query, options = T.unsafe(nil), request_config = T.unsafe(nil)); end
end

Twitter::REST::PremiumSearch::MAX_TWEETS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

class Twitter::REST::Request
  include ::Twitter::Utils

  def initialize(client, request_method, path, options = T.unsafe(nil), params = T.unsafe(nil)); end

  def client; end
  def client=(_arg0); end
  def headers; end
  def headers=(_arg0); end
  def options; end
  def options=(_arg0); end
  def path; end
  def path=(_arg0); end
  def perform; end
  def rate_limit; end
  def rate_limit=(_arg0); end
  def request_method; end
  def request_method=(_arg0); end
  def uri; end
  def uri=(_arg0); end
  def verb; end

  private

  def content_type(basename); end
  def error(code, body, headers); end
  def fail_or_return_response_body(code, body, headers); end
  def forbidden_error(body, headers); end
  def http_client; end
  def merge_multipart_file!(options); end
  def proxy; end
  def request_options; end
  def set_multipart_options!(request_method, options); end
  def symbolize_keys!(object); end
  def timeout_keys_defined; end
end

Twitter::REST::Request::BASE_URL = T.let(T.unsafe(nil), String)

module Twitter::REST::SavedSearches
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def create_saved_search(query, options = T.unsafe(nil)); end
  def destroy_saved_search(*args); end
  def saved_search(id, options = T.unsafe(nil)); end
  def saved_searches(*args); end
end

module Twitter::REST::Search
  def search(query, options = T.unsafe(nil)); end
end

Twitter::REST::Search::MAX_TWEETS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

module Twitter::REST::SpamReporting
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def report_spam(*args); end
end

module Twitter::REST::SuggestedUsers
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def suggest_users(slug, options = T.unsafe(nil)); end
  def suggestions(*args); end
end

module Twitter::REST::Timelines
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def home_timeline(options = T.unsafe(nil)); end
  def mentions(options = T.unsafe(nil)); end
  def mentions_timeline(options = T.unsafe(nil)); end
  def retweeted_by(user, options = T.unsafe(nil)); end
  def retweeted_by_me(options = T.unsafe(nil)); end
  def retweeted_by_user(user, options = T.unsafe(nil)); end
  def retweeted_to_me(options = T.unsafe(nil)); end
  def retweets_of_me(options = T.unsafe(nil)); end
  def user_timeline(*args); end

  private

  def collect_with_count(count); end
  def collect_with_max_id(collection = T.unsafe(nil), max_id = T.unsafe(nil), &block); end
  def retweets_from_timeline(options); end
  def select_retweets(tweets); end
end

Twitter::REST::Timelines::DEFAULT_TWEETS_PER_REQUEST = T.let(T.unsafe(nil), Integer)
Twitter::REST::Timelines::MAX_TWEETS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

module Twitter::REST::Trends
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def local_trends(id = T.unsafe(nil), options = T.unsafe(nil)); end
  def trend_locations(options = T.unsafe(nil)); end
  def trends(id = T.unsafe(nil), options = T.unsafe(nil)); end
  def trends_available(options = T.unsafe(nil)); end
  def trends_closest(options = T.unsafe(nil)); end
  def trends_place(id = T.unsafe(nil), options = T.unsafe(nil)); end
end

module Twitter::REST::Tweets
  include ::Twitter::REST::UploadUtils
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def destroy_status(*args); end
  def destroy_tweet(*args); end
  def oembed(tweet, options = T.unsafe(nil)); end
  def oembeds(*args); end
  def retweet(*args); end
  def retweet!(*args); end
  def retweeters_ids(*args); end
  def retweeters_of(tweet, options = T.unsafe(nil)); end
  def retweets(tweet, options = T.unsafe(nil)); end
  def status(tweet, options = T.unsafe(nil)); end
  def statuses(*args); end
  def unretweet(*args); end
  def update(status, options = T.unsafe(nil)); end
  def update!(status, options = T.unsafe(nil)); end
  def update_with_media(status, media, options = T.unsafe(nil)); end

  private

  def array_wrap(object); end
  def post_retweet(tweet, options); end
  def post_unretweet(tweet, options); end
end

Twitter::REST::Tweets::MAX_TWEETS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

module Twitter::REST::Undocumented
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def following_followers_of(*args); end
  def tweet_count(url, options = T.unsafe(nil)); end
end

module Twitter::REST::UploadUtils
  private

  def append_media(media, media_id); end
  def chunk_upload(media, media_type, media_category); end
  def finalize_media(media_id); end
  def upload(media, media_category_prefix: T.unsafe(nil)); end
end

module Twitter::REST::Users
  include ::Twitter::Utils
  include ::Twitter::REST::Utils

  def block(*args); end
  def block?(user, options = T.unsafe(nil)); end
  def blocked(options = T.unsafe(nil)); end
  def blocked_ids(*args); end
  def contributees(*args); end
  def contributors(*args); end
  def mute(*args); end
  def muted(options = T.unsafe(nil)); end
  def muted_ids(*args); end
  def profile_banner(*args); end
  def remove_profile_banner(options = T.unsafe(nil)); end
  def settings(options = T.unsafe(nil)); end
  def unblock(*args); end
  def unmute(*args); end
  def update_delivery_device(device, options = T.unsafe(nil)); end
  def update_profile(options = T.unsafe(nil)); end
  def update_profile_background_image(image, options = T.unsafe(nil)); end
  def update_profile_banner(banner, options = T.unsafe(nil)); end
  def update_profile_image(image, options = T.unsafe(nil)); end
  def user(*args); end
  def user?(user, options = T.unsafe(nil)); end
  def user_search(query, options = T.unsafe(nil)); end
  def users(*args); end
  def verify_credentials(options = T.unsafe(nil)); end

  private

  def post_profile_image(path, image, options); end
end

Twitter::REST::Users::MAX_USERS_PER_REQUEST = T.let(T.unsafe(nil), Integer)

module Twitter::REST::Utils
  include ::Twitter::Utils

  private

  def collect_users(users); end
  def cursor_from_response_with_user(collection_name, klass, path, args); end
  def extract_id(object); end
  def merge_default_cursor!(options); end
  def merge_user(hash, user, prefix = T.unsafe(nil)); end
  def merge_user!(hash, user, prefix = T.unsafe(nil)); end
  def merge_users(hash, users); end
  def merge_users!(hash, users); end
  def objects_from_response_with_user(klass, request_method, path, args); end
  def parallel_objects_from_response(klass, request_method, path, args); end
  def parallel_users_from_response(request_method, path, args); end
  def perform_get(path, options = T.unsafe(nil)); end
  def perform_get_with_cursor(path, options, collection_name, klass = T.unsafe(nil)); end
  def perform_get_with_object(path, options, klass); end
  def perform_get_with_objects(path, options, klass); end
  def perform_post(path, options = T.unsafe(nil)); end
  def perform_post_with_object(path, options, klass); end
  def perform_post_with_objects(path, options, klass); end
  def perform_request(request_method, path, options = T.unsafe(nil), params = T.unsafe(nil)); end
  def perform_request_with_object(request_method, path, options, klass, params = T.unsafe(nil)); end
  def perform_request_with_objects(request_method, path, options, klass); end
  def perform_requests(request_method, path, ids); end
  def set_compound_key(key, value, hash, prefix = T.unsafe(nil)); end
  def user_id; end
  def user_id?; end
  def users_from_response(request_method, path, args); end
end

Twitter::REST::Utils::DEFAULT_CURSOR = T.let(T.unsafe(nil), Integer)

class Twitter::RateLimit < ::Twitter::Base
  def limit(&block); end
  def remaining(&block); end
  def reset_at(&block); end
  def reset_in; end
  def retry_after; end
end

class Twitter::Relationship < ::Twitter::Base
  def initialize(attrs = T.unsafe(nil)); end

  def source(&block); end
  def source?(&block); end
  def target(&block); end
  def target?(&block); end
end

class Twitter::SavedSearch < ::Twitter::Identity
  include ::Twitter::Creatable

  def name(&block); end
  def name?(&block); end
  def position(&block); end
  def position?(&block); end
  def query(&block); end
  def query?(&block); end
end

class Twitter::SearchResults
  include ::Enumerable
  include ::Twitter::Enumerable
  include ::Twitter::Utils

  def initialize(request); end

  def attrs; end
  def rate_limit; end
  def to_h; end
  def to_hash; end

  private

  def attrs=(attrs); end
  def fetch_next_page; end
  def last?; end
  def next_page; end
  def next_page?; end
  def query_string_to_hash(query_string); end
end

class Twitter::Settings < ::Twitter::Base
  def allow_contributor_request?(&block); end
  def allow_dm_groups_from?(&block); end
  def allow_dms_from?(&block); end
  def always_use_https?(&block); end
  def discoverable_by_email?(&block); end
  def discoverable_by_mobile_phone?(&block); end
  def display_sensitive_media?(&block); end
  def geo_enabled?(&block); end
  def language(&block); end
  def language?(&block); end
  def protected?(&block); end
  def screen_name(&block); end
  def screen_name?(&block); end
  def show_all_inline_media?(&block); end
  def sleep_time(&block); end
  def sleep_time?(&block); end
  def time_zone(&block); end
  def time_zone?(&block); end
  def trend_location(&block); end
  def trend_location?(&block); end
  def use_cookie_personalization?(&block); end
end

class Twitter::Size < ::Twitter::Base
  include ::Equalizer::Methods

  def h(&block); end
  def h?(&block); end
  def height(&block); end
  def resize(&block); end
  def resize?(&block); end
  def w(&block); end
  def w?(&block); end
  def width(&block); end
end

class Twitter::SourceUser < ::Twitter::BasicUser
  def all_replies?(&block); end
  def blocking?(&block); end
  def can_dm?(&block); end
  def followed_by?(&block); end
  def marked_spam?(&block); end
  def muting?(&block); end
  def notifications_enabled?(&block); end
  def want_retweets?(&block); end
end

module Twitter::Streaming; end

class Twitter::Streaming::Client < ::Twitter::Client
  def initialize(options = T.unsafe(nil)); end

  def before_request(&block); end
  def close; end
  def connection=(_arg0); end
  def filter(options = T.unsafe(nil), &block); end
  def firehose(options = T.unsafe(nil), &block); end
  def sample(options = T.unsafe(nil), &block); end
  def site(*args, &block); end
  def user(options = T.unsafe(nil), &block); end

  private

  def collect_user_ids(users); end
  def request(method, uri, params); end
  def to_url_params(params); end
end

class Twitter::Streaming::Connection
  def initialize(options = T.unsafe(nil)); end

  def close; end
  def connect(request); end
  def ssl_socket_class; end
  def stream(request, response); end
  def tcp_socket_class; end

  private

  def new_tcp_socket(host, port); end
end

class Twitter::Streaming::DeletedTweet < ::Twitter::Identity
  def user_id(&block); end
  def user_id?(&block); end
end

class Twitter::Streaming::Event
  def initialize(data); end

  def name; end
  def source; end
  def target; end
  def target_object; end

  private

  def target_object_factory(event_name, data); end
end

Twitter::Streaming::Event::LIST_EVENTS = T.let(T.unsafe(nil), Array)
Twitter::Streaming::Event::TWEET_EVENTS = T.let(T.unsafe(nil), Array)
class Twitter::Streaming::FriendList < ::Array; end

class Twitter::Streaming::MessageParser
  class << self
    def parse(data); end
  end
end

class Twitter::Streaming::Response
  def initialize(&block); end

  def <<(data); end
  def on_body(data); end
  def on_headers_complete(_headers); end
end

class Twitter::Streaming::StallWarning < ::Twitter::Base
  def code(&block); end
  def code?(&block); end
  def message(&block); end
  def message?(&block); end
  def percent_full(&block); end
  def percent_full?(&block); end
end

class Twitter::Suggestion < ::Twitter::Base
  include ::Equalizer::Methods

  def name(&block); end
  def name?(&block); end
  def size(&block); end
  def size?(&block); end
  def slug(&block); end
  def slug?(&block); end
  def users(&block); end
end

class Twitter::TargetUser < ::Twitter::BasicUser
  def followed_by?(&block); end
end

class Twitter::Trend < ::Twitter::Base
  include ::Equalizer::Methods

  def events(&block); end
  def events?(&block); end
  def name(&block); end
  def name?(&block); end
  def promoted_content?(&block); end
  def query(&block); end
  def query?(&block); end
  def tweet_volume(&block); end
  def tweet_volume?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
end

class Twitter::TrendResults
  include ::Memoizable::InstanceMethods
  include ::Memoizable
  include ::Twitter::Creatable
  include ::Enumerable
  include ::Twitter::Enumerable
  include ::Twitter::Utils
  extend ::Memoizable::ModuleMethods

  def initialize(attrs = T.unsafe(nil)); end

  def as_of(&block); end
  def as_of?(&block); end
  def attrs; end
  def location(&block); end
  def location?(&block); end
  def to_h; end
  def to_hash; end
end

class Twitter::Tweet < ::Twitter::Identity
  include ::Twitter::Creatable
  include ::Twitter::Entities

  def initialize(attrs = T.unsafe(nil)); end

  def current_user_retweet(&block); end
  def current_user_retweet?(&block); end
  def favorite_count(&block); end
  def favorite_count?(&block); end
  def favorited?(&block); end
  def filter_level(&block); end
  def filter_level?(&block); end
  def full_text(&block); end
  def geo(&block); end
  def geo?(&block); end
  def in_reply_to_screen_name(&block); end
  def in_reply_to_screen_name?(&block); end
  def in_reply_to_status_id(&block); end
  def in_reply_to_status_id?(&block); end
  def in_reply_to_tweet_id(&block); end
  def in_reply_to_user_id(&block); end
  def in_reply_to_user_id?(&block); end
  def lang(&block); end
  def lang?(&block); end
  def metadata(&block); end
  def metadata?(&block); end
  def place(&block); end
  def place?(&block); end
  def possibly_sensitive?(&block); end
  def quote?(&block); end
  def quote_count(&block); end
  def quote_count?(&block); end
  def quoted_status(&block); end
  def quoted_status?(&block); end
  def quoted_tweet(&block); end
  def quoted_tweet?(&block); end
  def reply?(&block); end
  def reply_count(&block); end
  def reply_count?(&block); end
  def retweet?(&block); end
  def retweet_count(&block); end
  def retweet_count?(&block); end
  def retweeted?(&block); end
  def retweeted_status(&block); end
  def retweeted_status?(&block); end
  def retweeted_tweet(&block); end
  def retweeted_tweet?(&block); end
  def source(&block); end
  def source?(&block); end
  def text(&block); end
  def text?(&block); end
  def truncated?(&block); end
  def uri(&block); end
  def url(&block); end
  def user(&block); end
  def user?(&block); end
end

class Twitter::User < ::Twitter::BasicUser
  include ::Twitter::Creatable
  include ::Twitter::Profile

  def connections(&block); end
  def connections?(&block); end
  def contributors_enabled?(&block); end
  def default_profile?(&block); end
  def default_profile_image?(&block); end
  def description(&block); end
  def description?(&block); end
  def description_uris(&block); end
  def description_uris?(&block); end
  def description_urls(&block); end
  def description_urls?(&block); end
  def email(&block); end
  def email?(&block); end
  def entities?(&block); end
  def favorites_count(&block); end
  def favourites_count(&block); end
  def favourites_count?(&block); end
  def follow_request_sent?(&block); end
  def followers_count(&block); end
  def followers_count?(&block); end
  def friends_count(&block); end
  def friends_count?(&block); end
  def geo_enabled?(&block); end
  def lang(&block); end
  def lang?(&block); end
  def listed_count(&block); end
  def listed_count?(&block); end
  def location(&block); end
  def location?(&block); end
  def muting?(&block); end
  def name(&block); end
  def name?(&block); end
  def needs_phone_verification?(&block); end
  def notifications?(&block); end
  def profile_background_color(&block); end
  def profile_background_color?(&block); end
  def profile_background_image_uri(&block); end
  def profile_background_image_uri?(&block); end
  def profile_background_image_uri_https(&block); end
  def profile_background_image_uri_https?(&block); end
  def profile_background_image_url(&block); end
  def profile_background_image_url?(&block); end
  def profile_background_image_url_https(&block); end
  def profile_background_image_url_https?(&block); end
  def profile_background_tile?(&block); end
  def profile_link_color(&block); end
  def profile_link_color?(&block); end
  def profile_sidebar_border_color(&block); end
  def profile_sidebar_border_color?(&block); end
  def profile_sidebar_fill_color(&block); end
  def profile_sidebar_fill_color?(&block); end
  def profile_text_color(&block); end
  def profile_text_color?(&block); end
  def profile_use_background_image?(&block); end
  def protected?(&block); end
  def status(&block); end
  def status?(&block); end
  def statuses_count(&block); end
  def statuses_count?(&block); end
  def suspended?(&block); end
  def time_zone(&block); end
  def time_zone?(&block); end
  def translation_enabled?(&block); end
  def translator?(&block); end
  def tweet(&block); end
  def tweet?(&block); end
  def tweeted?(&block); end
  def tweets_count(&block); end
  def uri(&block); end
  def url(&block); end
  def utc_offset(&block); end
  def utc_offset?(&block); end
  def verified?(&block); end
  def website(&block); end
  def website?(&block); end
  def website_uris(&block); end
  def website_uris?(&block); end
  def website_urls(&block); end
  def website_urls?(&block); end

  class << self
    private

    def define_entity_uris_method(key1, key2); end
    def define_entity_uris_methods(key1, key2); end
    def define_entity_uris_predicate_method(key1); end
  end
end

module Twitter::Utils
  private

  def flat_pmap(enumerable, &block); end
  def pmap(enumerable); end

  class << self
    def flat_pmap(enumerable, &block); end
    def pmap(enumerable); end
  end
end

class Twitter::Variant < ::Twitter::Base
  def bitrate(&block); end
  def bitrate?(&block); end
  def content_type(&block); end
  def content_type?(&block); end
  def uri(&block); end
  def uri?(&block); end
  def url(&block); end
  def url?(&block); end
end

module Twitter::Version
  private

  def major; end
  def minor; end
  def patch; end
  def pre; end
  def to_a; end
  def to_h; end
  def to_s; end

  class << self
    def major; end
    def minor; end
    def patch; end
    def pre; end
    def to_a; end
    def to_h; end
    def to_s; end
  end
end
