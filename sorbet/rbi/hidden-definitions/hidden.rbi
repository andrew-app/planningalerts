# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class ATDIS::Feed
  VALID_OPTIONS = ::T.let(nil, ::T.untyped)
end

module AbstractController::Collector
  def geojson(*args, &block); end
end

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::WebSocket
  def alive?(); end

  def close(); end

  def initialize(env, event_target, event_loop, protocols: T.unsafe(nil)); end

  def possible?(); end

  def protocol(); end

  def rack_response(); end

  def transmit(data); end

  def websocket(); end
end

class ActionCable::Connection::WebSocket
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::SubscriptionAdapter
end

class ActionCable::SubscriptionAdapter::Base
  def broadcast(channel, payload); end

  def initialize(server); end

  def logger(); end

  def server(); end

  def shutdown(); end

  def subscribe(channel, message_callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, message_callback); end
end

class ActionCable::SubscriptionAdapter::Base
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  def broadcast(channel, payload); end

  def subscribe(channel, callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, callback); end
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
end

class ActionCable::SubscriptionAdapter::SubscriberMap
  def add_channel(channel, on_success); end

  def add_subscriber(channel, subscriber, on_success); end

  def broadcast(channel, message); end

  def invoke_callback(callback, message); end

  def remove_channel(channel); end

  def remove_subscriber(channel, subscriber); end
end

class ActionCable::SubscriptionAdapter::SubscriberMap
end

module ActionCable::SubscriptionAdapter
  extend ::ActiveSupport::Autoload
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionController::ImplicitRender
  include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  include ::ThemesOnRails::ControllerAdditions
  def _helper_methods(); end

  def _helper_methods=(val); end

  def _helper_methods?(); end

  def _helpers(); end

  def _helpers=(val); end

  def _helpers?(); end

  def helpers_path(); end

  def helpers_path=(val); end

  def helpers_path?(); end

  def include_all_helpers(); end

  def include_all_helpers=(val); end

  def include_all_helpers?(); end
end

class ActionController::API
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(val); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._helpers=(val); end

  def self._helpers?(); end

  def self.helpers_path(); end

  def self.helpers_path=(val); end

  def self.helpers_path?(); end

  def self.include_all_helpers(); end

  def self.include_all_helpers=(val); end

  def self.include_all_helpers?(); end
end

class ActionController::Base
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
  include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  include ::ThemesOnRails::ControllerAdditions
end

class ActionController::Base
  extend ::ActionController::Railties::Helpers
  extend ::WillPaginate::Railtie::ControllerRescuePatch
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::ForceSSL
  ACTION_OPTIONS = ::T.let(nil, ::T.untyped)
  REDIRECT_OPTIONS = ::T.let(nil, ::T.untyped)
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Live::SSE
  WHITELISTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
  def exist_fragment?(event); end

  def expire_fragment(event); end

  def expire_page(event); end

  def halted_callback(event); end

  def process_action(event); end

  def read_fragment(event); end

  def redirect_to(event); end

  def send_data(event); end

  def send_file(event); end

  def start_processing(event); end

  def unpermitted_parameters(event); end

  def write_fragment(event); end

  def write_page(event); end
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::Metal
  include ::ActionController::Testing::Functional
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionController::TemplateAssertions
  def assert_template(options=T.unsafe(nil), message=T.unsafe(nil)); end
end

module ActionController::TemplateAssertions
end

class ActionController::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  def _controller_class(); end

  def _controller_class=(val); end

  def _controller_class?(); end
end

module ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def build_response(klass); end

  def controller_class_name(); end

  def delete(action, **args); end

  def generated_path(generated_extras); end

  def get(action, **args); end

  def head(action, **args); end

  def patch(action, **args); end

  def post(action, **args); end

  def process(action, method: T.unsafe(nil), params: T.unsafe(nil), session: T.unsafe(nil), body: T.unsafe(nil), flash: T.unsafe(nil), format: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def put(action, **args); end

  def query_parameter_names(generated_extras); end

  def request(); end

  def response(); end

  def setup_controller_request_and_response(); end
end

module ActionController::TestCase::Behavior::ClassMethods
  def controller_class(); end

  def controller_class=(new_class); end

  def determine_default_controller_class(name); end

  def tests(controller_class); end
end

module ActionController::TestCase::Behavior::ClassMethods
end

module ActionController::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

class ActionController::TestCase
  extend ::ActionController::TestCase::Behavior::ClassMethods
  def self._controller_class(); end

  def self._controller_class=(val); end

  def self._controller_class?(); end
end

module ActionController::Testing
end

module ActionController::Testing::Functional
  def recycle!(); end
end

module ActionController::Testing::Functional
end

module ActionController::Testing
  extend ::ActiveSupport::Concern
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  def html_document(); end
end

module ActionDispatch::Assertions::ResponseAssertions
  def assert_redirected_to(options=T.unsafe(nil), message=T.unsafe(nil)); end

  def assert_response(type, message=T.unsafe(nil)); end
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Assertions::ResponseAssertions
end

module ActionDispatch::Assertions::RoutingAssertions
  def assert_generates(expected_path, options, defaults=T.unsafe(nil), extras=T.unsafe(nil), message=T.unsafe(nil)); end

  def assert_recognizes(expected_options, path, extras=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_routing(path, options, defaults=T.unsafe(nil), extras=T.unsafe(nil), message=T.unsafe(nil)); end

  def method_missing(selector, *args, &block); end

  def with_routing(); end
end

module ActionDispatch::Assertions::RoutingAssertions
end

module ActionDispatch::Assertions
  extend ::ActiveSupport::Concern
end

class ActionDispatch::ContentSecurityPolicy::Middleware
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SECRET_TOKEN = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  DOMAIN_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Cookies::SerializedCookieJars
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

class ActionDispatch::DebugExceptions
  include ::Honeybadger::Plugins::Rails::ExceptionsCatcher
  RESCUES_TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::ExceptionWrapper
  include ::WillPaginate::Railtie::ShowExceptionsPatch
  def status_code_without_paginate(); end
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Http::ParameterFilter
  FILTERED = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration
end

module ActionDispatch::Integration::RequestHelpers
  def delete(path, **args); end

  def follow_redirect!(); end

  def get(path, **args); end

  def head(path, *args); end

  def patch(path, **args); end

  def post(path, **args); end

  def put(path, **args); end
end

module ActionDispatch::Integration::RequestHelpers
end

module ActionDispatch::Integration::Runner
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  def app(); end

  def assigns(*args); end

  def before_setup(); end

  def cookies(*args); end

  def copy_session_variables!(); end

  def create_session(app); end

  def default_url_options(); end

  def default_url_options=(options); end

  def delete(*args); end

  def follow_redirect!(*args); end

  def get(*args); end

  def head(*args); end

  def initialize(*args, &blk); end

  def integration_session(); end

  def open_session(); end

  def patch(*args); end

  def post(*args); end

  def put(*args); end

  def remove!(); end

  def reset!(); end
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
end

class ActionDispatch::Integration::Session
  include ::Minitest::Assertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def accept(); end

  def accept=(accept); end

  def body(*args, &block); end

  def controller(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def headers(*args, &block); end

  def host(); end

  def host!(_); end

  def host=(host); end

  def https!(flag=T.unsafe(nil)); end

  def https?(); end

  def initialize(app); end

  def path(*args, &block); end

  def process(method, path, params: T.unsafe(nil), headers: T.unsafe(nil), env: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def redirect?(*args, &block); end

  def remote_addr(); end

  def remote_addr=(remote_addr); end

  def request(); end

  def request_count(); end

  def request_count=(request_count); end

  def reset!(); end

  def response(); end

  def status(*args, &block); end

  def status_message(*args, &block); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

module ActionDispatch::Integration
end

class ActionDispatch::IntegrationTest
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::IntegrationTest::UrlOptions
  include ::ActionMailer::TestCase::ClearTestDeliveries
end

module ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionController::TemplateAssertions
  def app(); end

  def document_root_element(); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
  def app(); end

  def app=(app); end

  def register_encoder(*args); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

module ActionDispatch::IntegrationTest::Behavior
  extend ::ActiveSupport::Concern
end

module ActionDispatch::IntegrationTest::UrlOptions
  def url_options(); end
end

module ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActiveSupport::Concern
end

class ActionDispatch::IntegrationTest
  extend ::ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Formatter::RegexCaseComparator
  DEFAULT_INPUT = ::T.let(nil, ::T.untyped)
  DEFAULT_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::MiddlewareStack::Middleware
  def build_with_new_relic(app); end

  def build_without_new_relic(app); end
end

class ActionDispatch::PublicExceptions
  def call(env); end

  def initialize(public_path); end

  def public_path(); end

  def public_path=(public_path); end
end

class ActionDispatch::PublicExceptions
end

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request::Session
  ENV_SESSION_KEY = ::T.let(nil, ::T.untyped)
  ENV_SESSION_OPTIONS_KEY = ::T.let(nil, ::T.untyped)
  Unspecified = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RequestId
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet
  include ::Devise::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet::Generator
  PARAMETERIZE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def main_app(); end
end

class ActionDispatch::Routing::RouteWrapper
  include ::Sprockets::Rails::RouteWrapper
  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end
end

class ActionDispatch::Routing::RouteWrapper
  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

class ActionDispatch::Session::MemCacheStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::MemCacheStore
end

class ActionDispatch::ShowExceptions
  FAILSAFE_RESPONSE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SystemTestCase
  include ::Capybara::DSL
  include ::Capybara::Minitest::Assertions
  include ::ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  include ::ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  include ::ActionDispatch::SystemTesting::TestHelpers::UndefMethods
end

class ActionDispatch::SystemTestCase
  def self.driven_by(driver, using: T.unsafe(nil), screen_size: T.unsafe(nil), options: T.unsafe(nil)); end

  def self.driver(); end

  def self.driver=(val); end

  def self.driver?(); end

  def self.start_application(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  def take_failed_screenshot(); end

  def take_screenshot(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end

  def host!(host); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
end

module ActionDispatch::SystemTesting::TestHelpers::UndefMethods
  METHODS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::SystemTesting::TestHelpers::UndefMethods
  extend ::ActiveSupport::Concern
end

module ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def assigns(key=T.unsafe(nil)); end

  def cookies(); end

  def flash(); end

  def redirect_to_url(); end

  def session(); end
end

module ActionDispatch::TestProcess::FixtureFile
  def fixture_file_upload(path, mime_type=T.unsafe(nil), binary=T.unsafe(nil)); end
end

module ActionDispatch::TestProcess::FixtureFile
end

module ActionDispatch::TestProcess
end

class ActionDispatch::TestRequest
  def accept=(mime_types); end

  def action=(action_name); end

  def host=(host); end

  def if_modified_since=(last_modified); end

  def if_none_match=(etag); end

  def path=(path); end

  def port=(number); end

  def remote_addr=(addr); end

  def request_method=(method); end

  def request_uri=(uri); end

  def user_agent=(user_agent); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestRequest
  def self.create(env=T.unsafe(nil)); end
end

class ActionDispatch::TestResponse
  def error?(); end

  def initialize(*_); end

  def missing?(); end

  def parsed_body(); end

  def success?(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

class ActionMailer::Base
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::LogSubscriber
  def deliver(event); end

  def process(event); end

  def receive(event); end
end

class ActionMailer::NonInferrableMailerError
  def initialize(name); end
end

class ActionMailer::NonInferrableMailerError
end

class ActionMailer::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def _mailer_class(); end

  def _mailer_class=(val); end

  def _mailer_class?(); end
end

module ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::DomAssertions
end

module ActionMailer::TestCase::Behavior::ClassMethods
  def determine_default_mailer(name); end

  def mailer_class(); end

  def tests(mailer); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
end

module ActionMailer::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

module ActionMailer::TestCase::ClearTestDeliveries
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::ActiveSupport::Concern
end

class ActionMailer::TestCase
  extend ::ActionMailer::TestCase::Behavior::ClassMethods
  def self._mailer_class(); end

  def self._mailer_class=(val); end

  def self._mailer_class?(); end
end

module ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  def assert_emails(number); end

  def assert_enqueued_email_with(mailer, method, args: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_emails(number, &block); end

  def assert_no_emails(&block); end

  def assert_no_enqueued_emails(&block); end
end

module ActionMailer::TestHelper
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Base
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ERB::Util
  include ::ActionCable::Helpers::ActionCableHelper
  include ::Formtastic::Helpers::FormHelper
  include ::Devise::Controllers::UrlHelpers
  include ::Sprockets::Rails::Helper
  include ::Sprockets::Rails::Utils
  include ::Haml::Helpers::ActionViewMods
  def assets_environment(); end

  def assets_environment=(val); end

  def assets_environment?(); end

  def assets_manifest(); end

  def assets_manifest=(val); end

  def assets_manifest?(); end

  def assets_precompile(); end

  def assets_precompile=(val); end

  def assets_precompile?(); end

  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end

  def check_precompiled_asset(); end

  def check_precompiled_asset=(val); end

  def check_precompiled_asset?(); end

  def debug_assets(); end

  def debug_assets=(val); end

  def debug_assets?(); end

  def digest_assets(); end

  def digest_assets=(val); end

  def digest_assets?(); end

  def precompiled_asset_checker(); end

  def precompiled_asset_checker=(val); end

  def precompiled_asset_checker?(); end

  def resolve_assets_with(); end

  def resolve_assets_with=(val); end

  def resolve_assets_with?(); end

  def unknown_asset_fallback(); end

  def unknown_asset_fallback=(val); end

  def unknown_asset_fallback?(); end
end

class ActionView::Base
  def self.assets_environment(); end

  def self.assets_environment=(val); end

  def self.assets_environment?(); end

  def self.assets_manifest(); end

  def self.assets_manifest=(val); end

  def self.assets_manifest?(); end

  def self.assets_precompile(); end

  def self.assets_precompile=(val); end

  def self.assets_precompile?(); end

  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end

  def self.check_precompiled_asset(); end

  def self.check_precompiled_asset=(val); end

  def self.check_precompiled_asset?(); end

  def self.debug_assets(); end

  def self.debug_assets=(val); end

  def self.debug_assets?(); end

  def self.digest_assets(); end

  def self.digest_assets=(val); end

  def self.digest_assets?(); end

  def self.precompiled_asset_checker(); end

  def self.precompiled_asset_checker=(val); end

  def self.precompiled_asset_checker?(); end

  def self.resolve_assets_with(); end

  def self.resolve_assets_with=(val); end

  def self.resolve_assets_with?(); end

  def self.unknown_asset_fallback(); end

  def self.unknown_asset_fallback=(val); end

  def self.unknown_asset_fallback?(); end
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  DEFAULT_PRESERVE_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TextHelper
  AUTO_EMAIL_LOCAL_RE = ::T.let(nil, ::T.untyped)
  AUTO_EMAIL_RE = ::T.let(nil, ::T.untyped)
  AUTO_LINK_CRE = ::T.let(nil, ::T.untyped)
  AUTO_LINK_RE = ::T.let(nil, ::T.untyped)
  BRACKETS = ::T.let(nil, ::T.untyped)
  WORD_PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
  include ::Kaminari::ActionViewExtension::LogSubscriberSilencer
  def render_collection(event); end

  def render_template(event); end
  EMPTY = ::T.let(nil, ::T.untyped)
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

class ActionView::OutputBuffer
  def append=(value); end

  def initialize(*_); end

  def safe_append=(value); end

  def safe_expr_append=(val); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

class ActionView::PartialRenderer
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::PathResolver
  DEFAULT_PATTERN = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class ActionView::Resolver::Cache
  KEY_BLOCK = ::T.let(nil, ::T.untyped)
  NAME_BLOCK = ::T.let(nil, ::T.untyped)
  NO_TEMPLATES = ::T.let(nil, ::T.untyped)
  PARTIAL_BLOCK = ::T.let(nil, ::T.untyped)
  PREFIX_BLOCK = ::T.let(nil, ::T.untyped)
end

module ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def default_url_options=(obj); end
end

module ActionView::RoutingUrlFor
  def self.default_url_options=(obj); end
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::Template
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::HTML
  def formats(); end

  def identifier(); end

  def initialize(string, type=T.unsafe(nil)); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::HTML
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Text
  def formats(); end

  def identifier(); end

  def initialize(string); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::Text
end

class ActionView::Template::Types::Type
  SET = ::T.let(nil, ::T.untyped)
end

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::AbstractController::Helpers
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RecordTagHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _helper_methods(); end

  def _helper_methods=(val); end

  def _helper_methods?(); end

  def _helpers(); end

  def _helpers=(val); end

  def _helpers?(); end

  def debug_missing_translation(); end

  def debug_missing_translation=(obj); end
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def config(); end

  def controller(); end

  def controller=(controller); end

  def lookup_context(*args, &block); end

  def output_buffer(); end

  def output_buffer=(output_buffer); end

  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil), &block); end

  def rendered(); end

  def rendered=(rendered); end

  def rendered_views(); end

  def setup_with_controller(); end
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end

  def helper_class(); end

  def helper_class=(helper_class); end

  def helper_method(*methods); end

  def new(*_); end

  def tests(helper_class); end
end

module ActionView::TestCase::Behavior::ClassMethods
end

module ActionView::TestCase::Behavior::Locals
  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil)); end

  def rendered_views(); end

  def rendered_views=(rendered_views); end
end

module ActionView::TestCase::Behavior::Locals
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def add(view, locals); end

  def locals_for(view); end

  def rendered_views(); end

  def view_rendered?(view, expected_locals); end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
end

module ActionView::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

class ActionView::TestCase::TestController
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def controller_path=(path); end

  def initialize(); end

  def params=(params); end
end

class ActionView::TestCase::TestController
  def self.controller_path=(controller_path); end
end

class ActionView::TestCase
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionView::TestCase::Behavior::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(val); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._helpers=(val); end

  def self._helpers?(); end

  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(obj); end
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin
  DEFAULT_MENU = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::Application
  AfterLoadEvent = ::T.let(nil, ::T.untyped)
  BeforeLoadEvent = ::T.let(nil, ::T.untyped)
end

ActiveAdmin::Auth = ActiveAdmin::Authorization

module ActiveAdmin::Authorization
  CREATE = ::T.let(nil, ::T.untyped)
  DESTROY = ::T.let(nil, ::T.untyped)
  READ = ::T.let(nil, ::T.untyped)
  UPDATE = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::BaseController
  ACTIVE_ADMIN_ACTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::BaseController::Authorization
  ACTIONS_DICTIONARY = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::BatchAction
  DEFAULT_CONFIRM_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::BatchActions::Controller
  COLLECTION_APPLIES = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::CSVBuilder
  COLUMN_TRANSITIVE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::CSVBuilder::Column
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::CanCanAdapter
  def cancan_ability(); end
end

class ActiveAdmin::CanCanAdapter
end

module ActiveAdmin::Dependency
end

class ActiveAdmin::Dependency::Matcher
  include ::Comparable
  def initialize(name); end

  def match!(*reqs); end

  def match?(*reqs); end

  def name(); end

  def spec(); end

  def spec!(); end
end

class ActiveAdmin::Dependency::Matcher
end

module ActiveAdmin::Dependency::Requirements
  DEVISE = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Dependency::Requirements
end

module ActiveAdmin::Dependency
  def self.[](name); end

  def self.method_missing(name, *args); end

  def self.supports_zeitwerk?(); end
end

module ActiveAdmin::Deprecation
end

module ActiveAdmin::Deprecation
  def self.warn(message, callstack=T.unsafe(nil)); end
end

module ActiveAdmin::Devise
end

class ActiveAdmin::Devise::ConfirmationsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::ConfirmationsController
end

module ActiveAdmin::Devise::Controller
  def root_path(); end
end

module ActiveAdmin::Devise::Controller
  extend ::ActiveSupport::Concern
end

class ActiveAdmin::Devise::PasswordsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::PasswordsController
end

class ActiveAdmin::Devise::RegistrationsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::RegistrationsController
end

class ActiveAdmin::Devise::SessionsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::SessionsController
end

class ActiveAdmin::Devise::UnlocksController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::UnlocksController
end

module ActiveAdmin::Devise
  def self.config(); end

  def self.controllers(); end

  def self.controllers_for_filters(); end
end

module ActiveAdmin::Helpers::I18n
  PLURAL_MANY_COUNT = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Helpers::Routes::UrlHelpers
  def _routes(); end

  def about_path(*args); end

  def about_url(*args); end

  def address_applications_path(*args); end

  def address_applications_url(*args); end

  def admin_admin_comment_path(*args); end

  def admin_admin_comment_url(*args); end

  def admin_admin_comments_path(*args); end

  def admin_admin_comments_url(*args); end

  def admin_alert_path(*args); end

  def admin_alert_url(*args); end

  def admin_alerts_path(*args); end

  def admin_alerts_url(*args); end

  def admin_api_usage_path(*args); end

  def admin_api_usage_url(*args); end

  def admin_application_path(*args); end

  def admin_application_url(*args); end

  def admin_applications_path(*args); end

  def admin_applications_url(*args); end

  def admin_authorities_path(*args); end

  def admin_authorities_url(*args); end

  def admin_authority_path(*args); end

  def admin_authority_url(*args); end

  def admin_background_jobs_path(*args); end

  def admin_background_jobs_url(*args); end

  def admin_comment_path(*args); end

  def admin_comment_url(*args); end

  def admin_comments_path(*args); end

  def admin_comments_url(*args); end

  def admin_dashboard_path(*args); end

  def admin_dashboard_url(*args); end

  def admin_report_path(*args); end

  def admin_report_url(*args); end

  def admin_reports_path(*args); end

  def admin_reports_url(*args); end

  def admin_root_path(*args); end

  def admin_root_url(*args); end

  def admin_site_settings_path(*args); end

  def admin_site_settings_url(*args); end

  def admin_user_path(*args); end

  def admin_user_url(*args); end

  def admin_users_path(*args); end

  def admin_users_url(*args); end

  def alerts_path(*args); end

  def alerts_url(*args); end

  def api_howto_path(*args); end

  def api_howto_url(*args); end

  def api_path(*args); end

  def api_url(*args); end

  def application_add_comments_path(*args); end

  def application_add_comments_url(*args); end

  def application_comment_path(*args); end

  def application_comment_url(*args); end

  def application_path(*args); end

  def application_url(*args); end

  def application_versions_path(*args); end

  def application_versions_url(*args); end

  def applications_path(*args); end

  def applications_url(*args); end

  def area_alert_path(*args); end

  def area_alert_url(*args); end

  def atdis_feed_path(*args); end

  def atdis_feed_url(*args); end

  def atdis_specification_path(*args); end

  def atdis_specification_url(*args); end

  def atdis_test_path(*args); end

  def atdis_test_url(*args); end

  def authorities_path(*args); end

  def authorities_url(*args); end

  def authority_applications_path(*args); end

  def authority_applications_url(*args); end

  def authority_comments_path(*args); end

  def authority_comments_url(*args); end

  def authority_path(*args); end

  def authority_under_the_hood_path(*args); end

  def authority_under_the_hood_url(*args); end

  def authority_url(*args); end

  def batch_action_admin_alerts_path(*args); end

  def batch_action_admin_alerts_url(*args); end

  def batch_action_admin_applications_path(*args); end

  def batch_action_admin_applications_url(*args); end

  def batch_action_admin_authorities_path(*args); end

  def batch_action_admin_authorities_url(*args); end

  def batch_action_admin_comments_path(*args); end

  def batch_action_admin_comments_url(*args); end

  def batch_action_admin_reports_path(*args); end

  def batch_action_admin_reports_url(*args); end

  def batch_action_admin_users_path(*args); end

  def batch_action_admin_users_url(*args); end

  def cancel_user_registration_path(*args); end

  def cancel_user_registration_url(*args); end

  def comment_reports_path(*args); end

  def comment_reports_url(*args); end

  def comments_path(*args); end

  def comments_url(*args); end

  def confirm_admin_comment_path(*args); end

  def confirm_admin_comment_url(*args); end

  def confirmed_alert_path(*args); end

  def confirmed_alert_url(*args); end

  def confirmed_comment_path(*args); end

  def confirmed_comment_url(*args); end

  def cuttlefish_event_path(*args); end

  def cuttlefish_event_url(*args); end

  def destroy_user_session_path(*args); end

  def destroy_user_session_url(*args); end

  def donate_path(*args); end

  def donate_url(*args); end

  def donations_create_path(*args); end

  def donations_create_url(*args); end

  def donations_new_path(*args); end

  def donations_new_url(*args); end

  def donations_path(*args); end

  def donations_url(*args); end

  def edit_admin_authority_path(*args); end

  def edit_admin_authority_url(*args); end

  def edit_admin_comment_path(*args); end

  def edit_admin_comment_url(*args); end

  def edit_admin_user_path(*args); end

  def edit_admin_user_url(*args); end

  def edit_user_password_path(*args); end

  def edit_user_password_url(*args); end

  def edit_user_registration_path(*args); end

  def edit_user_registration_url(*args); end

  def export_active_emails_admin_alerts_path(*args); end

  def export_active_emails_admin_alerts_url(*args); end

  def faq_path(*args); end

  def faq_url(*args); end

  def geocode_queries_path(*args); end

  def geocode_queries_url(*args); end

  def geocode_query_path(*args); end

  def geocode_query_url(*args); end

  def geocoding_applications_path(*args); end

  def geocoding_applications_url(*args); end

  def get_involved_path(*args); end

  def get_involved_url(*args); end

  def how_to_lobby_your_local_council_path(*args); end

  def how_to_lobby_your_local_council_url(*args); end

  def how_to_write_a_scraper_path(*args); end

  def how_to_write_a_scraper_url(*args); end

  def import_admin_authority_path(*args); end

  def import_admin_authority_url(*args); end

  def nearby_application_path(*args); end

  def nearby_application_url(*args); end

  def new_admin_authority_path(*args); end

  def new_admin_authority_url(*args); end

  def new_admin_user_path(*args); end

  def new_admin_user_url(*args); end

  def new_alert_path(*args); end

  def new_alert_url(*args); end

  def new_comment_report_path(*args); end

  def new_comment_report_url(*args); end

  def new_user_confirmation_path(*args); end

  def new_user_confirmation_url(*args); end

  def new_user_password_path(*args); end

  def new_user_password_url(*args); end

  def new_user_registration_path(*args); end

  def new_user_registration_url(*args); end

  def new_user_session_path(*args); end

  def new_user_session_url(*args); end

  def per_day_authority_applications_path(*args); end

  def per_day_authority_applications_url(*args); end

  def per_week_authority_applications_path(*args); end

  def per_week_authority_applications_url(*args); end

  def per_week_authority_comments_path(*args); end

  def per_week_authority_comments_url(*args); end

  def rails_info_path(*args); end

  def rails_info_properties_path(*args); end

  def rails_info_properties_url(*args); end

  def rails_info_routes_path(*args); end

  def rails_info_routes_url(*args); end

  def rails_info_url(*args); end

  def rails_mailers_path(*args); end

  def rails_mailers_url(*args); end

  def resend_admin_comment_path(*args); end

  def resend_admin_comment_url(*args); end

  def root_path(*args); end

  def root_url(*args); end

  def search_applications_path(*args); end

  def search_applications_url(*args); end

  def sidekiq_web_path(*args); end

  def sidekiq_web_url(*args); end

  def toggle_theme_path(*args); end

  def toggle_theme_url(*args); end

  def trending_applications_path(*args); end

  def trending_applications_url(*args); end

  def unsubscribe_admin_alert_path(*args); end

  def unsubscribe_admin_alert_url(*args); end

  def unsubscribe_alert_path(*args); end

  def unsubscribe_alert_url(*args); end

  def user_confirmation_path(*args); end

  def user_confirmation_url(*args); end

  def user_password_path(*args); end

  def user_password_url(*args); end

  def user_registration_path(*args); end

  def user_registration_url(*args); end

  def user_session_path(*args); end

  def user_session_url(*args); end
end

class ActiveAdmin::Inputs::DatepickerInput
end

class ActiveAdmin::Inputs::DatepickerInput
end

module ActiveAdmin::Inputs::Filters::Base
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::ActiveAdmin::Filters::FormtasticAddons
  def collection_from_options(); end

  def input_wrapping(&block); end

  def label_from_options(); end

  def required?(); end

  def wrapper_html_options(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
  def current_filter(); end

  def filter_options(); end

  def filters(); end

  def input_html(); end

  def select_html(); end

  def to_html(); end

  def wrapper_html_options(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
  def filter(*filters); end

  def filters(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
  def self.included(base); end
end

module ActiveAdmin::Inputs::Filters::Base
  extend ::ActiveSupport::Autoload
end

class ActiveAdmin::Inputs::Filters::BooleanInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
end

class ActiveAdmin::Inputs::Filters::BooleanInput
end

class ActiveAdmin::Inputs::Filters::CheckBoxesInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def hidden_fields?(); end

  def searchable_method_name(); end
end

class ActiveAdmin::Inputs::Filters::CheckBoxesInput
end

class ActiveAdmin::Inputs::Filters::DatePickerInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
end

class ActiveAdmin::Inputs::Filters::DatePickerInput
end

class ActiveAdmin::Inputs::Filters::DateRangeInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def gt_input_name(); end

  def gt_input_placeholder(); end

  def input_html_options_for(input_name, placeholder); end

  def lt_input_name(); end

  def lt_input_placeholder(); end
end

class ActiveAdmin::Inputs::Filters::DateRangeInput
end

class ActiveAdmin::Inputs::Filters::NumericInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::NumericInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

class ActiveAdmin::Inputs::Filters::SelectInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def pluck_column(); end

  def reflection_searchable?(); end

  def searchable_method_name(); end
end

class ActiveAdmin::Inputs::Filters::SelectInput
end

class ActiveAdmin::Inputs::Filters::StringInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::StringInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

class ActiveAdmin::Inputs::Filters::TextInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::TextInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

class ActiveAdmin::Menu
  include ::ActiveAdmin::Menu::MenuNode
end

module ActiveAdmin::Menu::MenuNode
  def [](id); end

  def []=(id, child); end

  def add(options); end

  def children(); end

  def current?(item); end

  def include?(item); end

  def initialize(); end

  def items(); end
end

module ActiveAdmin::Menu::MenuNode
end

class ActiveAdmin::Menu
end

class ActiveAdmin::MenuItem
  include ::ActiveAdmin::Menu::MenuNode
  def html_options(); end

  def id(); end

  def initialize(options=T.unsafe(nil)); end

  def label(); end

  def parent(); end

  def priority(); end

  def should_display(); end

  def url(); end
end

class ActiveAdmin::MenuItem
end

class ActiveAdmin::Namespace
  RegisterEvent = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::NamespaceSettings
  def cancan_ability_class_setting(); end

  def cancan_ability_class_setting=(val); end

  def cancan_ability_class_setting?(); end

  def pundit_default_policy_setting(); end

  def pundit_default_policy_setting=(val); end

  def pundit_default_policy_setting?(); end

  def pundit_policy_namespace_setting(); end

  def pundit_policy_namespace_setting=(val); end

  def pundit_policy_namespace_setting?(); end
end

class ActiveAdmin::NamespaceSettings
  def self.cancan_ability_class(*args); end

  def self.cancan_ability_class=(value); end

  def self.cancan_ability_class_setting(); end

  def self.cancan_ability_class_setting=(val); end

  def self.cancan_ability_class_setting?(); end

  def self.pundit_default_policy(*args); end

  def self.pundit_default_policy=(value); end

  def self.pundit_default_policy_setting(); end

  def self.pundit_default_policy_setting=(val); end

  def self.pundit_default_policy_setting?(); end

  def self.pundit_policy_namespace(*args); end

  def self.pundit_policy_namespace=(value); end

  def self.pundit_policy_namespace_setting(); end

  def self.pundit_policy_namespace_setting=(val); end

  def self.pundit_policy_namespace_setting?(); end
end

class ActiveAdmin::PageController
  ACTIVE_ADMIN_ACTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::PunditAdapter
  def format_action(action, subject); end

  def retrieve_policy(subject); end
end

class ActiveAdmin::PunditAdapter
end

class ActiveAdmin::Resource
  include ::ActiveAdmin::BatchActions::ResourceExtension
  RegisterEvent = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::ResourceController
  include ::ActiveAdmin::BatchActions::Controller
end

module ActiveAdmin::ResourceController::DataAccess
  COLLECTION_APPLIES = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::ViewFactory
  def batch_action_selector(); end

  def batch_action_selector=(val); end

  def batch_action_selector?(); end
end

class ActiveAdmin::ViewFactory
  def self.batch_action_selector(); end

  def self.batch_action_selector=(value); end

  def self.batch_action_selector?(); end
end

module ActiveAdmin::ViewHelpers::DisplayHelper
  DISPLAY_NAME_FALLBACK = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  TYPE_WHITELIST = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Base
  include ::ActiveJob::TestHelper::TestQueueAdapter
end

class ActiveJob::Base
  def self._test_adapter(); end

  def self._test_adapter=(val); end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_later(*args); end

  def perform_now(*args); end
end

class ActiveJob::ConfiguredJob
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end

  def enqueue_at(*_); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def enqueue(job); end

  def enqueue_at(job, timestamp); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::TestHelper
  def after_teardown(); end

  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil)); end

  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil)); end

  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), &block); end

  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), &block); end

  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil)); end

  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil)); end

  def before_setup(); end

  def enqueued_jobs(*args, &block); end

  def enqueued_jobs=(arg); end

  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil)); end

  def performed_jobs(*args, &block); end

  def performed_jobs=(arg); end

  def queue_adapter(); end

  def queue_adapter_for_test(); end
end

module ActiveJob::TestHelper::TestQueueAdapter
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
end

module ActiveJob::TestHelper
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attributes(); end

  def initialize(*_); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, type=T.unsafe(nil), **options); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation
  include ::Polyamorous::JoinAssociationExtensions
  include ::Polyamorous::SwappingReflectionClass
end

module ActiveRecord::AttributeMethods
  BLACKLISTED_CLASS_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Base
  include ::GlobalID::Identification
  include ::NewRelic::Agent::Instrumentation::ActiveRecordPrepend::BaseExtensions
end

class ActiveRecord::Base
  extend ::Geocoder::Model::ActiveRecord
  extend ::Geocoder::Model::Base
  extend ::SorbetRails::CustomFinderMethods
  extend ::ActiveStorage::Attached::Macros
  def self.inherited(child); end

  def self.sbr_old_inherited(subclass); end
end

module ActiveRecord::Batches
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Coders::JSON
end

class ActiveRecord::Coders::JSON
  def self.dump(obj); end

  def self.load(json); end
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter
  ER_CANNOT_ADD_FOREIGN = ::T.let(nil, ::T.untyped)
  ER_CANNOT_CREATE_TABLE = ::T.let(nil, ::T.untyped)
  ER_DATA_TOO_LONG = ::T.let(nil, ::T.untyped)
  ER_DO_NOT_HAVE_DEFAULT = ::T.let(nil, ::T.untyped)
  ER_DUP_ENTRY = ::T.let(nil, ::T.untyped)
  ER_LOCK_DEADLOCK = ::T.let(nil, ::T.untyped)
  ER_LOCK_WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
  ER_NOT_NULL_VIOLATION = ::T.let(nil, ::T.untyped)
  ER_NO_REFERENCED_ROW_2 = ::T.let(nil, ::T.untyped)
  ER_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  ER_QUERY_INTERRUPTED = ::T.let(nil, ::T.untyped)
  ER_QUERY_TIMEOUT = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::MySQL::SchemaStatements
  CHARSETS_OF_4BYTES_MAXLEN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::Mysql2Adapter
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  def add_record(record); end

  def closed?(); end

  def joinable?(); end

  def open?(); end

  def state(); end
end

class ActiveRecord::ConnectionAdapters::NullTransaction
end

class ActiveRecord::ConnectionAdapters::RealTransaction
  def commit(); end

  def initialize(connection, options, *args); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::RealTransaction
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
  def commit(); end

  def initialize(connection, savepoint_name, parent_transaction, options, *args); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
end

ActiveRecord::ConnectionAdapters::SchemaCreation = ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::Transaction
  def add_record(record); end

  def before_commit_records(); end

  def closed?(); end

  def commit_records(); end

  def connection(); end

  def full_rollback?(); end

  def initialize(connection, options, run_commit_callbacks: T.unsafe(nil)); end

  def joinable=(joinable); end

  def joinable?(); end

  def open?(); end

  def records(); end

  def rollback_records(); end

  def savepoint_name(); end

  def state(); end
end

class ActiveRecord::ConnectionAdapters::Transaction
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  def begin_transaction(options=T.unsafe(nil)); end

  def commit_transaction(); end

  def current_transaction(); end

  def initialize(connection); end

  def open_transactions(); end

  def rollback_transaction(transaction=T.unsafe(nil)); end

  def within_new_transaction(options=T.unsafe(nil)); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionManager
end

class ActiveRecord::ConnectionAdapters::TransactionState
  def add_child(state); end

  def commit!(); end

  def committed?(); end

  def completed?(); end

  def finalized?(); end

  def full_commit!(); end

  def full_rollback!(); end

  def fully_committed?(); end

  def fully_completed?(); end

  def fully_rolledback?(); end

  def initialize(state=T.unsafe(nil)); end

  def nullify!(); end

  def rollback!(); end

  def rolledback?(); end

  def set_state(state); end
end

class ActiveRecord::ConnectionAdapters::TransactionState
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Enum
  ENUM_CONFLICT_MESSAGE = ::T.let(nil, ::T.untyped)
  SR_ENUM_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ExplainRegistry
  def self.collect?(*args, &block); end
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::InternalMetadata
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata
  extend ::Kaminari::ConfigurationMethods::ClassMethods
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter::Rails41
end

module ActiveRecord::LegacyYamlAdapter::Rails41
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter::Rails420
end

module ActiveRecord::LegacyYamlAdapter::Rails420
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(klass, coder); end
end

class ActiveRecord::LogSubscriber
  def sql(event); end
  RAILS_GEM_ROOT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, &block); end

  def add_column(*args, &block); end

  def add_foreign_key(*args, &block); end

  def add_index(*args, &block); end

  def add_reference(*args, &block); end

  def add_timestamps(*args, &block); end

  def change_column(*args, &block); end

  def change_column_default(*args, &block); end

  def change_column_null(*args, &block); end

  def change_table(table_name, options=T.unsafe(nil)); end

  def commands(); end

  def commands=(commands); end

  def create_join_table(*args, &block); end

  def create_table(*args, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, &block); end

  def drop_join_table(*args, &block); end

  def drop_table(*args, &block); end

  def enable_extension(*args, &block); end

  def execute(*args, &block); end

  def execute_block(*args, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, &block); end

  def remove_column(*args, &block); end

  def remove_columns(*args, &block); end

  def remove_foreign_key(*args, &block); end

  def remove_index(*args, &block); end

  def remove_reference(*args, &block); end

  def remove_timestamps(*args, &block); end

  def rename_column(*args, &block); end

  def rename_index(*args, &block); end

  def rename_table(*args, &block); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_column(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
end

class ActiveRecord::Migration::CommandRecorder
end

class ActiveRecord::Migration::Compatibility::V4_2
  def add_belongs_to(*_, **options); end

  def add_reference(*_, **options); end

  def add_timestamps(_, **options); end

  def index_exists?(table_name, column_name, options=T.unsafe(nil)); end

  def remove_index(table_name, options=T.unsafe(nil)); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*_, **options); end

  def references(*_, **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V4_2
end

class ActiveRecord::Migration::Compatibility::V5_0
  def add_belongs_to(table_name, ref_name, **options); end

  def add_column(table_name, column_name, type, options=T.unsafe(nil)); end

  def add_reference(table_name, ref_name, **options); end

  def change_table(table_name, options=T.unsafe(nil)); end

  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end

  def primary_key(name, type=T.unsafe(nil), **options); end

  def references(*args, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V5_0
end

class ActiveRecord::Migration::Compatibility::V5_1
  def change_column(table_name, column_name, type, options=T.unsafe(nil)); end

  def create_table(table_name, options=T.unsafe(nil)); end
end

module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NullRelation
  def any?(); end

  def calculate(operation, _column_name); end

  def delete(_id_or_array); end

  def delete_all(); end

  def empty?(); end

  def exists?(_conditions=T.unsafe(nil)); end

  def many?(); end

  def none?(); end

  def one?(); end

  def or(other); end

  def pluck(*column_names); end

  def to_sql(); end

  def update_all(_updates); end
end

module ActiveRecord::NullRelation
end

class ActiveRecord::PredicateBuilder
  def build(attribute, value); end

  def build_bind_attribute(column_name, value); end

  def build_from_hash(attributes); end

  def expand_from_hash(attributes); end

  def initialize(table); end

  def register_handler(klass, handler); end

  def resolve_column_aliases(*args, &block); end

  def table(); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end

  def predicate_builder(); end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  def self.or(other); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  def associated_table(); end

  def initialize(associated_table, value); end

  def queries(); end

  def value(); end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
end

class ActiveRecord::PredicateBuilder::BaseHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end

  def predicate_builder(); end
end

class ActiveRecord::PredicateBuilder::BaseHandler
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end

  def predicate_builder(); end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  def associated_table(); end

  def initialize(associated_table, values); end

  def queries(); end

  def values(); end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
end

class ActiveRecord::PredicateBuilder::RangeHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end

  def predicate_builder(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def exclude_end?(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
end

class ActiveRecord::PredicateBuilder::RangeHandler
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PredicateBuilder::RelationHandler
end

class ActiveRecord::PredicateBuilder
  def self.references(attributes); end
end

module ActiveRecord::QueryMethods
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_OR_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::SorbetRails::CustomFinderMethods
  include ::NewRelic::Agent::Instrumentation::ActiveRecordPrepend::RelationExtensions
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Result
  def [](idx); end

  def cast_values(type_overrides=T.unsafe(nil)); end

  def collect!(); end

  def column_types(); end

  def columns(); end

  def each(&blk); end

  def empty?(); end

  def first(); end

  def initialize(columns, rows, column_types=T.unsafe(nil)); end

  def last(); end

  def length(); end

  def map!(); end

  def rows(); end

  def to_ary(); end

  def to_hash(); end
end

class ActiveRecord::SchemaMigration
  include ::ActiveRecord::SchemaMigration::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def version(); end
end

class ActiveRecord::SchemaMigration::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::SchemaMigration::GeneratedRelationMethods
end

class ActiveRecord::SchemaMigration::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::SchemaMigration::GeneratedRelationMethods
end

class ActiveRecord::SchemaMigration::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::SchemaMigration::GeneratedRelationMethods
  def name(*args, &block); end
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
end

module ActiveRecord::SchemaMigration::GeneratedRelationMethods
end

module ActiveRecord::SchemaMigration::GeneratedRelationMethods
end

class ActiveRecord::SchemaMigration
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.all_versions(); end

  def self.create_table(); end

  def self.drop_table(); end

  def self.normalize_migration_number(number); end

  def self.normalized_versions(); end

  def self.page(num=T.unsafe(nil)); end
end

class ActiveRecord::StatementCache
  def bind_map(); end

  def execute(params, connection, &block); end

  def initialize(query_builder, bind_map, klass); end

  def klass(); end

  def query_builder(); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

class ActiveRecord::TableMetadata
  def aggregated_with?(aggregation_name); end

  def arel_attribute(column_name); end

  def arel_table(); end

  def associated_table(table_name); end

  def associated_with?(association_name); end

  def association(); end

  def association_foreign_key(*args, &block); end

  def association_foreign_type(*args, &block); end

  def association_join_foreign_key(*args, &block); end

  def association_join_primary_key(*args, &block); end

  def has_column?(column_name); end

  def initialize(klass, arel_table, association=T.unsafe(nil)); end

  def klass(); end

  def polymorphic_association?(); end

  def reflect_on_aggregation(aggregation_name); end

  def resolve_column_aliases(hash); end

  def type(column_name); end
end

class ActiveRecord::TableMetadata
end

module ActiveRecord::Tasks::DatabaseTasks
  def charset(*arguments); end

  def charset_current(environment=T.unsafe(nil)); end

  def check_protected_environments!(); end

  def check_schema_file(filename); end

  def check_target_version(); end

  def collation(*arguments); end

  def collation_current(environment=T.unsafe(nil)); end

  def create(*arguments); end

  def create_all(); end

  def create_current(environment=T.unsafe(nil)); end

  def current_config(options=T.unsafe(nil)); end

  def current_config=(current_config); end

  def database_configuration(); end

  def database_configuration=(database_configuration); end

  def db_dir(); end

  def db_dir=(db_dir); end

  def drop(*arguments); end

  def drop_all(); end

  def drop_current(environment=T.unsafe(nil)); end

  def dump_schema_cache(conn, filename); end

  def env(); end

  def env=(env); end

  def fixtures_path(); end

  def fixtures_path=(fixtures_path); end

  def load_schema(configuration, format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_schema_current(format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_seed(); end

  def migrate(); end

  def migrations_paths(); end

  def migrations_paths=(migrations_paths); end

  def purge(configuration); end

  def purge_all(); end

  def purge_current(environment=T.unsafe(nil)); end

  def register_task(pattern, task); end

  def root(); end

  def root=(root); end

  def schema_file(format=T.unsafe(nil)); end

  def seed_loader(); end

  def seed_loader=(seed_loader); end

  def structure_dump(*arguments); end

  def structure_load(*arguments); end

  def target_version(); end
end

module ActiveRecord::Tasks::DatabaseTasks
  def self.structure_dump_flags(); end

  def self.structure_dump_flags=(obj); end

  def self.structure_load_flags(); end

  def self.structure_load_flags=(obj); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def clear_active_connections!(*args, &block); end

  def collation(); end

  def connection(*args, &block); end

  def create(master_established=T.unsafe(nil)); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
end

module ActiveRecord::TestFixtures
  def after_teardown(); end

  def before_setup(); end

  def enlist_fixture_connections(); end

  def run_in_transaction?(); end

  def setup_fixtures(config=T.unsafe(nil)); end

  def teardown_fixtures(); end
end

module ActiveRecord::TestFixtures::ClassMethods
  def fixtures(*fixture_set_names); end

  def set_fixture_class(class_names=T.unsafe(nil)); end

  def setup_fixture_accessors(fixture_set_names=T.unsafe(nil)); end

  def uses_transaction(*methods); end

  def uses_transaction?(method); end
end

module ActiveRecord::TestFixtures::ClassMethods
end

module ActiveRecord::TestFixtures
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

ActiveRecord::Type::Helpers = ActiveModel::Type::Helpers

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Service
  def delete(key); end

  def delete_prefixed(prefix); end

  def download(key); end

  def download_chunk(key, range); end

  def exist?(key); end

  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  def update_metadata(key, **metadata); end

  def upload(key, io, checksum: T.unsafe(nil), **options); end

  def url(key, expires_in:, disposition:, filename:, content_type:); end

  def url_expires_in(); end

  def url_expires_in=(val); end

  def url_expires_in?(); end

  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end
end

class ActiveStorage::Service::Configurator
  def build(service_name); end

  def configurations(); end

  def initialize(configurations); end
end

class ActiveStorage::Service::Configurator
  def self.build(service_name, configurations); end
end

class ActiveStorage::Service
  extend ::ActiveSupport::Autoload
  def self.build(configurator:, service: T.unsafe(nil), **service_config); end

  def self.configure(service_name, configurations); end

  def self.url_expires_in(); end

  def self.url_expires_in=(val); end

  def self.url_expires_in?(); end
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end

  def add_silencer(&block); end

  def filter(backtrace, kind=T.unsafe(nil)); end

  def remove_filters!(); end

  def remove_silencers!(); end
end

module ActiveSupport::Cache
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::ConnectionPoolLike
  def with(); end
end

module ActiveSupport::Cache::ConnectionPoolLike
end

class ActiveSupport::Cache::Entry
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def cache_path(); end

  def initialize(cache_path, options=T.unsafe(nil)); end
  EXCLUDED_DIRS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::MemCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  include ::ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
  def initialize(*addresses); end

  def stats(); end
  ESCAPE_KEY_CHARS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
end

module ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
end

class ActiveSupport::Cache::MemCacheStore
  def self.build_mem_cache(*addresses); end
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

class ActiveSupport::Cache::RedisCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  include ::ActiveSupport::Cache::RedisCacheStore::LocalCacheWithRaw
  def initialize(namespace: T.unsafe(nil), compress: T.unsafe(nil), compress_threshold: T.unsafe(nil), expires_in: T.unsafe(nil), race_condition_ttl: T.unsafe(nil), error_handler: T.unsafe(nil), **redis_options); end

  def max_key_bytesize(); end

  def mget_capable?(); end

  def mset_capable?(); end

  def redis(); end

  def redis_options(); end
  DEFAULT_ERROR_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_REDIS_OPTIONS = ::T.let(nil, ::T.untyped)
  MAX_KEY_BYTESIZE = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::RedisCacheStore::LocalCacheWithRaw
end

module ActiveSupport::Cache::RedisCacheStore::LocalCacheWithRaw
end

class ActiveSupport::Cache::RedisCacheStore
  def self.build_redis(redis: T.unsafe(nil), url: T.unsafe(nil), **redis_options); end
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _reset_callbacks(); end

  def _run_reset_callbacks(&block); end

  def attributes(); end

  def attributes=(attributes); end

  def reset(); end

  def set(set_attributes); end
end

class ActiveSupport::CurrentAttributes
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._reset_callbacks(); end

  def self._reset_callbacks=(value); end

  def self.attribute(*names); end

  def self.clear_all(); end

  def self.instance(); end

  def self.reset(*args, &block); end

  def self.reset_all(); end

  def self.resets(&block); end

  def self.set(*args, &block); end
end

module ActiveSupport::Dependencies
  Reference = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Deprecation
  def deprecation_horizon(); end

  def deprecation_horizon=(deprecation_horizon); end

  def initialize(deprecation_horizon=T.unsafe(nil), gem_name=T.unsafe(nil)); end
end

class ActiveSupport::Digest
end

class ActiveSupport::Digest
  def self.hash_digest_class(); end

  def self.hash_digest_class=(klass); end

  def self.hexdigest(arg); end
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

class ActiveSupport::LegacyKeyGenerator
  SECRET_MIN_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LogSubscriber
  include ::Honeybadger::Breadcrumbs::LogSubscriberInjector
  def colorize_logging(); end

  def colorize_logging=(obj); end

  def logger(); end
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
end

module ActiveSupport::Multibyte::Unicode
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(val); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(val); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(val); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(val); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Subscriber
  def finish(name, id, payload); end

  def patterns(); end

  def start(name, id, payload); end
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  include ::ActiveSupport::Testing::SetupAndTeardown
  def __callbacks(); end

  def __callbacks?(); end

  def _run_setup_callbacks(&block); end

  def _run_teardown_callbacks(&block); end

  def _setup_callbacks(); end

  def _teardown_callbacks(); end

  def assert_no_match(matcher, obj, msg=T.unsafe(nil)); end

  def assert_not_empty(obj, msg=T.unsafe(nil)); end

  def assert_not_equal(exp, act, msg=T.unsafe(nil)); end

  def assert_not_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_in_epsilon(a, b, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_includes(collection, obj, msg=T.unsafe(nil)); end

  def assert_not_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_nil(obj, msg=T.unsafe(nil)); end

  def assert_not_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_predicate(o1, op, msg=T.unsafe(nil)); end

  def assert_not_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def assert_not_same(exp, act, msg=T.unsafe(nil)); end

  def assert_raise(*exp); end

  def file_fixture_path(); end

  def file_fixture_path?(); end

  def method_name(); end
end

class ActiveSupport::TestCase
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::Declarative
  extend ::Rails::LineFiltering
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._setup_callbacks(); end

  def self._setup_callbacks=(value); end

  def self._teardown_callbacks(); end

  def self._teardown_callbacks=(value); end

  def self.file_fixture_path(); end

  def self.file_fixture_path=(val); end

  def self.file_fixture_path?(); end

  def self.test_order=(new_order); end
end

module ActiveSupport::Testing
end

module ActiveSupport::Testing::Assertions
  def assert_changes(expression, message=T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  def assert_difference(expression, *args, &block); end

  def assert_no_changes(expression, message=T.unsafe(nil), &block); end

  def assert_no_difference(expression, message=T.unsafe(nil), &block); end

  def assert_not(object, message=T.unsafe(nil)); end

  def assert_nothing_raised(); end
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Assertions
end

module ActiveSupport::Testing::ConstantLookup
end

module ActiveSupport::Testing::ConstantLookup
  extend ::ActiveSupport::Concern
end

module ActiveSupport::Testing::Declarative
  def test(name, &block); end
end

module ActiveSupport::Testing::Declarative
end

module ActiveSupport::Testing::Deprecation
  def assert_deprecated(match=T.unsafe(nil), deprecator=T.unsafe(nil), &block); end

  def assert_not_deprecated(deprecator=T.unsafe(nil), &block); end

  def collect_deprecations(deprecator=T.unsafe(nil)); end
end

module ActiveSupport::Testing::Deprecation
end

module ActiveSupport::Testing::FileFixtures
  def file_fixture(fixture_name); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
end

module ActiveSupport::Testing::Isolation
  include ::ActiveSupport::Testing::Isolation::Forking
  def run(); end
end

module ActiveSupport::Testing::Isolation::Forking
  def run_in_isolation(&blk); end
end

module ActiveSupport::Testing::Isolation::Forking
end

module ActiveSupport::Testing::Isolation::Subprocess
  def run_in_isolation(&blk); end
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
end

module ActiveSupport::Testing::Isolation
  def self.forking_env?(); end

  def self.included(klass); end
end

module ActiveSupport::Testing::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end
end

module ActiveSupport::Testing::SetupAndTeardown
  def self.prepended(klass); end
end

class ActiveSupport::Testing::SimpleStubs
  def stub_object(object, method_name, &block); end

  def stubbing(object, method_name); end

  def unstub_all!(); end
end

class ActiveSupport::Testing::SimpleStubs::Stub
  def method_name(); end

  def method_name=(_); end

  def object(); end

  def object=(_); end

  def original_method(); end

  def original_method=(_); end
end

class ActiveSupport::Testing::SimpleStubs::Stub
  def self.[](*_); end

  def self.members(); end
end

class ActiveSupport::Testing::SimpleStubs
end

module ActiveSupport::Testing::Stream
end

module ActiveSupport::Testing::Stream
end

module ActiveSupport::Testing::TaggedLogging
  def before_setup(); end

  def tagged_logger=(tagged_logger); end
end

module ActiveSupport::Testing::TaggedLogging
end

module ActiveSupport::Testing::TimeHelpers
  def after_teardown(); end

  def freeze_time(&block); end

  def travel(duration, &block); end

  def travel_back(); end

  def travel_to(date_or_time); end
end

module ActiveSupport::Testing::TimeHelpers
end

module ActiveSupport::Testing
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITHOUT_COLON = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITH_COLON = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

class AddComment
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class AddComment
  extend ::ActiveModel::Callbacks
  extend ::Searchkick::Model
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class AddCommentsController::AddCommentParams
  def self.inherited(s); end
end

class AddCommentsController::CreateParams
  def self.inherited(s); end
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::Template
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::NormalizeCharacterClasses
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

class Admin::AdminCommentsController
  def create(); end
end

class Admin::AdminCommentsController
  def self.resource_class=(klass); end
end

class Admin::AlertsController
  def export_active_emails(); end

  def unsubscribe(); end
end

class Admin::AlertsController
  def self.resource_class=(klass); end
end

class Admin::ApiUsageController
  def index(); end
end

class Admin::ApiUsageController
end

class Admin::ApplicationsController
end

class Admin::ApplicationsController
  def self.resource_class=(klass); end
end

class Admin::AuthoritiesController
  def import(); end
end

class Admin::AuthoritiesController
  def self.resource_class=(klass); end
end

class Admin::BackgroundJobsController
end

class Admin::BackgroundJobsController
end

class Admin::CommentsController
  def confirm(); end

  def resend(); end
end

class Admin::CommentsController
  def self.resource_class=(klass); end
end

class Admin::DashboardController
end

class Admin::DashboardController
end

class Admin::ReportsController
end

class Admin::ReportsController
  def self.resource_class=(klass); end
end

class Admin::SiteSettingsController::SiteSettingParams
  def self.inherited(s); end
end

class Admin::SiteSettingsController::WrappedSiteSettingParams
  def self.inherited(s); end
end

class Admin::UsersController
end

class Admin::UsersController
  def self.resource_class=(klass); end
end

class Alert
  include ::Alert::GeneratedAssociationMethods
end

class Alert::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Alert::GeneratedRelationMethods
end

class Alert::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Alert::GeneratedRelationMethods
end

class Alert::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Alert::GeneratedRelationMethods
end

module Alert::GeneratedAssociationMethods
end

module Alert::GeneratedAssociationMethods
end

module Alert::GeneratedRelationMethods
  def active(*args, &block); end

  def confirmed(*args, &block); end

  def in_past_week(*args, &block); end
end

module Alert::GeneratedRelationMethods
end

class Alert
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class AlertMailer
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class AlertsController::AlertParams
  def self.inherited(s); end
end

class AlertsController::AreaParams
  def self.inherited(s); end
end

class AlertsController::ConfirmedParams
  def self.inherited(s); end
end

class AlertsController::CreateParams
  def self.inherited(s); end
end

class AlertsController::NewParams
  def self.inherited(s); end
end

class AlertsController::UnsubscribeParams
  def self.inherited(s); end
end

class ApiController::AllParams
  def self.inherited(s); end
end

class ApiController::ApiRenderParams
  def self.inherited(s); end
end

class ApiController::AreaParams
  def self.inherited(s); end
end

class ApiController::AuthenticateBulkApiParams
  def self.inherited(s); end
end

class ApiController::AuthorityParams
  def self.inherited(s); end
end

class ApiController::DateScrapedParams
  def self.inherited(s); end
end

class ApiController::PerPageParams
  def self.inherited(s); end
end

class ApiController::PointParams
  def self.inherited(s); end
end

class ApiController::RequireApiKeyParams
  def self.inherited(s); end
end

class ApiController::SuburbPostcodeParams
  def self.inherited(s); end
end

class ApiKey
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class ApiKey::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApiKey::GeneratedRelationMethods
end

class ApiKey::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApiKey::GeneratedRelationMethods
end

class ApiKey::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApiKey::GeneratedRelationMethods
end

module ApiKey::GeneratedRelationMethods
end

module ApiKey::GeneratedRelationMethods
end

class ApiKey
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Application
  include ::Geocoder::Store::ActiveRecord
  include ::Geocoder::Store::Base
  def _notify_application_sweeper_for_after_create(&block); end

  def _notify_application_sweeper_for_after_destroy(&block); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_add_for_versions(); end

  def after_add_for_versions=(val); end

  def after_add_for_versions?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def after_remove_for_versions(); end

  def after_remove_for_versions=(val); end

  def after_remove_for_versions?(); end

  def autosave_associated_records_for_authority(*args); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_current_version(); end

  def autosave_associated_records_for_first_version(); end

  def autosave_associated_records_for_versions(*args); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_add_for_versions(); end

  def before_add_for_versions=(val); end

  def before_add_for_versions?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def before_remove_for_versions(); end

  def before_remove_for_versions=(val); end

  def before_remove_for_versions?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def reindex(method_name=T.unsafe(nil), **options); end

  def searchkick_klass(); end

  def searchkick_options(); end

  def should_index?(); end

  def similar(options=T.unsafe(nil)); end

  def validate_associated_records_for_comments(*args); end

  def validate_associated_records_for_versions(*args); end
end

class Application::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Application::GeneratedRelationMethods
end

class Application::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Application::GeneratedRelationMethods
end

class Application::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Application::GeneratedRelationMethods
end

module Application::GeneratedAssociationMethods
  def comment_ids=(ids); end

  def version_ids=(ids); end
end

module Application::GeneratedRelationMethods
  def geocoded(*args, &block); end

  def in_past_week(*args, &block); end

  def near(*args, &block); end

  def not_geocoded(*args, &block); end

  def not_reverse_geocoded(*args, &block); end

  def recent(*args, &block); end

  def with_current_version(*args, &block); end

  def with_first_version(*args, &block); end

  def within_bounding_box(*args, &block); end
end

module Application::GeneratedRelationMethods
end

class Application
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_add_for_versions(); end

  def self.after_add_for_versions=(val); end

  def self.after_add_for_versions?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.after_remove_for_versions(); end

  def self.after_remove_for_versions=(val); end

  def self.after_remove_for_versions?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_add_for_versions(); end

  def self.before_add_for_versions=(val); end

  def self.before_add_for_versions?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end

  def self.before_remove_for_versions(); end

  def self.before_remove_for_versions=(val); end

  def self.before_remove_for_versions?(); end

  def self.reindex(method_name=T.unsafe(nil), **options); end

  def self.search(term=T.unsafe(nil), **options, &block); end

  def self.search_index(name: T.unsafe(nil)); end

  def self.searchkick_index(name: T.unsafe(nil)); end

  def self.searchkick_index_options(); end

  def self.searchkick_klass(); end

  def self.searchkick_options(); end

  def self.searchkick_reindex(method_name=T.unsafe(nil), **options); end

  def self.searchkick_search(term=T.unsafe(nil), **options, &block); end
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class ApplicationRecord::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_AssociationRelation
end

class ApplicationRecord::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_Associations_CollectionProxy
end

class ApplicationRecord::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_Relation
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedRelationMethods
end

module ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class ApplicationRedirect
  def autosave_associated_records_for_redirect_application(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class ApplicationRedirect::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRedirect::GeneratedRelationMethods
end

class ApplicationRedirect::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRedirect::GeneratedRelationMethods
end

class ApplicationRedirect::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRedirect::GeneratedRelationMethods
end

module ApplicationRedirect::GeneratedRelationMethods
end

module ApplicationRedirect::GeneratedRelationMethods
end

class ApplicationVersion
  def autosave_associated_records_for_application(*args); end

  def autosave_associated_records_for_previous_version(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class ApplicationVersion::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationVersion::GeneratedRelationMethods
end

class ApplicationVersion::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationVersion::GeneratedRelationMethods
end

class ApplicationVersion::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationVersion::GeneratedRelationMethods
end

module ApplicationVersion::GeneratedRelationMethods
end

module ApplicationVersion::GeneratedRelationMethods
end

class ApplicationVersion
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ApplicationsController::AddressParams
  def self.inherited(s); end
end

class ApplicationsController::CheckApplicationRedirectParams
  def self.inherited(s); end
end

class ApplicationsController::IndexParams
  def self.inherited(s); end
end

class ApplicationsController::NearbyParams
  def self.inherited(s); end
end

class ApplicationsController::PerDayParams
  def self.inherited(s); end
end

class ApplicationsController::PerWeekParams
  def self.inherited(s); end
end

class ApplicationsController::SearchParams
  def self.inherited(s); end
end

class ApplicationsController::ShowParams
  def self.inherited(s); end
end

module Arbre::HTML
  AUTO_BUILD_ELEMENTS = ::T.let(nil, ::T.untyped)
  HTML5_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Arbre::HTML::Tag
  INDENT_SIZE = ::T.let(nil, ::T.untyped)
  SELF_CLOSING_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

Arel::Attribute = Arel::Attributes::Attribute

Arel::Node = Arel::Nodes::Node

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::DepthFirst
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::PostgreSQL
  CUBE = ::T.let(nil, ::T.untyped)
  GROUPING_SET = ::T.let(nil, ::T.untyped)
  ROLLUP = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::ToSql
  AND = ::T.let(nil, ::T.untyped)
  COMMA = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  GROUP_BY = ::T.let(nil, ::T.untyped)
  ORDER_BY = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  WHERE = ::T.let(nil, ::T.untyped)
  WINDOW = ::T.let(nil, ::T.untyped)
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def abbrev(pattern=T.unsafe(nil)); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end
end

module Atdis
  VERSION = ::T.let(nil, ::T.untyped)
end

class AtdisController::ExampleFeedParams
  def self.inherited(s); end
end

class AtdisController::FeedParams
  def self.inherited(s); end
end

class AtdisController::TestParams
  def self.inherited(s); end
end

class AtdisController::TestRedirectParams
  def self.inherited(s); end
end

class AuthoritiesController::IndexParams
  def self.inherited(s); end
end

class AuthoritiesController::ShowParams
  def self.inherited(s); end
end

class AuthoritiesController::UnderTheHoodParams
  def self.inherited(s); end
end

class Authority
  def _notify_authority_sweeper_for_after_create(&block); end

  def _notify_authority_sweeper_for_after_destroy(&block); end

  def _notify_authority_sweeper_for_after_update(&block); end

  def after_add_for_applications(); end

  def after_add_for_applications=(val); end

  def after_add_for_applications?(); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_remove_for_applications(); end

  def after_remove_for_applications=(val); end

  def after_remove_for_applications?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def autosave_associated_records_for_applications(*args); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_github_issue(); end

  def before_add_for_applications(); end

  def before_add_for_applications=(val); end

  def before_add_for_applications?(); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_remove_for_applications(); end

  def before_remove_for_applications=(val); end

  def before_remove_for_applications?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def validate_associated_records_for_applications(*args); end

  def validate_associated_records_for_comments(*args); end
end

class Authority::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Authority::GeneratedRelationMethods
end

class Authority::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Authority::GeneratedRelationMethods
end

class Authority::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Authority::GeneratedRelationMethods
end

module Authority::GeneratedAssociationMethods
  def application_ids=(ids); end

  def comment_ids=(ids); end
end

module Authority::GeneratedRelationMethods
  def active(*args, &block); end

  def enabled(*args, &block); end
end

module Authority::GeneratedRelationMethods
end

class Authority
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_applications(); end

  def self.after_add_for_applications=(val); end

  def self.after_add_for_applications?(); end

  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_remove_for_applications(); end

  def self.after_remove_for_applications=(val); end

  def self.after_remove_for_applications?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.before_add_for_applications(); end

  def self.before_add_for_applications=(val); end

  def self.before_add_for_applications?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_remove_for_applications(); end

  def self.before_remove_for_applications=(val); end

  def self.before_remove_for_applications?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end
end

class AuthorityLogger
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module AutoprefixerRails
  VERSION = ::T.let(nil, ::T.untyped)
end

class AutoprefixerRails::Processor
  SUPPORTED_RUNTIMES = ::T.let(nil, ::T.untyped)
end

module Axiom::Types
  Contradiction = ::T.let(nil, ::T.untyped)
  Tautology = ::T.let(nil, ::T.untyped)
  Undefined = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Axiom::Types::DateTime
  MAXIMUM_SECONDS = ::T.let(nil, ::T.untyped)
end

class Axiom::Types::Infinity
  include ::Singleton
end

class Axiom::Types::Infinity
  extend ::DescendantsTracker
end

class Axiom::Types::String
  extend ::Axiom::Types::Encodable
end

class Axiom::Types::Symbol
  extend ::Axiom::Types::Encodable
end

class Axiom::Types::Time
  MAXIMUM_SECONDS = ::T.let(nil, ::T.untyped)
  MINIMUM_SECONDS = ::T.let(nil, ::T.untyped)
end

class Axiom::Types::Type
  extend ::DescendantsTracker
end

class BCrypt::Engine
  DEFAULT_COST = ::T.let(nil, ::T.untyped)
  MAX_COST = ::T.let(nil, ::T.untyped)
  MAX_SALT_LENGTH = ::T.let(nil, ::T.untyped)
  MIN_COST = ::T.let(nil, ::T.untyped)
end

BasicObject::BasicObject = BasicObject

class BasicSocket
  def read_nonblock(len, str=T.unsafe(nil), exception: T.unsafe(nil)); end
end

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end
end

module BetterErrors
  VERSION = ::T.let(nil, ::T.untyped)
end

class BetterErrors::CodeFormatter
  FILE_TYPES = ::T.let(nil, ::T.untyped)
end

class BetterErrors::Editor
  KNOWN_EDITORS = ::T.let(nil, ::T.untyped)
end

class BetterErrors::Middleware
  ALLOWED_IPS = ::T.let(nil, ::T.untyped)
  CSRF_TOKEN_COOKIE_NAME = ::T.let(nil, ::T.untyped)
end

module BetterErrors::REPL
  PROVIDERS = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat
  def clone(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.new(*args, **kwargs); end
end

class Binding
  def clone(); end

  def irb(); end
end

module BindingOfCaller
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bootsnap
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bootsnap::CompileCache::Uncompilable
end

class Bootsnap::CompileCache::Uncompilable
end

module Bootsnap::ExplicitRequire
  ARCHDIR = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  RUBYLIBDIR = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache
  CACHED_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  DLEXT2 = ::T.let(nil, ::T.untyped)
  DL_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DOT_RB = ::T.let(nil, ::T.untyped)
  DOT_SO = ::T.let(nil, ::T.untyped)
  ERROR_TAG_IVAR = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Cache
  AGE_THRESHOLD = ::T.let(nil, ::T.untyped)
  BUILTIN_FEATURES = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Path
  RUBY_LIBDIR = ::T.let(nil, ::T.untyped)
  RUBY_SITEDIR = ::T.let(nil, ::T.untyped)
  STABLE = ::T.let(nil, ::T.untyped)
  VOLATILE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache::PathScanner
  ALTERNATIVE_NATIVE_EXTENSIONS_PATTERN = ::T.let(nil, ::T.untyped)
  BUNDLE_PATH = ::T.let(nil, ::T.untyped)
  NORMALIZE_NATIVE_EXTENSIONS = ::T.let(nil, ::T.untyped)
  REQUIRABLE_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module BootstrapForm::Components
  include ::BootstrapForm::Components::Hints
  include ::BootstrapForm::Components::Labels
  include ::BootstrapForm::Components::Layout
  include ::BootstrapForm::Components::Validation
end

module BootstrapForm::Components::Hints
end

module BootstrapForm::Components::Hints
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Components::Labels
end

module BootstrapForm::Components::Labels
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Components::Layout
end

module BootstrapForm::Components::Layout
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Components::Validation
end

module BootstrapForm::Components::Validation
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Components
  extend ::ActiveSupport::Autoload
end

class BootstrapForm::Configuration
  def default_form_attributes(); end

  def default_form_attributes=(attributes); end
end

class BootstrapForm::Configuration
end

class BootstrapForm::FormBuilder
  include ::BootstrapForm::Helpers::Bootstrap
  include ::BootstrapForm::FormGroupBuilder
  include ::BootstrapForm::FormGroup
  include ::BootstrapForm::Components
  include ::BootstrapForm::Components::Hints
  include ::BootstrapForm::Components::Labels
  include ::BootstrapForm::Components::Layout
  include ::BootstrapForm::Components::Validation
  include ::BootstrapForm::Inputs::Base
  include ::BootstrapForm::Inputs::CheckBox
  include ::BootstrapForm::Inputs::InputsCollection
  include ::BootstrapForm::Inputs::CollectionCheckBoxes
  include ::BootstrapForm::Inputs::CollectionRadioButtons
  include ::BootstrapForm::Inputs::CollectionSelect
  include ::BootstrapForm::Inputs::ColorField
  include ::BootstrapForm::Inputs::DateField
  include ::BootstrapForm::Inputs::DateSelect
  include ::BootstrapForm::Inputs::DatetimeField
  include ::BootstrapForm::Inputs::DatetimeLocalField
  include ::BootstrapForm::Inputs::DatetimeSelect
  include ::BootstrapForm::Inputs::EmailField
  include ::BootstrapForm::Inputs::FileField
  include ::BootstrapForm::Inputs::GroupedCollectionSelect
  include ::BootstrapForm::Inputs::MonthField
  include ::BootstrapForm::Inputs::NumberField
  include ::BootstrapForm::Inputs::PasswordField
  include ::BootstrapForm::Inputs::PhoneField
  include ::BootstrapForm::Inputs::RadioButton
  include ::BootstrapForm::Inputs::RangeField
  include ::BootstrapForm::Inputs::SearchField
  include ::BootstrapForm::Inputs::Select
  include ::BootstrapForm::Inputs::TelephoneField
  include ::BootstrapForm::Inputs::TextArea
  include ::BootstrapForm::Inputs::TextField
  include ::BootstrapForm::Inputs::TimeField
  include ::BootstrapForm::Inputs::TimeSelect
  include ::BootstrapForm::Inputs::TimeZoneSelect
  include ::BootstrapForm::Inputs::UrlField
  include ::BootstrapForm::Inputs::WeekField
  def acts_like_form_tag(); end

  def add_default_form_attributes_and_form_inline(options); end

  def capture(*args, &block); end

  def check_box(name, options=T.unsafe(nil), checked_value=T.unsafe(nil), unchecked_value=T.unsafe(nil), &block); end

  def check_box_with_bootstrap(name, options=T.unsafe(nil), checked_value=T.unsafe(nil), unchecked_value=T.unsafe(nil), &block); end

  def check_box_without_bootstrap(method, options=T.unsafe(nil), checked_value=T.unsafe(nil), unchecked_value=T.unsafe(nil)); end

  def collection_check_boxes(*args); end

  def collection_check_boxes_with_bootstrap(*args); end

  def collection_check_boxes_without_bootstrap(method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def collection_radio_buttons(*args); end

  def collection_radio_buttons_with_bootstrap(*args); end

  def collection_radio_buttons_without_bootstrap(method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def collection_select_with_bootstrap(method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def collection_select_without_bootstrap(method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def color_field(name, options=T.unsafe(nil)); end

  def color_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def color_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def concat(*args, &block); end

  def content_tag(*args, &block); end

  def control_col(); end

  def date_field(name, options=T.unsafe(nil)); end

  def date_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def date_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def date_select(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def date_select_with_bootstrap(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def date_select_without_bootstrap(method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def datetime_field(name, options=T.unsafe(nil)); end

  def datetime_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def datetime_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def datetime_local_field(name, options=T.unsafe(nil)); end

  def datetime_local_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def datetime_local_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def datetime_select(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def datetime_select_with_bootstrap(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def datetime_select_without_bootstrap(method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def email_field(name, options=T.unsafe(nil)); end

  def email_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def email_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def fields_for_with_bootstrap(record_name, record_object=T.unsafe(nil), fields_options=T.unsafe(nil), &block); end

  def fields_for_without_bootstrap(record_name, record_object=T.unsafe(nil), fields_options=T.unsafe(nil), &block); end

  def file_field(name, options=T.unsafe(nil)); end

  def file_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def file_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def grouped_collection_select_with_bootstrap(method, collection, group_method, group_label_method, option_key_method, option_value_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def grouped_collection_select_without_bootstrap(method, collection, group_method, group_label_method, option_key_method, option_value_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def has_error(); end

  def inline_errors(); end

  def label_col(); end

  def label_errors(); end

  def layout(); end

  def month_field(name, options=T.unsafe(nil)); end

  def month_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def month_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def number_field(name, options=T.unsafe(nil)); end

  def number_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def number_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def password_field(name, options=T.unsafe(nil)); end

  def password_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def password_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def phone_field(name, options=T.unsafe(nil)); end

  def phone_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def phone_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def radio_button(name, value, *args); end

  def radio_button_with_bootstrap(name, value, *args); end

  def radio_button_without_bootstrap(method, tag_value, options=T.unsafe(nil)); end

  def range_field(name, options=T.unsafe(nil)); end

  def range_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def range_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def search_field(name, options=T.unsafe(nil)); end

  def search_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def search_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def select_with_bootstrap(method, choices=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def select_without_bootstrap(method, choices=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def telephone_field(name, options=T.unsafe(nil)); end

  def telephone_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def telephone_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def text_area(name, options=T.unsafe(nil)); end

  def text_area_with_bootstrap(name, options=T.unsafe(nil)); end

  def text_area_without_bootstrap(method, options=T.unsafe(nil)); end

  def text_field(name, options=T.unsafe(nil)); end

  def text_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def text_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def time_field(name, options=T.unsafe(nil)); end

  def time_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def time_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def time_select(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_select_with_bootstrap(name, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_select_without_bootstrap(method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_zone_select_with_bootstrap(method, priority_zones=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_zone_select_without_bootstrap(method, priority_zones=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def url_field(name, options=T.unsafe(nil)); end

  def url_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def url_field_without_bootstrap(method, options=T.unsafe(nil)); end

  def week_field(name, options=T.unsafe(nil)); end

  def week_field_with_bootstrap(name, options=T.unsafe(nil)); end

  def week_field_without_bootstrap(method, options=T.unsafe(nil)); end
end

class BootstrapForm::FormBuilder
end

module BootstrapForm::FormGroup
  def form_group(*args, &block); end
end

module BootstrapForm::FormGroup
  extend ::ActiveSupport::Concern
end

module BootstrapForm::FormGroupBuilder
end

module BootstrapForm::FormGroupBuilder
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Helpers
end

module BootstrapForm::Helpers::Bootstrap
  def alert_message(title, options=T.unsafe(nil)); end

  def button(value=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def custom_control(*args, &block); end

  def error_summary(); end

  def errors_on(name, options=T.unsafe(nil)); end

  def input_group_content(content); end

  def input_with_error(name, &block); end

  def prepend_and_append_input(name, options, &block); end

  def primary(name=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def static_class(); end

  def static_control(*args); end

  def submit(name=T.unsafe(nil), options=T.unsafe(nil)); end
end

module BootstrapForm::Helpers::Bootstrap
end

module BootstrapForm::Helpers
  extend ::ActiveSupport::Autoload
end

module BootstrapForm::Inputs
end

module BootstrapForm::Inputs::Base
end

module BootstrapForm::Inputs::Base
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::CheckBox
end

module BootstrapForm::Inputs::CheckBox
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::CollectionCheckBoxes
end

module BootstrapForm::Inputs::CollectionCheckBoxes
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::CollectionRadioButtons
end

module BootstrapForm::Inputs::CollectionRadioButtons
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::CollectionSelect
end

module BootstrapForm::Inputs::CollectionSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::ColorField
end

module BootstrapForm::Inputs::ColorField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::DateField
end

module BootstrapForm::Inputs::DateField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::DateSelect
end

module BootstrapForm::Inputs::DateSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::DatetimeField
end

module BootstrapForm::Inputs::DatetimeField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::DatetimeLocalField
end

module BootstrapForm::Inputs::DatetimeLocalField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::DatetimeSelect
end

module BootstrapForm::Inputs::DatetimeSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::EmailField
end

module BootstrapForm::Inputs::EmailField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::FileField
end

module BootstrapForm::Inputs::FileField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::GroupedCollectionSelect
end

module BootstrapForm::Inputs::GroupedCollectionSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::InputsCollection
end

module BootstrapForm::Inputs::InputsCollection
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::MonthField
end

module BootstrapForm::Inputs::MonthField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::NumberField
end

module BootstrapForm::Inputs::NumberField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::PasswordField
end

module BootstrapForm::Inputs::PasswordField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::PhoneField
end

module BootstrapForm::Inputs::PhoneField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::RadioButton
end

module BootstrapForm::Inputs::RadioButton
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::RangeField
end

module BootstrapForm::Inputs::RangeField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::SearchField
end

module BootstrapForm::Inputs::SearchField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::Select
end

module BootstrapForm::Inputs::Select
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TelephoneField
end

module BootstrapForm::Inputs::TelephoneField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TextArea
end

module BootstrapForm::Inputs::TextArea
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TextField
end

module BootstrapForm::Inputs::TextField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TimeField
end

module BootstrapForm::Inputs::TimeField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TimeSelect
end

module BootstrapForm::Inputs::TimeSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::TimeZoneSelect
end

module BootstrapForm::Inputs::TimeZoneSelect
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::UrlField
end

module BootstrapForm::Inputs::UrlField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs::WeekField
end

module BootstrapForm::Inputs::WeekField
  extend ::ActiveSupport::Concern
end

module BootstrapForm::Inputs
  extend ::ActiveSupport::Autoload
end

module Bourbon
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bourbon::Generator
  def install(); end

  def update(); end

  def version(); end
end

module Brakeman
  CONFIG_FILES = ::T.let(nil, ::T.untyped)
  Empty_Ignore_Note_Exit_Code = ::T.let(nil, ::T.untyped)
  Errors_Found_Exit_Code = ::T.let(nil, ::T.untyped)
  Missing_Checks_Exit_Code = ::T.let(nil, ::T.untyped)
  No_App_Found_Exit_Code = ::T.let(nil, ::T.untyped)
  Not_Latest_Version_Exit_Code = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
  Warnings_Found_Exit_Code = ::T.let(nil, ::T.untyped)
end

class BuildAlertService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Bundler::Deployment
end

class Bundler::Deployment
  def self.define_task(context, task_method=T.unsafe(nil), opts=T.unsafe(nil)); end
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::FeatureFlag
  def github_https?(); end

  def global_path_appends_ruby_scope?(); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_code(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def generate_bundler_executable_stubs(spec, options=T.unsafe(nil)); end

  def generate_standalone_bundler_executable_stubs(spec); end

  def initialize(root, definition); end

  def post_install_messages(); end

  def run(options); end
end

class Bundler::Installer
  def self.ambiguous_gems(); end

  def self.ambiguous_gems=(ambiguous_gems); end

  def self.install(root, definition, options=T.unsafe(nil)); end
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*_); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubygemsIntegration::MoreFuture
  def backport_ext_builder_monitor(); end
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*_); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

class CSV
  def close(*args, &block); end

  def close_read(*args, &block); end

  def close_write(*args, &block); end

  def closed?(*args, &block); end

  def external_encoding(*args, &block); end

  def fcntl(*args, &block); end

  def fileno(*args, &block); end

  def flush(*args, &block); end

  def fsync(*args, &block); end

  def internal_encoding(*args, &block); end

  def isatty(*args, &block); end

  def pid(*args, &block); end

  def pos(*args, &block); end

  def pos=(*args, &block); end

  def reopen(*args, &block); end

  def seek(*args, &block); end

  def string(*args, &block); end

  def sync(*args, &block); end

  def sync=(*args, &block); end

  def tell(*args, &block); end

  def truncate(*args, &block); end

  def tty?(*args, &block); end
  ConverterEncoding = ::T.let(nil, ::T.untyped)
  Converters = ::T.let(nil, ::T.untyped)
  DateMatcher = ::T.let(nil, ::T.untyped)
  DateTimeMatcher = ::T.let(nil, ::T.untyped)
  HeaderConverters = ::T.let(nil, ::T.untyped)
end

class CSV::FieldInfo
  def header(); end

  def header=(_); end

  def index(); end

  def index=(_); end

  def line(); end

  def line=(_); end
end

class CSV::FieldInfo
  def self.[](*_); end

  def self.members(); end
end

class CSV::FieldsConverter
  include ::Enumerable
  def add_converter(name=T.unsafe(nil), &converter); end

  def convert(fields, headers, lineno); end

  def each(&block); end

  def empty?(); end

  def initialize(options=T.unsafe(nil)); end
end

class CSV::FieldsConverter
end

class CSV::MalformedCSVError
  def initialize(message, line_number); end

  def line_number(); end

  def lineno(); end
end

class CSV::Parser
  def column_separator(); end

  def field_size_limit(); end

  def header_row?(); end

  def headers(); end

  def initialize(input, options); end

  def liberal_parsing?(); end

  def line(); end

  def lineno(); end

  def parse(&block); end

  def quote_character(); end

  def return_headers?(); end

  def row_separator(); end

  def skip_blanks?(); end

  def skip_lines(); end

  def unconverted_fields?(); end

  def use_headers?(); end
  SCANNER_TEST = ::T.let(nil, ::T.untyped)
end

class CSV::Parser::InputsScanner
  def each_line(row_separator); end

  def eos?(); end

  def initialize(inputs, encoding, chunk_size: T.unsafe(nil)); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def rest(); end

  def scan(pattern); end

  def scan_all(pattern); end
end

class CSV::Parser::InputsScanner
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::Scanner
  def each_line(row_separator); end

  def initialize(*args); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def scan_all(_); end
end

class CSV::Parser::Scanner
end

class CSV::Parser
end

class CSV::Row
  def dig(index_or_header, *indexes); end

  def each_pair(&block); end

  def empty?(*args, &block); end

  def length(*args, &block); end

  def size(*args, &block); end

  def to_ary(*_); end
end

class CSV::Row
  extend ::Forwardable
end

class CSV::Table
  def empty?(*args, &block); end

  def initialize(array_of_rows, headers: T.unsafe(nil)); end

  def length(*args, &block); end

  def size(*args, &block); end

  def table(); end
end

class CSV::Table
  extend ::Forwardable
end

class CSV::Writer
  def <<(row); end

  def headers(); end

  def initialize(output, options); end

  def lineno(); end

  def rewind(); end
end

class CSV::Writer
end

class CSV
  extend ::Forwardable
end

module Capistrano
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Capistrano::Configuration
  include ::Capistrano::Configuration::Variables
  include ::Capistrano::Configuration::Servers
  include ::Capistrano::Configuration::Roles
  include ::Capistrano::Configuration::Namespaces
  include ::Capistrano::Configuration::LogFormatters
  include ::Capistrano::Configuration::Loading
  include ::Capistrano::Configuration::Execution
  include ::Capistrano::Configuration::Connections
  include ::Capistrano::Configuration::Actions::Invocation
  include ::Capistrano::Configuration::Actions::Inspect
end

module Capistrano::Configuration::Namespaces
  DEFAULT_TASK = ::T.let(nil, ::T.untyped)
end

class Capistrano::Logger
  COLORS = ::T.let(nil, ::T.untyped)
  DEBUG = ::T.let(nil, ::T.untyped)
  IMPORTANT = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  MAX_LEVEL = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
end

class Capistrano::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

module Capybara
  VERSION = ::T.let(nil, ::T.untyped)
end

class Capybara::Config
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::DSL
  def accept_alert(*args, &block); end

  def accept_confirm(*args, &block); end

  def accept_prompt(*args, &block); end

  def all(*args, &block); end

  def assert_all_of_selectors(*args, &block); end

  def assert_any_of_selectors(*args, &block); end

  def assert_current_path(*args, &block); end

  def assert_no_current_path(*args, &block); end

  def assert_no_selector(*args, &block); end

  def assert_no_text(*args, &block); end

  def assert_no_title(*args, &block); end

  def assert_none_of_selectors(*args, &block); end

  def assert_selector(*args, &block); end

  def assert_text(*args, &block); end

  def assert_title(*args, &block); end

  def attach_file(*args, &block); end

  def body(*args, &block); end

  def check(*args, &block); end

  def choose(*args, &block); end

  def click_button(*args, &block); end

  def click_link(*args, &block); end

  def click_link_or_button(*args, &block); end

  def click_on(*args, &block); end

  def current_host(*args, &block); end

  def current_path(*args, &block); end

  def current_scope(*args, &block); end

  def current_url(*args, &block); end

  def current_window(*args, &block); end

  def dismiss_confirm(*args, &block); end

  def dismiss_prompt(*args, &block); end

  def evaluate_script(*args, &block); end

  def execute_script(*args, &block); end

  def fill_in(*args, &block); end

  def find(*args, &block); end

  def find_all(*args, &block); end

  def find_button(*args, &block); end

  def find_by_id(*args, &block); end

  def find_field(*args, &block); end

  def find_link(*args, &block); end

  def first(*args, &block); end

  def go_back(*args, &block); end

  def go_forward(*args, &block); end

  def has_button?(*args, &block); end

  def has_checked_field?(*args, &block); end

  def has_content?(*args, &block); end

  def has_css?(*args, &block); end

  def has_current_path?(*args, &block); end

  def has_field?(*args, &block); end

  def has_link?(*args, &block); end

  def has_no_button?(*args, &block); end

  def has_no_checked_field?(*args, &block); end

  def has_no_content?(*args, &block); end

  def has_no_css?(*args, &block); end

  def has_no_current_path?(*args, &block); end

  def has_no_field?(*args, &block); end

  def has_no_link?(*args, &block); end

  def has_no_select?(*args, &block); end

  def has_no_selector?(*args, &block); end

  def has_no_table?(*args, &block); end

  def has_no_text?(*args, &block); end

  def has_no_title?(*args, &block); end

  def has_no_unchecked_field?(*args, &block); end

  def has_no_xpath?(*args, &block); end

  def has_select?(*args, &block); end

  def has_selector?(*args, &block); end

  def has_table?(*args, &block); end

  def has_text?(*args, &block); end

  def has_title?(*args, &block); end

  def has_unchecked_field?(*args, &block); end

  def has_xpath?(*args, &block); end

  def html(*args, &block); end

  def open_new_window(*args, &block); end

  def page(); end

  def query(*args, &block); end

  def refresh(*args, &block); end

  def refute_selector(*args, &block); end

  def reset_session!(*args, &block); end

  def response_headers(*args, &block); end

  def save_and_open_page(*args, &block); end

  def save_and_open_screenshot(*args, &block); end

  def save_page(*args, &block); end

  def save_screenshot(*args, &block); end

  def scroll_by(*args, &block); end

  def scroll_to(*args, &block); end

  def select(*args, &block); end

  def send_keys(*args, &block); end

  def source(*args, &block); end

  def status_code(*args, &block); end

  def switch_to_frame(*args, &block); end

  def switch_to_window(*args, &block); end

  def text(*args, &block); end

  def title(*args, &block); end

  def uncheck(*args, &block); end

  def unselect(*args, &block); end

  def using_session(name_or_session, &block); end

  def using_wait_time(seconds, &block); end

  def visit(*args, &block); end

  def window_opened_by(*args, &block); end

  def windows(*args, &block); end

  def within(*args, &block); end

  def within_element(*args, &block); end

  def within_fieldset(*args, &block); end

  def within_frame(*args, &block); end

  def within_table(*args, &block); end

  def within_window(*args, &block); end
end

module Capybara::DSL
  def self.extended(base); end

  def self.included(base); end
end

module Capybara::Minitest
end

module Capybara::Minitest::Assertions
  def assert_all_of_selectors(*args, &optional_filter_block); end

  def assert_ancestor(*args, &optional_filter_block); end

  def assert_any_of_selectors(*args, &optional_filter_block); end

  def assert_button(*args, &optional_filter_block); end

  def assert_checked_field(*args, &optional_filter_block); end

  def assert_content(*args, **kwargs, &optional_filter_block); end

  def assert_css(*args, &optional_filter_block); end

  def assert_current_path(*args, **kwargs, &optional_filter_block); end

  def assert_field(*args, &optional_filter_block); end

  def assert_link(*args, &optional_filter_block); end

  def assert_matches_css(*args, &optional_filter_block); end

  def assert_matches_selector(*args, &optional_filter_block); end

  def assert_matches_style(*args, &optional_filter_block); end

  def assert_matches_xpath(*args, &optional_filter_block); end

  def assert_no_ancestor(*args, &optional_filter_block); end

  def assert_no_button(*args, &optional_filter_block); end

  def assert_no_checked_field(*args, &optional_filter_block); end

  def assert_no_content(*args, **kwargs, &optional_filter_block); end

  def assert_no_css(*args, &optional_filter_block); end

  def assert_no_current_path(*args, **kwargs, &optional_filter_block); end

  def assert_no_field(*args, &optional_filter_block); end

  def assert_no_link(*args, &optional_filter_block); end

  def assert_no_select(*args, &optional_filter_block); end

  def assert_no_selector(*args, &optional_filter_block); end

  def assert_no_sibling(*args, &optional_filter_block); end

  def assert_no_table(*args, &optional_filter_block); end

  def assert_no_text(*args, **kwargs, &optional_filter_block); end

  def assert_no_title(*args, **kwargs, &optional_filter_block); end

  def assert_no_unchecked_field(*args, &optional_filter_block); end

  def assert_no_xpath(*args, &optional_filter_block); end

  def assert_none_of_selectors(*args, &optional_filter_block); end

  def assert_not_matches_css(*args, &optional_filter_block); end

  def assert_not_matches_selector(*args, &optional_filter_block); end

  def assert_not_matches_xpath(*args, &optional_filter_block); end

  def assert_select(*args, &optional_filter_block); end

  def assert_selector(*args, &optional_filter_block); end

  def assert_sibling(*args, &optional_filter_block); end

  def assert_table(*args, &optional_filter_block); end

  def assert_text(*args, **kwargs, &optional_filter_block); end

  def assert_title(*args, **kwargs, &optional_filter_block); end

  def assert_unchecked_field(*args, &optional_filter_block); end

  def assert_xpath(*args, &optional_filter_block); end

  def refute_ancestor(*args, &optional_filter_block); end

  def refute_button(*args, &optional_filter_block); end

  def refute_checked_field(*args, &optional_filter_block); end

  def refute_content(*args, **kwargs, &optional_filter_block); end

  def refute_css(*args, &optional_filter_block); end

  def refute_current_path(*args, **kwargs, &optional_filter_block); end

  def refute_field(*args, &optional_filter_block); end

  def refute_link(*args, &optional_filter_block); end

  def refute_matches_css(*args, &optional_filter_block); end

  def refute_matches_selector(*args, &optional_filter_block); end

  def refute_matches_xpath(*args, &optional_filter_block); end

  def refute_select(*args, &optional_filter_block); end

  def refute_selector(*args, &optional_filter_block); end

  def refute_sibling(*args, &optional_filter_block); end

  def refute_table(*args, &optional_filter_block); end

  def refute_text(*args, **kwargs, &optional_filter_block); end

  def refute_title(*args, **kwargs, &optional_filter_block); end

  def refute_unchecked_field(*args, &optional_filter_block); end

  def refute_xpath(*args, &optional_filter_block); end
end

module Capybara::Minitest::Assertions
end

module Capybara::Minitest
end

module Capybara::Node::Actions
  CAPTURE_FILE_ELEMENT_SCRIPT = ::T.let(nil, ::T.untyped)
  DATALIST_OPTIONS_SCRIPT = ::T.let(nil, ::T.untyped)
  RESET_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
  UPDATE_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Element
  STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Simple
  VISIBILITY_XPATH = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::BaseQuery
  COUNT_KEYS = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::SelectorQuery
  SPATIAL_KEYS = ::T.let(nil, ::T.untyped)
  VALID_KEYS = ::T.let(nil, ::T.untyped)
  VALID_MATCH = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::Node
  BLOCK_ELEMENTS = ::T.let(nil, ::T.untyped)
  DISABLED_BY_FIELDSET_XPATH = ::T.let(nil, ::T.untyped)
  OPTION_OWNER_XPATH = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector::CSS
  ESCAPE = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::ChromeLogs
  COMMANDS = ::T.let(nil, ::T.untyped)
  LOG_MSG = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Driver
  CAPS_VERSION = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  SPECIAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Node
  GET_XPATH_SCRIPT = ::T.let(nil, ::T.untyped)
  OBSCURED_OR_OFFSET_SCRIPT = ::T.let(nil, ::T.untyped)
  RAPID_APPEND_TEXT = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Node::Html5Drag
  ATTACH_FILE = ::T.let(nil, ::T.untyped)
  DROP_FILE = ::T.let(nil, ::T.untyped)
  DROP_STRING = ::T.let(nil, ::T.untyped)
  HTML5_DRAG_DROP_SCRIPT = ::T.let(nil, ::T.untyped)
  LEGACY_DRAG_CHECK = ::T.let(nil, ::T.untyped)
  MOUSEDOWN_TRACKER = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::SafariNode
  MODIFIER_KEYS = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Scroll
  SCROLL_POSITIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::AnimationDisabler
  DISABLE_MARKUP_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::Checker
  TRY_HTTPS_ERRORS = ::T.let(nil, ::T.untyped)
end

class Capybara::Session
  DOCUMENT_METHODS = ::T.let(nil, ::T.untyped)
  DSL_METHODS = ::T.let(nil, ::T.untyped)
  MODAL_METHODS = ::T.let(nil, ::T.untyped)
  NODE_METHODS = ::T.let(nil, ::T.untyped)
  SESSION_METHODS = ::T.let(nil, ::T.untyped)
end

class Capybara::SessionConfig
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara
  extend ::Capybara::DSL
end

module ChildProcess
  VERSION = ::T.let(nil, ::T.untyped)
end

class ChildProcess::AbstractProcess
  POLL_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG
  COLOR_GRAYSCALE = ::T.let(nil, ::T.untyped)
  COLOR_GRAYSCALE_ALPHA = ::T.let(nil, ::T.untyped)
  COLOR_INDEXED = ::T.let(nil, ::T.untyped)
  COLOR_TRUECOLOR = ::T.let(nil, ::T.untyped)
  COLOR_TRUECOLOR_ALPHA = ::T.let(nil, ::T.untyped)
  COMPRESSED_CONTENT = ::T.let(nil, ::T.untyped)
  COMPRESSION_DEFAULT = ::T.let(nil, ::T.untyped)
  EXTRA_BYTE = ::T.let(nil, ::T.untyped)
  FILTERING_DEFAULT = ::T.let(nil, ::T.untyped)
  FILTER_AVERAGE = ::T.let(nil, ::T.untyped)
  FILTER_NONE = ::T.let(nil, ::T.untyped)
  FILTER_PAETH = ::T.let(nil, ::T.untyped)
  FILTER_SUB = ::T.let(nil, ::T.untyped)
  FILTER_UP = ::T.let(nil, ::T.untyped)
  INTERLACING_ADAM7 = ::T.let(nil, ::T.untyped)
  INTERLACING_NONE = ::T.let(nil, ::T.untyped)
  UNCOMPRESSED_CONTENT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG::Chunk
  CHUNK_TYPES = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Chunk::Physical
  INCHES_PER_METER = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG::Color
  BLACK = ::T.let(nil, ::T.untyped)
  HEX3_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  HEX6_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  HTML_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  MAX = ::T.let(nil, ::T.untyped)
  MAX_EUCLIDEAN_DISTANCE_RGBA = ::T.let(nil, ::T.untyped)
  PREDEFINED_COLORS = ::T.let(nil, ::T.untyped)
  TRANSPARENT = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Datastream
  SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Dimension
  DIMENSION_REGEXP = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Image
  METADATA_COMPRESSION_TRESHOLD = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Point
  POINT_REGEXP = ::T.let(nil, ::T.untyped)
end

class Class
  def json_creatable?(); end
end

module ClimateControl
  VERSION = ::T.let(nil, ::T.untyped)
end

module CodeRay
  CODERAY_PATH = ::T.let(nil, ::T.untyped)
  TokenKinds = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Encoder
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

class CodeRay::Encoders::HTML
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  FILE_EXTENSION = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_PATTERN = ::T.let(nil, ::T.untyped)
  TOKEN_KIND_TO_INFO = ::T.let(nil, ::T.untyped)
  TRANSPARENT_TOKEN_KINDS = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::HTML::CSS
  CSS_CLASS_PATTERN = ::T.let(nil, ::T.untyped)
end

module CodeRay::Encoders::HTML::Output
  DIV = ::T.let(nil, ::T.untyped)
  PAGE = ::T.let(nil, ::T.untyped)
  SPAN = ::T.let(nil, ::T.untyped)
  TABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Terminal
  TOKEN_COLORS = ::T.let(nil, ::T.untyped)
end

module CodeRay::FileType
  TypeFromExt = ::T.let(nil, ::T.untyped)
  TypeFromName = ::T.let(nil, ::T.untyped)
  TypeFromShebang = ::T.let(nil, ::T.untyped)
end

module CodeRay::PluginHost
  PLUGIN_HOSTS = ::T.let(nil, ::T.untyped)
  PLUGIN_HOSTS_BY_ID = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Java
  CONSTANTS = ::T.let(nil, ::T.untyped)
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MAGIC_VARIABLES = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  STRING_CONTENT_PATTERN = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  UNICODE_ESCAPE = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Java::BuiltinTypes
  List = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Ruby::Patterns
  BINARY = ::T.let(nil, ::T.untyped)
  CHARACTER = ::T.let(nil, ::T.untyped)
  CLASS_VARIABLE = ::T.let(nil, ::T.untyped)
  CONTROL_META_ESCAPE = ::T.let(nil, ::T.untyped)
  DATA = ::T.let(nil, ::T.untyped)
  DECIMAL = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  EXPONENT = ::T.let(nil, ::T.untyped)
  FANCY_STRING_INTERPRETED = ::T.let(nil, ::T.untyped)
  FANCY_STRING_KIND = ::T.let(nil, ::T.untyped)
  FANCY_STRING_START = ::T.let(nil, ::T.untyped)
  FLOAT_OR_INT = ::T.let(nil, ::T.untyped)
  FLOAT_SUFFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_VARIABLE = ::T.let(nil, ::T.untyped)
  HEREDOC_OPEN = ::T.let(nil, ::T.untyped)
  HEXADECIMAL = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  INSTANCE_VARIABLE = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_EXPECTING_VALUE = ::T.let(nil, ::T.untyped)
  KEYWORD_NEW_STATE = ::T.let(nil, ::T.untyped)
  METHOD_AFTER_DOT = ::T.let(nil, ::T.untyped)
  METHOD_NAME = ::T.let(nil, ::T.untyped)
  METHOD_NAME_EX = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OPERATOR = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OR_SYMBOL = ::T.let(nil, ::T.untyped)
  METHOD_SUFFIX = ::T.let(nil, ::T.untyped)
  NUMERIC = ::T.let(nil, ::T.untyped)
  OBJECT_VARIABLE = ::T.let(nil, ::T.untyped)
  OCTAL = ::T.let(nil, ::T.untyped)
  PREDEFINED_CONSTANTS = ::T.let(nil, ::T.untyped)
  PREFIX_VARIABLE = ::T.let(nil, ::T.untyped)
  QUOTE_TO_TYPE = ::T.let(nil, ::T.untyped)
  REGEXP_MODIFIERS = ::T.let(nil, ::T.untyped)
  RUBYDOC = ::T.let(nil, ::T.untyped)
  RUBYDOC_OR_DATA = ::T.let(nil, ::T.untyped)
  SIMPLE_ESCAPE = ::T.let(nil, ::T.untyped)
  SYMBOL = ::T.let(nil, ::T.untyped)
  VALUE_FOLLOWS = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Ruby::StringState
  CLOSING_PAREN = ::T.let(nil, ::T.untyped)
  STRING_PATTERN = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Scanner
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  KINDS_NOT_LOC = ::T.let(nil, ::T.untyped)
  SCANNER_STATE_INFO = ::T.let(nil, ::T.untyped)
  SCAN_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

class CodeRay::Styles::Style
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

module Coercible
  EXTRA_CONST_ARGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Coercible::Coercer::Array
  TIME_SEGMENTS = ::T.let(nil, ::T.untyped)
end

class Coercible::Coercer::Decimal
  FLOAT_FORMAT = ::T.let(nil, ::T.untyped)
end

class Coercible::Coercer::Hash
  TIME_SEGMENTS = ::T.let(nil, ::T.untyped)
end

class Coercible::Coercer::Object
  COERCION_METHOD_REGEXP = ::T.let(nil, ::T.untyped)
end

class Coercible::Coercer::Object
  extend ::Coercible::Options
end

class Coercible::Coercer::String
  BOOLEAN_MAP = ::T.let(nil, ::T.untyped)
  EXPONENT_REGEXP = ::T.let(nil, ::T.untyped)
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
  FRACTIONAL_REGEXP = ::T.let(nil, ::T.untyped)
  INTEGER_REGEXP = ::T.let(nil, ::T.untyped)
  NUMERIC_REGEXP = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
end

module Coercible::TypeLookup
  TYPE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Comment
  def after_add_for_reports(); end

  def after_add_for_reports=(val); end

  def after_add_for_reports?(); end

  def after_remove_for_reports(); end

  def after_remove_for_reports=(val); end

  def after_remove_for_reports?(); end

  def autosave_associated_records_for_application(*args); end

  def autosave_associated_records_for_reports(*args); end

  def before_add_for_reports(); end

  def before_add_for_reports=(val); end

  def before_add_for_reports?(); end

  def before_remove_for_reports(); end

  def before_remove_for_reports=(val); end

  def before_remove_for_reports?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_reports(*args); end
end

class Comment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Comment::GeneratedRelationMethods
end

class Comment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Comment::GeneratedRelationMethods
end

class Comment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Comment::GeneratedRelationMethods
end

module Comment::GeneratedAssociationMethods
  def report_ids=(ids); end
end

module Comment::GeneratedRelationMethods
  def confirmed(*args, &block); end

  def in_past_week(*args, &block); end

  def visible(*args, &block); end
end

module Comment::GeneratedRelationMethods
end

class Comment
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_reports(); end

  def self.after_add_for_reports=(val); end

  def self.after_add_for_reports?(); end

  def self.after_remove_for_reports(); end

  def self.after_remove_for_reports=(val); end

  def self.after_remove_for_reports?(); end

  def self.before_add_for_reports(); end

  def self.before_add_for_reports=(val); end

  def self.before_add_for_reports?(); end

  def self.before_remove_for_reports(); end

  def self.before_remove_for_reports=(val); end

  def self.before_remove_for_reports?(); end
end

class CommentMailer
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class CommentsController::ConfirmedParams
  def self.inherited(s); end
end

class CommentsController::IndexParams
  def self.inherited(s); end
end

class CommentsController::PerWeekParams
  def self.inherited(s); end
end

module Compass
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_DETAILS = ::T.let(nil, ::T.untyped)
  VERSION_NAME = ::T.let(nil, ::T.untyped)
end

module Compass::AppIntegration::Helpers
  DEAFULT_PROJECT_TYPES = ::T.let(nil, ::T.untyped)
end

module Compass::Blueprint
  VERSION = ::T.let(nil, ::T.untyped)
end

module Compass::BrowserSupport
  ASPECTS = ::T.let(nil, ::T.untyped)
  SIMPLE_FUNCTIONS = ::T.let(nil, ::T.untyped)
end

module Compass::Configuration
  ARRAY_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ARRAY_ATTRIBUTE_OPTIONS = ::T.let(nil, ::T.untyped)
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  RUNTIME_READONLY_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module Compass::Configuration::Helpers
  KNOWN_CONFIG_LOCATIONS = ::T.let(nil, ::T.untyped)
end

module Compass::Configuration::Paths
  TRAILING_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module Compass::Core
  VERSION = ::T.let(nil, ::T.untyped)
end

class Compass::Core::CanIUse
  ALTERNATE_VERSIONS = ::T.let(nil, ::T.untyped)
  CAN_I_USE_NAMES = ::T.let(nil, ::T.untyped)
  CAPABILITY_MATCHERS = ::T.let(nil, ::T.untyped)
  DATA_FEATURE_FILES = ::T.let(nil, ::T.untyped)
  DATA_FILE_NAME = ::T.let(nil, ::T.untyped)
  PUBLIC_BROWSER_NAMES = ::T.let(nil, ::T.untyped)
  SPEC_VERSION_MATCHERS = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Configuration
  OPTION_TRANSFORMER = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Constants
  POSITIONS = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::CrossBrowserSupport
  CAPABILITY_OPTION_KEYS = ::T.let(nil, ::T.untyped)
  CAPABILITY_OPTION_UNBOXER = ::T.let(nil, ::T.untyped)
end

class Compass::Core::SassExtensions::Functions::CrossBrowserSupport::CSS2FallbackValue
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Display
  DEFAULT_DISPLAY = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Env
  DEFAULT_DATE = ::T.let(nil, ::T.untyped)
  DEFAULT_TIME = ::T.let(nil, ::T.untyped)
  NOT_ABSOLUTE = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::FontFiles
  FONT_TYPES = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::GradientSupport
  GRADIENT_ASPECTS = ::T.let(nil, ::T.untyped)
end

class Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter
  BOTTOM = ::T.let(nil, ::T.untyped)
  DIR_KEYWORDS_TO_ANGLE = ::T.let(nil, ::T.untyped)
  E = ::T.let(nil, ::T.untyped)
  LEFT = ::T.let(nil, ::T.untyped)
  PI = ::T.let(nil, ::T.untyped)
  RIGHT = ::T.let(nil, ::T.untyped)
  TOP = ::T.let(nil, ::T.untyped)
end

class Compass::Core::SassExtensions::Functions::GradientSupport::ColorStop
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::GradientSupport::Functions
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::GradientSupport::Gradient
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

class Compass::Core::SassExtensions::Functions::GradientSupport::LinearGradient
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
  POSITIONS = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

class Compass::Core::SassExtensions::Functions::GradientSupport::RadialGradient
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
  POSITIONS = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::ImageSize
  KNOWN_TYPES = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Math
  E = ::T.let(nil, ::T.untyped)
  PI = ::T.let(nil, ::T.untyped)
end

module Compass::Core::SassExtensions::Functions::Selectors
  COMMA_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module Compass::Frameworks
  ALL = ::T.let(nil, ::T.untyped)
end

module Compass::ImportOnce
  VERSION = ::T.let(nil, ::T.untyped)
end

class Compass::Logger
  ACTION_CAN_BE_QUIET = ::T.let(nil, ::T.untyped)
  ACTION_COLORS = ::T.let(nil, ::T.untyped)
  COLORS = ::T.let(nil, ::T.untyped)
  DEFAULT_ACTIONS = ::T.let(nil, ::T.untyped)
end

class Compass::NullLogger
  ACTION_CAN_BE_QUIET = ::T.let(nil, ::T.untyped)
  ACTION_COLORS = ::T.let(nil, ::T.untyped)
  COLORS = ::T.let(nil, ::T.untyped)
  DEFAULT_ACTIONS = ::T.let(nil, ::T.untyped)
end

module Compass::SassExtensions::Functions::Sprites
  BOOL_FALSE = ::T.let(nil, ::T.untyped)
  IDENTIFIER_RX = ::T.let(nil, ::T.untyped)
  VALID_SELECTORS = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Compass::SassExtensions::Sprites::Image
  ACTIVE = ::T.let(nil, ::T.untyped)
  FOCUS = ::T.let(nil, ::T.untyped)
  HOVER = ::T.let(nil, ::T.untyped)
  NO_REPEAT = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  REPEAT_X = ::T.let(nil, ::T.untyped)
  REPEAT_Y = ::T.let(nil, ::T.untyped)
  TARGET = ::T.let(nil, ::T.untyped)
  VALID_REPEATS = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

module Compass::SassExtensions::Sprites::ImageMethods
  SEPERATORS = ::T.let(nil, ::T.untyped)
end

module Compass::SassExtensions::Sprites::LayoutMethods
  DIAGONAL = ::T.let(nil, ::T.untyped)
  HORIZONTAL = ::T.let(nil, ::T.untyped)
  SMART = ::T.let(nil, ::T.untyped)
  VERTICAL = ::T.let(nil, ::T.untyped)
end

class Compass::SassExtensions::Sprites::SpriteMap
  DIAGONAL = ::T.let(nil, ::T.untyped)
  HORIZONTAL = ::T.let(nil, ::T.untyped)
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
  SEPERATORS = ::T.let(nil, ::T.untyped)
  SMART = ::T.let(nil, ::T.untyped)
  SPRITE_VERSION = ::T.let(nil, ::T.untyped)
  VALID_UNIT = ::T.let(nil, ::T.untyped)
  VERTICAL = ::T.let(nil, ::T.untyped)
end

module Compass::SassExtensions::Sprites::SpriteMethods
  SPRITE_VERSION = ::T.let(nil, ::T.untyped)
end

class Compass::SpriteImporter
  CONTENT_TEMPLATE = ::T.let(nil, ::T.untyped)
  CONTENT_TEMPLATE_FILE = ::T.let(nil, ::T.untyped)
  SPRITE_IMPORTER_REGEX = ::T.let(nil, ::T.untyped)
  TEMPLATE_FOLDER = ::T.let(nil, ::T.untyped)
  VAILD_FILE_NAME = ::T.let(nil, ::T.untyped)
  VALID_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Compass::Sprites::Binding
  InspectKey = ::T.let(nil, ::T.untyped)
end

module CompassRails
  RAILS_31 = ::T.let(nil, ::T.untyped)
  RAILS_32 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_SYNCHRONOUS = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class ConfirmationMailer
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ConnectionPool
  DEFAULTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ConnectionPool::Wrapper
  METHODS = ::T.let(nil, ::T.untyped)
end

class CountedFile
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module CounterCulture
  VERSION = ::T.let(nil, ::T.untyped)
end

class CounterCulture::Counter
  ACTIVE_RECORD_VERSION = ::T.let(nil, ::T.untyped)
  CONFIG_OPTIONS = ::T.let(nil, ::T.untyped)
end

class CounterCulture::Reconciler
  ACTIVE_RECORD_VERSION = ::T.let(nil, ::T.untyped)
end

class Crack::JSON
  DATE_REGEX = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

class CreateOrUpdateApplicationService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class CuttlefishController::DeliveryEventParams
  def self.inherited(s); end
end

class CuttlefishController::EmailParams
  def self.inherited(s); end
end

class CuttlefishController::EventParams
  def self.inherited(s); end
end

class CuttlefishController::TestEventParams
  def self.inherited(s); end
end

class DRb::DRbArray
  def _dump(lv); end
end

class DRb::DRbArray
  def self._load(s); end
end

class DRb::DRbConn
  def alive?(); end

  def close(); end

  def initialize(remote_uri); end

  def send_message(ref, msg_id, arg, block); end

  def uri(); end
end

class DRb::DRbConn
  def self.open(remote_uri); end
end

class DRb::DRbMessage
  def dump(obj, error=T.unsafe(nil)); end

  def initialize(config); end

  def load(soc); end

  def recv_reply(stream); end

  def recv_request(stream); end

  def send_reply(stream, succ, result); end

  def send_request(stream, ref, msg_id, arg, b); end
end

class DRb::DRbObject
  def ==(other); end

  def eql?(other); end

  def initialize(obj, uri=T.unsafe(nil)); end
end

class DRb::DRbObject
  def self.prepare_backtrace(uri, result); end

  def self.with_friend(uri); end
end

module DRb::DRbProtocol
  def self.auto_load(uri); end
end

class DRb::DRbRemoteError
  def initialize(error); end
end

class DRb::DRbServer
  def initialize(uri=T.unsafe(nil), front=T.unsafe(nil), config_or_acl=T.unsafe(nil)); end

  def safe_level(); end
end

class DRb::DRbServer::InvokeMethod
  include ::DRb::DRbServer::InvokeMethod18Mixin
  def initialize(drb_server, client); end

  def perform(); end
end

class DRb::DRbServer::InvokeMethod
end

module DRb::DRbServer::InvokeMethod18Mixin
  def block_yield(x); end

  def perform_with_block(); end
end

module DRb::DRbServer::InvokeMethod18Mixin
end

class DRb::DRbServer
  def self.default_safe_level(level); end

  def self.make_config(hash=T.unsafe(nil)); end
end

class DRb::DRbTCPSocket
  def accept(); end

  def alive?(); end

  def close(); end

  def initialize(uri, soc, config=T.unsafe(nil)); end

  def peeraddr(); end

  def recv_reply(); end

  def recv_request(); end

  def send_reply(succ, result); end

  def send_request(ref, msg_id, arg, b); end

  def set_sockopt(soc); end

  def shutdown(); end

  def stream(); end

  def uri(); end
end

class DRb::DRbTCPSocket
  def self.getservername(); end

  def self.open(uri, config); end

  def self.open_server(uri, config); end

  def self.open_server_inaddr_any(host, port); end

  def self.parse_uri(uri); end

  def self.uri_option(uri, config); end
end

class DRb::DRbURIOption
  def ==(other); end

  def eql?(other); end

  def initialize(option); end

  def option(); end
end

class DRb::DRbURIOption
end

module DRb::DRbUndumped
  def _dump(dummy); end
end

class DRb::DRbUnknown
  def _dump(lv); end
end

class DRb::DRbUnknown
  def self._load(s); end
end

class DRb::DRbUnknownError
  def _dump(lv); end

  def initialize(unknown); end
end

class DRb::DRbUnknownError
  def self._load(s); end
end

module DRb
  def self.mutex(); end
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

module Daemons
  VERSION = ::T.let(nil, ::T.untyped)
end

class Daemons::Application
  SIGNAL = ::T.let(nil, ::T.untyped)
end

class Daemons::Controller
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Daemons::PidFile
  DEFAULT_PID_DELIMITER = ::T.let(nil, ::T.untyped)
end

module Dalli
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dalli::Client
  include ::NewRelic::Agent::Instrumentation::Memcache::Tracer
  CACHE_NILS = ::T.let(nil, ::T.untyped)
end

class Dalli::Ring
  include ::NewRelic::Agent::Instrumentation::Memcache::Tracer
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Dalli::Server
  include ::NewRelic::Agent::Instrumentation::Memcache::Tracer
  CAS_HEADER = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_WEIGHT = ::T.let(nil, ::T.untyped)
  FLAG_COMPRESSED = ::T.let(nil, ::T.untyped)
  FLAG_SERIALIZED = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  KV_HEADER = ::T.let(nil, ::T.untyped)
  MAX_ACCEPTABLE_EXPIRATION_INTERVAL = ::T.let(nil, ::T.untyped)
  NORMAL_HEADER = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OP_FORMAT = ::T.let(nil, ::T.untyped)
  REQUEST = ::T.let(nil, ::T.untyped)
  RESPONSE = ::T.let(nil, ::T.untyped)
  RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class DependencyDetection::Dependent
  AUTO_CONFIG_VALUE = ::T.let(nil, ::T.untyped)
  VALID_CONFIG_VALUES = ::T.let(nil, ::T.untyped)
end

module Devise
  ALL = ::T.let(nil, ::T.untyped)
  CONTROLLERS = ::T.let(nil, ::T.untyped)
  NO_INPUT = ::T.let(nil, ::T.untyped)
  ROUTES = ::T.let(nil, ::T.untyped)
  STRATEGIES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  URL_HELPERS = ::T.let(nil, ::T.untyped)
end

class Devise::ConfirmationsController
  def after_confirmation_path_for(resource_name, resource); end

  def after_resending_confirmation_instructions_path_for(resource_name); end

  def create(); end

  def new(); end

  def show(); end
end

class Devise::ConfirmationsController
end

module Devise::Controllers::Helpers
  def authenticate_user!(opts=T.unsafe(nil)); end

  def current_user(); end

  def user_session(); end

  def user_signed_in?(); end
end

module Devise::Controllers::Rememberable
  def forget_cookie_values(resource); end

  def forget_me(resource); end

  def remember_cookie_values(resource); end

  def remember_key(resource, scope); end

  def remember_me(resource); end

  def remember_me_is_active?(resource); end
end

module Devise::Controllers::Rememberable
  def self.cookie_values(); end
end

module Devise::Controllers::ScopedViews
end

module Devise::Controllers::ScopedViews
  extend ::ActiveSupport::Concern
end

Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

module Devise::Encryptor
end

module Devise::Encryptor
  def self.compare(klass, hashed_password, password); end

  def self.digest(klass, password); end
end

class Devise::Hooks::Proxy
  include ::Devise::Controllers::Rememberable
  include ::Devise::Controllers::SignInOut
  def cookies(*args, &block); end

  def initialize(warden); end

  def request(*args, &block); end

  def session(); end

  def warden(); end
end

class Devise::Hooks::Proxy
end

module Devise::Mailers::Helpers
  def devise_mail(record, action, opts=T.unsafe(nil), &block); end

  def devise_mapping(); end

  def headers_for(action, opts); end

  def initialize_from_record(record); end

  def mailer_from(mapping); end

  def mailer_reply_to(mapping); end

  def mailer_sender(mapping, sender=T.unsafe(nil)); end

  def resource(); end

  def scope_name(); end

  def subject_for(key); end

  def template_paths(); end
end

module Devise::Mailers::Helpers
  extend ::ActiveSupport::Concern
end

module Devise::Models::Authenticatable
  UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Lockable
  def access_locked?(); end

  def active_for_authentication?(); end

  def attempts_exceeded?(); end

  def if_access_locked(); end

  def inactive_message(); end

  def increment_failed_attempts(); end

  def last_attempt?(); end

  def lock_access!(opts=T.unsafe(nil)); end

  def lock_expired?(); end

  def lock_strategy_enabled?(*args, &block); end

  def resend_unlock_instructions(); end

  def reset_failed_attempts!(); end

  def send_unlock_instructions(); end

  def unauthenticated_message(); end

  def unlock_access!(); end

  def unlock_strategy_enabled?(*args, &block); end

  def valid_for_authentication?(); end
end

module Devise::Models::Lockable::ClassMethods
  def last_attempt_warning(); end

  def last_attempt_warning=(value); end

  def lock_strategy(); end

  def lock_strategy=(value); end

  def lock_strategy_enabled?(strategy); end

  def maximum_attempts(); end

  def maximum_attempts=(value); end

  def send_unlock_instructions(attributes=T.unsafe(nil)); end

  def unlock_access_by_token(unlock_token); end

  def unlock_in(); end

  def unlock_in=(value); end

  def unlock_keys(); end

  def unlock_keys=(value); end

  def unlock_strategy(); end

  def unlock_strategy=(value); end

  def unlock_strategy_enabled?(strategy); end
  BOTH_STRATEGIES = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Lockable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Lockable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Timeoutable
  def timedout?(last_access); end

  def timeout_in(); end
end

module Devise::Models::Timeoutable::ClassMethods
  def timeout_in(); end

  def timeout_in=(value); end
end

module Devise::Models::Timeoutable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Timeoutable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Validatable
  VALIDATIONS = ::T.let(nil, ::T.untyped)
end

class Devise::ParameterFilter
  def filter(conditions); end

  def filtered_hash_by_method_for_given_keys(conditions, method, condition_keys); end

  def initialize(case_insensitive_keys, strip_whitespace_keys); end

  def stringify_params(conditions); end
end

class Devise::ParameterFilter
end

class Devise::ParameterSanitizer
  def initialize(resource_class, resource_name, params); end

  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end

  def sanitize(action); end
  DEFAULT_PERMITTED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Devise::ParameterSanitizer
end

class Devise::PasswordsController
  def after_resetting_password_path_for(resource); end

  def after_sending_reset_password_instructions_path_for(resource_name); end

  def assert_reset_token_passed(); end

  def create(); end

  def edit(); end

  def new(); end

  def unlockable?(resource); end

  def update(); end
end

class Devise::PasswordsController
end

class Devise::RegistrationsController
  def account_update_params(); end

  def after_inactive_sign_up_path_for(resource); end

  def after_sign_up_path_for(resource); end

  def after_update_path_for(resource); end

  def authenticate_scope!(); end

  def build_resource(hash=T.unsafe(nil)); end

  def cancel(); end

  def create(); end

  def destroy(); end

  def edit(); end

  def new(); end

  def sign_up(resource_name, resource); end

  def sign_up_params(); end

  def update(); end

  def update_needs_confirmation?(resource, previous); end

  def update_resource(resource, params); end
end

class Devise::RegistrationsController
end

class Devise::SecretKeyFinder
  def find(); end

  def initialize(application); end
end

class Devise::SecretKeyFinder
end

class Devise::SessionsController
  def auth_options(); end

  def create(); end

  def destroy(); end

  def new(); end

  def serialize_options(resource); end

  def sign_in_params(); end
end

class Devise::SessionsController
end

module Devise::Test::ControllerHelpers
  def _catch_warden(&block); end

  def _process_unauthenticated(env, options=T.unsafe(nil)); end

  def process(*_); end

  def setup_controller_for_warden(); end

  def sign_in(resource, deprecated=T.unsafe(nil), scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def warden(); end
end

module Devise::Test::ControllerHelpers
  extend ::ActiveSupport::Concern
end

module Devise::Test::IntegrationHelpers
  def setup_integration_for_devise(); end

  def sign_in(resource, scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def teardown_integration_for_devise(); end
end

module Devise::Test::IntegrationHelpers
  def self.included(base); end
end

module Devise::TestHelpers
end

module Devise::TestHelpers
  def self.included(base); end
end

class Devise::TimeInflector
  include ::ActionView::Helpers::DateHelper
end

class Devise::TimeInflector
  def self.instance(); end

  def self.time_ago_in_words(*args, &block); end
end

class Devise::UnlocksController
  def after_sending_unlock_instructions_path_for(resource); end

  def after_unlock_path_for(resource); end

  def create(); end

  def new(); end

  def show(); end
end

class Devise::UnlocksController
end

class DeviseController
  include ::Devise::Controllers::ScopedViews
  def assert_is_devise_resource!(); end

  def clean_up_passwords(object); end

  def devise_i18n_options(options); end

  def devise_mapping(); end

  def find_message(kind, options=T.unsafe(nil)); end

  def navigational_formats(); end

  def require_no_authentication(); end

  def resource(); end

  def resource=(new_resource); end

  def resource_class(); end

  def resource_name(); end

  def resource_params(); end

  def respond_with_navigational(*args, &block); end

  def scope_name(); end

  def set_flash_message(key, kind, options=T.unsafe(nil)); end

  def set_flash_message!(key, kind, options=T.unsafe(nil)); end

  def set_minimum_password_length(); end

  def signed_in_resource(); end

  def successfully_sent?(resource); end

  def translation_scope(); end

  def unknown_action!(msg); end
end

class DeviseController
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.formatter(); end

  def self.formatter=(formatter); end
end

module Diff::LCS
  VERSION = ::T.let(nil, ::T.untyped)
end

Diff::LCS::BalancedCallbacks = Diff::LCS::DefaultCallbacks

class Diff::LCS::Change
  VALID_ACTIONS = ::T.let(nil, ::T.untyped)
end

Diff::LCS::Change::IntClass = Integer

Diff::LCS::SequenceCallbacks = Diff::LCS::DefaultCallbacks

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def children(); end

  def each_child(); end
end

class Dir
  def self.exists?(_); end
end

module Docile
  VERSION = ::T.let(nil, ::T.untyped)
end

module Docile::BacktraceFilter
  FILTER_PATTERN = ::T.let(nil, ::T.untyped)
end

class Docile::FallbackContextProxy
  NON_FALLBACK_METHODS = ::T.let(nil, ::T.untyped)
  NON_PROXIED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  NON_PROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class DomainName
  DOT = ::T.let(nil, ::T.untyped)
  ETLD_DATA = ::T.let(nil, ::T.untyped)
  ETLD_DATA_DATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module DomainName::Punycode
  BASE = ::T.let(nil, ::T.untyped)
  CUTOFF = ::T.let(nil, ::T.untyped)
  DAMP = ::T.let(nil, ::T.untyped)
  DECODE_DIGIT = ::T.let(nil, ::T.untyped)
  DELIMITER = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  ENCODE_DIGIT = ::T.let(nil, ::T.untyped)
  INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  INITIAL_N = ::T.let(nil, ::T.untyped)
  LOBASE = ::T.let(nil, ::T.untyped)
  MAXINT = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  RE_NONBASIC = ::T.let(nil, ::T.untyped)
  SKEW = ::T.let(nil, ::T.untyped)
  TMAX = ::T.let(nil, ::T.untyped)
  TMIN = ::T.let(nil, ::T.untyped)
end

class Dotenv::Parser
  LINE = ::T.let(nil, ::T.untyped)
end

EM = EventMachine

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
end

module Elastic
  ELASTICSEARCH_SERVICE_VERSION = ::T.let(nil, ::T.untyped)
end

module Elasticsearch
  NOT_ELASTICSEARCH_WARNING = ::T.let(nil, ::T.untyped)
  NOT_SUPPORTED_ELASTICSEARCH_WARNING = ::T.let(nil, ::T.untyped)
  SECURITY_PRIVILEGES_VALIDATION_WARNING = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  YOU_KNOW_FOR_SEARCH = ::T.let(nil, ::T.untyped)
end

module Elasticsearch::API
  COMMON_PARAMS = ::T.let(nil, ::T.untyped)
  COMMON_QUERY_PARAMS = ::T.let(nil, ::T.untyped)
  DEFAULT_DOC = ::T.let(nil, ::T.untyped)
  HTTP_DELETE = ::T.let(nil, ::T.untyped)
  HTTP_GET = ::T.let(nil, ::T.untyped)
  HTTP_HEAD = ::T.let(nil, ::T.untyped)
  HTTP_POST = ::T.let(nil, ::T.untyped)
  HTTP_PUT = ::T.let(nil, ::T.untyped)
  UNDERSCORE_ALL = ::T.let(nil, ::T.untyped)
  UNDERSCORE_SEARCH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Elasticsearch::API::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

module Elasticsearch::API::Cat::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Cat::CatClient
  include ::Elasticsearch::API::Cat::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Cluster::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Cluster::ClusterClient
  include ::Elasticsearch::API::Cluster::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

Elasticsearch::API::DEFAULT_SERIALIZER = MultiJson

module Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::DanglingIndices::DanglingIndicesClient
  include ::Elasticsearch::API::DanglingIndices::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Features::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Features::FeaturesClient
  include ::Elasticsearch::API::Features::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Indices::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Indices::IndicesClient
  include ::Elasticsearch::API::Indices::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Ingest::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Ingest::IngestClient
  include ::Elasticsearch::API::Ingest::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Nodes::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Nodes::NodesClient
  include ::Elasticsearch::API::Nodes::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

class Elasticsearch::API::Remote::RemoteClient
  include ::Elasticsearch::API::Remote::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

class Elasticsearch::API::Security::SecurityClient
  include ::Elasticsearch::API::Security::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Shutdown::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Shutdown::ShutdownClient
  include ::Elasticsearch::API::Shutdown::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Snapshot::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Snapshot::SnapshotClient
  include ::Elasticsearch::API::Snapshot::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

module Elasticsearch::API::Tasks::Actions::ParamsRegistry
  PARAMS = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::API::Tasks::TasksClient
  include ::Elasticsearch::API::Tasks::Actions
  include ::Elasticsearch::API::Common::Client::Base
end

class Elasticsearch::Client
  include ::Elasticsearch::API::Shutdown
  include ::Elasticsearch::API::Features
  include ::Elasticsearch::API::DanglingIndices
  include ::Elasticsearch::API::Remote
  include ::Elasticsearch::API::Cat
  include ::Elasticsearch::API::Tasks
  include ::Elasticsearch::API::Snapshot
  include ::Elasticsearch::API::Ingest
  include ::Elasticsearch::API::Indices
  include ::Elasticsearch::API::Nodes
  include ::Elasticsearch::API::Cluster
  include ::Elasticsearch::API::Actions
end

module Elasticsearch::Transport
  VERSION = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::Transport::Client
  DEFAULT_CLOUD_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  DEFAULT_LOGGER = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_TRACER = ::T.let(nil, ::T.untyped)
end

Elasticsearch::Transport::Client::DEFAULT_TRANSPORT_CLASS = Elasticsearch::Transport::Transport::HTTP::Faraday

class Elasticsearch::Transport::Redacted
  SENSITIVE_KEYS = ::T.let(nil, ::T.untyped)
  STRING_REPLACEMENT = ::T.let(nil, ::T.untyped)
end

module Elasticsearch::Transport::Transport
  ERRORS = ::T.let(nil, ::T.untyped)
  HTTP_STATUSES = ::T.let(nil, ::T.untyped)
end

module Elasticsearch::Transport::Transport::Base
  ACCEPT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE_REGEX = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE_STR = ::T.let(nil, ::T.untyped)
  DEFAULT_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_RETRIES = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_PROTOCOL = ::T.let(nil, ::T.untyped)
  DEFAULT_RELOAD_AFTER = ::T.let(nil, ::T.untyped)
  DEFAULT_RESURRECT_AFTER = ::T.let(nil, ::T.untyped)
  GZIP = ::T.let(nil, ::T.untyped)
  GZIP_FIRST_TWO_BYTES = ::T.let(nil, ::T.untyped)
  HEX_STRING_DIRECTIVE = ::T.let(nil, ::T.untyped)
  RUBY_ENCODING = ::T.let(nil, ::T.untyped)
  SANITIZED_PASSWORD = ::T.let(nil, ::T.untyped)
  USER_AGENT_REGEX = ::T.let(nil, ::T.untyped)
  USER_AGENT_STR = ::T.let(nil, ::T.untyped)
end

Elasticsearch::Transport::Transport::Connections::Collection::DEFAULT_SELECTOR = Elasticsearch::Transport::Transport::Connections::Selector::RoundRobin

class Elasticsearch::Transport::Transport::Connections::Connection
  DEFAULT_RESURRECT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Elasticsearch::Transport::Transport::Sniffer
  PROTOCOL = ::T.let(nil, ::T.untyped)
end

class EmailBatch
  include ::EmailBatch::GeneratedAssociationMethods
end

class EmailBatch::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::EmailBatch::GeneratedRelationMethods
end

class EmailBatch::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::EmailBatch::GeneratedRelationMethods
end

class EmailBatch::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::EmailBatch::GeneratedRelationMethods
end

module EmailBatch::GeneratedAssociationMethods
end

module EmailBatch::GeneratedAssociationMethods
end

module EmailBatch::GeneratedRelationMethods
  def in_past_week(*args, &block); end
end

module EmailBatch::GeneratedRelationMethods
end

class EmailBatch
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module EmailFrom
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module EmailSpec::Helpers
  A_TAG_BEGIN_REGEX = ::T.let(nil, ::T.untyped)
  A_TAG_END_REGEX = ::T.let(nil, ::T.untyped)
end

class Encoding
  def _dump(*_); end
end

class Encoding::Converter
  def initialize(*_); end
end

class Encoding
  def self._load(_); end
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def sum(identity=T.unsafe(nil), &block); end
end

class Enumerator
  def +(_); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*_); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Chain
end

class Enumerator::Chain
end

class Enumerator::Generator
  def each(*_, &blk); end

  def initialize(*_); end
end

Errno::EAUTH = Errno::NOERROR

Errno::EBADARCH = Errno::NOERROR

Errno::EBADEXEC = Errno::NOERROR

Errno::EBADMACHO = Errno::NOERROR

Errno::EBADRPC = Errno::NOERROR

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::EDEADLK

Errno::EDEVERR = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

Errno::EFTYPE = Errno::NOERROR

Errno::EIPSEC = Errno::NOERROR

Errno::ELAST = Errno::NOERROR

Errno::ENEEDAUTH = Errno::NOERROR

Errno::ENOATTR = Errno::NOERROR

Errno::ENOPOLICY = Errno::NOERROR

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

Errno::EPROCLIM = Errno::NOERROR

Errno::EPROCUNAVAIL = Errno::NOERROR

Errno::EPROGMISMATCH = Errno::NOERROR

Errno::EPROGUNAVAIL = Errno::NOERROR

Errno::EPWROFF = Errno::NOERROR

Errno::EQFULL = Errno::NOERROR

Errno::ERPCMISMATCH = Errno::NOERROR

Errno::ESHLIBVERS = Errno::NOERROR

module Erubi
  MATCH_METHOD = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  TEXT_END = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def dir=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

module Ethon
  VERSION = ::T.let(nil, ::T.untyped)
end

module Ethon::Curl
  DebugInfoType = ::T.let(nil, ::T.untyped)
  EasyCode = ::T.let(nil, ::T.untyped)
  EasyOption = ::T.let(nil, ::T.untyped)
  FormOption = ::T.let(nil, ::T.untyped)
  GLOBAL_ALL = ::T.let(nil, ::T.untyped)
  GLOBAL_DEFAULT = ::T.let(nil, ::T.untyped)
  GLOBAL_SSL = ::T.let(nil, ::T.untyped)
  GLOBAL_WIN32 = ::T.let(nil, ::T.untyped)
  Info = ::T.let(nil, ::T.untyped)
  InfoType = ::T.let(nil, ::T.untyped)
  MsgCode = ::T.let(nil, ::T.untyped)
  MultiCode = ::T.let(nil, ::T.untyped)
  MultiOption = ::T.let(nil, ::T.untyped)
  VERSION_ASYNCHDNS = ::T.let(nil, ::T.untyped)
  VERSION_CONV = ::T.let(nil, ::T.untyped)
  VERSION_CURLDEBUG = ::T.let(nil, ::T.untyped)
  VERSION_DEBUG = ::T.let(nil, ::T.untyped)
  VERSION_GSSAPI = ::T.let(nil, ::T.untyped)
  VERSION_GSSNEGOTIATE = ::T.let(nil, ::T.untyped)
  VERSION_HTTP2 = ::T.let(nil, ::T.untyped)
  VERSION_IDN = ::T.let(nil, ::T.untyped)
  VERSION_IPV6 = ::T.let(nil, ::T.untyped)
  VERSION_KERBEROS4 = ::T.let(nil, ::T.untyped)
  VERSION_LARGEFILE = ::T.let(nil, ::T.untyped)
  VERSION_LIBZ = ::T.let(nil, ::T.untyped)
  VERSION_NOW = ::T.let(nil, ::T.untyped)
  VERSION_NTLM = ::T.let(nil, ::T.untyped)
  VERSION_NTLM_WB = ::T.let(nil, ::T.untyped)
  VERSION_SPNEGO = ::T.let(nil, ::T.untyped)
  VERSION_SSL = ::T.let(nil, ::T.untyped)
  VERSION_SSPI = ::T.let(nil, ::T.untyped)
  VERSION_TLSAUTH_SRP = ::T.let(nil, ::T.untyped)
end

class Ethon::Curl::FDSet
  FD_SETSIZE = ::T.let(nil, ::T.untyped)
end

module Ethon::Curls::Options
  EASY_OPTIONS = ::T.let(nil, ::T.untyped)
  FOPTION_STRINGS = ::T.let(nil, ::T.untyped)
  FUNCS = ::T.let(nil, ::T.untyped)
  MULTI_OPTIONS = ::T.let(nil, ::T.untyped)
  OPTION_STRINGS = ::T.let(nil, ::T.untyped)
  OPTION_TYPE_BASE = ::T.let(nil, ::T.untyped)
  OPTION_TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class Ethon::Easy::DebugInfo
  MESSAGE_TYPES = ::T.let(nil, ::T.untyped)
end

module Ethon::Easy::Http::Actionable
  QUERY_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Ethon::Easy::Informations
  AVAILABLE_INFORMATIONS = ::T.let(nil, ::T.untyped)
end

class Ethon::Easy::Mirror
  INFORMATIONS_TO_LOG = ::T.let(nil, ::T.untyped)
  INFORMATIONS_TO_MIRROR = ::T.let(nil, ::T.untyped)
end

module Ethon::Multi::Operations
  PERFORMED_MULTI = ::T.let(nil, ::T.untyped)
  STARTED_MULTI = ::T.let(nil, ::T.untyped)
end

module EventMachine
  ConnectionAccepted = ::T.let(nil, ::T.untyped)
  ConnectionCompleted = ::T.let(nil, ::T.untyped)
  ConnectionData = ::T.let(nil, ::T.untyped)
  ConnectionNotifyReadable = ::T.let(nil, ::T.untyped)
  ConnectionNotifyWritable = ::T.let(nil, ::T.untyped)
  ConnectionUnbound = ::T.let(nil, ::T.untyped)
  EM_PROTO_SSLv2 = ::T.let(nil, ::T.untyped)
  EM_PROTO_SSLv3 = ::T.let(nil, ::T.untyped)
  EM_PROTO_TLSv1 = ::T.let(nil, ::T.untyped)
  EM_PROTO_TLSv1_1 = ::T.let(nil, ::T.untyped)
  EM_PROTO_TLSv1_2 = ::T.let(nil, ::T.untyped)
  ERRNOS = ::T.let(nil, ::T.untyped)
  LoopbreakSignalled = ::T.let(nil, ::T.untyped)
  SslHandshakeCompleted = ::T.let(nil, ::T.untyped)
  SslVerify = ::T.let(nil, ::T.untyped)
  TimerFired = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class EventMachine::ConnectionError
end

class EventMachine::ConnectionError
end

class EventMachine::ConnectionNotBound
end

class EventMachine::ConnectionNotBound
end

class EventMachine::DNS::Resolver
  HOSTS_FILE = ::T.let(nil, ::T.untyped)
end

EventMachine::Deferrable::Pool = EventMachine::Pool

class EventMachine::FileStreamer
  BackpressureLevel = ::T.let(nil, ::T.untyped)
  ChunkSize = ::T.let(nil, ::T.untyped)
  MappingThreshold = ::T.let(nil, ::T.untyped)
end

class EventMachine::FileWatch
  Cdeleted = ::T.let(nil, ::T.untyped)
  Cmodified = ::T.let(nil, ::T.untyped)
  Cmoved = ::T.let(nil, ::T.untyped)
end

class EventMachine::InvalidSignature
end

class EventMachine::InvalidSignature
end

class EventMachine::Iterator
  Stop = ::T.let(nil, ::T.untyped)
end

class EventMachine::NoHandlerForAcceptedConnection
end

class EventMachine::NoHandlerForAcceptedConnection
end

EventMachine::P = EventMachine::Protocols

class EventMachine::ProcessWatch
  Cexit = ::T.let(nil, ::T.untyped)
  Cfork = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::HeaderAndContentProtocol
  include ::EventMachine::Protocols::LineText2
  def headers_2_hash(hdrs); end

  def receive_binary_data(text); end

  def receive_line(line); end
  ContentLengthPattern = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::HeaderAndContentProtocol
  def self.headers_2_hash(hdrs); end
end

class EventMachine::Protocols::HttpClient
  include ::EventMachine::Deferrable
  def dispatch_response(); end

  def initialize(); end

  def send_request(args); end
  MaxPostContentLength = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::HttpClient
  def self.request(args=T.unsafe(nil)); end
end

class EventMachine::Protocols::HttpClient2
  include ::EventMachine::Protocols::LineText2
  def get(args); end

  def initialize(); end

  def pop_request(); end

  def post(args); end

  def receive_binary_data(text); end

  def request(args); end

  def set_default_host_header(host, port, ssl); end
end

class EventMachine::Protocols::HttpClient2::Request
  include ::EventMachine::Deferrable
  def content(); end

  def header_lines(); end

  def headers(); end

  def initialize(conn, args); end

  def internal_error(); end

  def receive_chunk_header(ln); end

  def receive_chunk_trailer(ln); end

  def receive_chunked_text(text); end

  def receive_header_line(ln); end

  def receive_line(ln); end

  def receive_sized_text(text); end

  def receive_text(text); end

  def send_request(); end

  def status(); end

  def version(); end
  ChunkedRE = ::T.let(nil, ::T.untyped)
  ClenRE = ::T.let(nil, ::T.untyped)
  ColonRE = ::T.let(nil, ::T.untyped)
  HttpResponseRE = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::HttpClient2::Request
end

class EventMachine::Protocols::HttpClient2
  def self.connect(*args); end
end

class EventMachine::Protocols::LineAndTextProtocol
  def set_binary_mode(size=T.unsafe(nil)); end
  MaxBinaryLength = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::LineAndTextProtocol
end

module EventMachine::Protocols::LineProtocol
  def receive_data(data); end

  def receive_line(line); end
end

module EventMachine::Protocols::LineProtocol
end

module EventMachine::Protocols::LineText2
  def receive_binary_data(data); end

  def receive_data(data); end

  def receive_end_of_binary_data(); end

  def receive_line(ln); end

  def set_binary_mode(size=T.unsafe(nil)); end

  def set_delimiter(delim); end

  def set_line_mode(data=T.unsafe(nil)); end

  def set_text_mode(size=T.unsafe(nil)); end

  def unbind(); end
  MaxBinaryLength = ::T.let(nil, ::T.untyped)
end

module EventMachine::Protocols::LineText2
end

module EventMachine::Protocols::Memcache
  include ::EventMachine::Deferrable
  def connection_completed(); end

  def del(key, expires=T.unsafe(nil), &cb); end

  def delete(key, expires=T.unsafe(nil), &cb); end

  def get(*keys); end

  def get_hash(*keys); end

  def initialize(host, port=T.unsafe(nil)); end

  def process_cmd(line); end

  def receive_data(data); end

  def set(key, val, exptime=T.unsafe(nil), &cb); end

  def unbind(); end
  Cdeleted = ::T.let(nil, ::T.untyped)
  Cdelimiter = ::T.let(nil, ::T.untyped)
  Cempty = ::T.let(nil, ::T.untyped)
  Cend = ::T.let(nil, ::T.untyped)
  Cerror = ::T.let(nil, ::T.untyped)
  Cstored = ::T.let(nil, ::T.untyped)
  Cunknown = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::Memcache::ParserError
end

class EventMachine::Protocols::Memcache::ParserError
end

module EventMachine::Protocols::Memcache
  def self.connect(host=T.unsafe(nil), port=T.unsafe(nil)); end
end

module EventMachine::Protocols::ObjectProtocol
  def receive_data(data); end

  def receive_object(obj); end

  def send_object(obj); end

  def serializer(); end
end

module EventMachine::Protocols::ObjectProtocol
end

module EventMachine::Protocols::SASLauth
  def post_init(); end

  def receive_data(data); end

  def validate(username, psw, sysname, realm); end
  MaxFieldSize = ::T.let(nil, ::T.untyped)
end

module EventMachine::Protocols::SASLauth
end

class EventMachine::Protocols::SmtpClient
  include ::EventMachine::Deferrable
  include ::EventMachine::Protocols::LineText2
  def args=(args); end

  def initialize(); end
end

class EventMachine::Protocols::SmtpClient
  def self.send(args=T.unsafe(nil)); end
end

class EventMachine::Protocols::SmtpServer
  include ::EventMachine::Protocols::LineText2
  def connection_ended(); end

  def get_server_domain(); end

  def get_server_greeting(); end

  def init_protocol_state(); end

  def parms=(parms=T.unsafe(nil)); end

  def process_auth(str); end

  def process_auth_line(line); end

  def process_data(); end

  def process_data_line(ln); end

  def process_ehlo(domain); end

  def process_expn(); end

  def process_helo(domain); end

  def process_help(); end

  def process_mail_from(sender); end

  def process_noop(); end

  def process_quit(); end

  def process_rcpt_to(rcpt); end

  def process_rset(); end

  def process_starttls(); end

  def process_unknown(); end

  def process_vrfy(); end

  def receive_data_chunk(data); end

  def receive_data_command(); end

  def receive_ehlo_domain(domain); end

  def receive_message(); end

  def receive_plain_auth(user, password); end

  def receive_recipient(rcpt); end

  def receive_reset(); end

  def receive_sender(sender); end

  def receive_transaction(); end

  def reset_protocol_state(); end

  def send_server_greeting(); end
  AuthRegex = ::T.let(nil, ::T.untyped)
  DataRegex = ::T.let(nil, ::T.untyped)
  EhloRegex = ::T.let(nil, ::T.untyped)
  ExpnRegex = ::T.let(nil, ::T.untyped)
  HeloRegex = ::T.let(nil, ::T.untyped)
  HelpRegex = ::T.let(nil, ::T.untyped)
  MailFromRegex = ::T.let(nil, ::T.untyped)
  NoopRegex = ::T.let(nil, ::T.untyped)
  QuitRegex = ::T.let(nil, ::T.untyped)
  RcptToRegex = ::T.let(nil, ::T.untyped)
  RsetRegex = ::T.let(nil, ::T.untyped)
  StarttlsRegex = ::T.let(nil, ::T.untyped)
  VrfyRegex = ::T.let(nil, ::T.untyped)
end

class EventMachine::Protocols::SmtpServer
  def self.parms=(parms=T.unsafe(nil)); end
end

class EventMachine::Protocols::Socks4
  def initialize(host, port); end

  def restore_methods(); end

  def setup_methods(); end

  def socks_post_init(); end

  def socks_receive_data(data); end
end

class EventMachine::Protocols::Socks4
end

module EventMachine::Protocols::Stomp
  include ::EventMachine::Protocols::LineText2
  def ack(msgid); end

  def connect(parms=T.unsafe(nil)); end

  def init_message_reader(); end

  def receive_binary_data(data); end

  def receive_line(line); end

  def receive_msg(msg); end

  def send(destination, body, parms=T.unsafe(nil)); end

  def send_frame(verb, headers=T.unsafe(nil), body=T.unsafe(nil)); end

  def subscribe(dest, ack=T.unsafe(nil)); end
end

class EventMachine::Protocols::Stomp::Message
  def body(); end

  def body=(body); end

  def command(); end

  def command=(command); end

  def consume_line(line); end

  def header(); end

  def header=(header); end

  def headers(); end
end

class EventMachine::Protocols::Stomp::Message
end

module EventMachine::Protocols::Stomp
end

class EventMachine::Protocols::TcpConnectTester
  include ::EventMachine::Deferrable
end

class EventMachine::Protocols::TcpConnectTester
  def self.test(host, port); end
end

class EventMachine::UnknownTimerFired
end

class EventMachine::UnknownTimerFired
end

class EventMachine::Unsupported
end

class EventMachine::Unsupported
end

class EventMachine::WebSocket::Connection
  BINARY = ::T.let(nil, ::T.untyped)
  ENCODING_SUPPORTED = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

module EventMachine::WebSocket::Framing03
  DATA_FRAMES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES_INVERSE = ::T.let(nil, ::T.untyped)
end

module EventMachine::WebSocket::Framing05
  DATA_FRAMES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES_INVERSE = ::T.let(nil, ::T.untyped)
end

module EventMachine::WebSocket::Framing07
  DATA_FRAMES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES_INVERSE = ::T.let(nil, ::T.untyped)
end

class EventMachine::WebSocket::Handler76
  TERMINATE_STRING = ::T.let(nil, ::T.untyped)
end

class Exception
  include ::BetterErrors::ExceptionExtension
end

module Exception2MessageMapper
  def bind(cl); end
end

Exception2MessageMapper::E2MM = Exception2MessageMapper

class Exception2MessageMapper::ErrNotRegisteredException
end

class Exception2MessageMapper::ErrNotRegisteredException
end

module Exception2MessageMapper
  def self.Fail(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.Raise(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.def_e2message(k, c, m); end

  def self.def_exception(k, n, m, s=T.unsafe(nil)); end

  def self.e2mm_message(klass, exp); end

  def self.extend_object(cl); end

  def self.message(klass, exp); end
end

module ExceptionForMatrix
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end
end

class ExceptionForMatrix::ErrDimensionMismatch
end

class ExceptionForMatrix::ErrDimensionMismatch
end

class ExceptionForMatrix::ErrNotRegular
end

class ExceptionForMatrix::ErrNotRegular
end

class ExceptionForMatrix::ErrOperationNotDefined
end

class ExceptionForMatrix::ErrOperationNotDefined
end

class ExceptionForMatrix::ErrOperationNotImplemented
end

class ExceptionForMatrix::ErrOperationNotImplemented
end

module ExceptionForMatrix
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

module ExecJS
  VERSION = ::T.let(nil, ::T.untyped)
end

module ExecJS::Runtimes
  Disabled = ::T.let(nil, ::T.untyped)
  Duktape = ::T.let(nil, ::T.untyped)
  JScript = ::T.let(nil, ::T.untyped)
  JavaScriptCore = ::T.let(nil, ::T.untyped)
  MiniRacer = ::T.let(nil, ::T.untyped)
  Node = ::T.let(nil, ::T.untyped)
  RubyRhino = ::T.let(nil, ::T.untyped)
  SpiderMonkey = ::T.let(nil, ::T.untyped)
  Spidermonkey = ::T.let(nil, ::T.untyped)
  V8 = ::T.let(nil, ::T.untyped)
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  SizeTypes = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

class FFI::Compiler::Platform
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
end

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  GNU_LIBC = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_DRAGONFLYBSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

class FSEvent
  VERSION = ::T.let(nil, ::T.untyped)
end

module FactoryBot
  Deprecation = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class FactoryBot::DefinitionProxy
  UNPROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class FactoryBot::Strategy::Stub
  DISABLED_PERSISTENCE_METHODS = ::T.let(nil, ::T.untyped)
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

module Faraday
  METHODS_WITH_BODY = ::T.let(nil, ::T.untyped)
  METHODS_WITH_QUERY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  TIMEOUT_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Excon
  OPTS_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttp
  NET_HTTP_EXCEPTIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttpPersistent
  SSL_CONFIGURATIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Patron
  CURL_TIMEOUT_MESSAGES = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Rack
  SPECIAL_HEADERS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Test
  def configure(); end

  def initialize(app, stubs=T.unsafe(nil), &block); end

  def stubs(); end

  def stubs=(stubs); end
end

class Faraday::Adapter::Test::Stub
  def headers_match?(request_headers); end

  def matches?(env); end

  def params_match?(env); end

  def path_match?(request_path, meta); end
end

class Faraday::Adapter::Test::Stub
end

class Faraday::Adapter::Test::Stubs
  def delete(path, headers=T.unsafe(nil), &block); end

  def empty?(); end

  def get(path, headers=T.unsafe(nil), &block); end

  def head(path, headers=T.unsafe(nil), &block); end

  def initialize(strict_mode: T.unsafe(nil)); end

  def match(env); end

  def matches?(stack, env); end

  def new_stub(request_method, path, headers=T.unsafe(nil), body=T.unsafe(nil), &block); end

  def options(path, headers=T.unsafe(nil), &block); end

  def patch(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def post(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def put(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def strict_mode=(value); end

  def verify_stubbed_calls(); end
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs
end

class Faraday::Adapter::Test
end

class Faraday::Connection
  METHODS = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

module Faraday::DecodeMethods
  SUBKEYS_REGEX = ::T.let(nil, ::T.untyped)
end

module Faraday::EmHttp
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::EmSynchrony
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Env
  ContentLength = ::T.let(nil, ::T.untyped)
  MethodsWithBodies = ::T.let(nil, ::T.untyped)
  StatusesWithoutBody = ::T.let(nil, ::T.untyped)
  SuccessfulStatuses = ::T.let(nil, ::T.untyped)
end

module Faraday::Excon
  VERSION = ::T.let(nil, ::T.untyped)
end

Faraday::FilePart = UploadIO

module Faraday::HTTPClient
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::NetHttp
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::NetHttpPersistent
  VERSION = ::T.let(nil, ::T.untyped)
end

Faraday::Parts = Parts

module Faraday::Patron
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::Rack
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::RackBuilder
  LOCK_ERR = ::T.let(nil, ::T.untyped)
  NO_ARGUMENT = ::T.let(nil, ::T.untyped)
end

class Faraday::RackBuilder::Handler
  REGISTRY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def initialize(app, type, token); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def self.build_hash(type, hash); end

  def self.header(type, token); end
end

class Faraday::Request::BasicAuthentication
end

class Faraday::Request::BasicAuthentication
  def self.header(login, pass); end
end

class Faraday::Request::Instrumentation
  def initialize(app, options=T.unsafe(nil)); end
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation
end

class Faraday::Request::Multipart
  DEFAULT_BOUNDARY_PREFIX = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Retry
  DEFAULT_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  IDEMPOTENT_METHODS = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Retry::Options
  DEFAULT_CHECK = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::TokenAuthentication
  def initialize(app, token, options=T.unsafe(nil)); end
end

class Faraday::Request::TokenAuthentication
  def self.header(token, options=T.unsafe(nil)); end
end

class Faraday::Request::UrlEncoded
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Faraday::Response::Logger
  def initialize(app, logger=T.unsafe(nil), options=T.unsafe(nil)); end
end

class Faraday::Response::Logger
end

class Faraday::Response::RaiseError
  ClientErrorStatuses = ::T.let(nil, ::T.untyped)
  ServerErrorStatuses = ::T.let(nil, ::T.untyped)
end

Faraday::Timer = Timeout

Faraday::UploadIO = UploadIO

module Faraday::Utils
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_RE = ::T.let(nil, ::T.untyped)
end

class Faraday::Utils::Headers
  KeyMap = ::T.let(nil, ::T.untyped)
end

class Feed
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Feed
  extend ::ActiveModel::Callbacks
  extend ::Searchkick::Model
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Fiber
  def transfer(*_); end
end

class Fiber
  def self.current(); end
end

class File
  def self.exists?(_); end

  def self.probe_stat_in(dir); end
end

FileList = Rake::FileList

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
  include ::ActiveSupport::NumericWithFormat
end

module Foreman
  VERSION = ::T.let(nil, ::T.untyped)
end

class Formatador
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  PARSE_REGEX = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  def accesskey(); end

  def builder(); end

  def builder=(builder); end

  def button_html(); end

  def button_html_from_options(); end

  def check_supported_methods!(); end

  def default_button_html(); end

  def default_wrapper_classes(); end

  def default_wrapper_html_options(); end

  def default_wrapper_id(); end

  def extra_button_html_options(); end

  def i18n_key(); end

  def initialize(builder, template, object, object_name, method, options); end

  def method(); end

  def method=(method); end

  def new_or_persisted_object?(); end

  def object(); end

  def object=(object); end

  def object_name(); end

  def object_name=(object_name); end

  def options(); end

  def options=(options); end

  def sanitized_object_name(); end

  def submit_i18n_key(); end

  def supported_methods(); end

  def template(); end

  def template=(template); end

  def text(); end

  def to_html(); end

  def wrapper(&block); end

  def wrapper_class(); end

  def wrapper_classes_from_options(); end

  def wrapper_html_options(); end

  def wrapper_html_options_from_options(); end

  def wrapper_id(); end

  def wrapper_id_from_options(); end
end

module Formtastic::Actions::Base
end

class Formtastic::Actions::ButtonAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  include ::Formtastic::Actions::Buttonish
end

class Formtastic::Actions::ButtonAction
end

module Formtastic::Actions::Buttonish
  def extra_button_html_options(); end

  def supported_methods(); end
end

module Formtastic::Actions::Buttonish
end

class Formtastic::Actions::InputAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  include ::Formtastic::Actions::Buttonish
end

class Formtastic::Actions::InputAction
end

class Formtastic::Actions::LinkAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  def url(); end
end

class Formtastic::Actions::LinkAction
end

Formtastic::Deprecation = ActiveSupport::Deprecation

module Formtastic::Helpers::ErrorsHelper
  INLINE_ERROR_TYPES = ::T.let(nil, ::T.untyped)
end

module Formtastic::I18n
  DEFAULT_SCOPE = ::T.let(nil, ::T.untyped)
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
end

module Formtastic::I18n
  def self.t(*args); end

  def self.translate(*args); end
end

module Formtastic::Inputs::Base::Choices
  def choice_html(choice); end

  def choice_html_options(choice); end

  def choice_html_safe_value(choice); end

  def choice_input_dom_id(choice); end

  def choice_label(choice); end

  def choice_value(choice); end

  def choice_wrapping(html_options, &block); end

  def choice_wrapping_html_options(choice); end

  def choices_group_wrapping(&block); end

  def choices_group_wrapping_html_options(); end

  def choices_wrapping(&block); end

  def choices_wrapping_html_options(); end

  def custom_choice_html_options(choice); end

  def default_choice_html_options(choice); end

  def label_html_options(); end

  def legend_html(); end

  def value_as_class?(); end
end

module Formtastic::Inputs::Base::Choices
end

module Formtastic::Inputs::Base::Collections
  def collection(); end

  def collection_for_boolean(); end

  def collection_from_association(); end

  def collection_from_enum(); end

  def collection_from_enum?(); end

  def collection_from_options(); end

  def label_and_value_method(); end

  def label_and_value_method_from_collection(_collection); end

  def label_method(); end

  def label_method_from_options(); end

  def raw_collection(); end

  def send_or_call(duck, object); end

  def send_or_call_or_object(duck, object); end

  def value_method(); end

  def value_method_from_options(); end
end

module Formtastic::Inputs::Base::Collections
end

module Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
  def default_maxlength(); end

  def default_size(); end

  def default_step(); end

  def extra_input_html_options(); end

  def html_input_type(); end

  def input_html_options(); end

  def maxlength(); end

  def size(); end

  def step(); end

  def step_from_macro(sym); end

  def value(); end
end

module Formtastic::Inputs::Base::DatetimePickerish
end

module Formtastic::Inputs::Base::Numeric
  def in_option(); end

  def input_html_options(); end

  def max_option(); end

  def min_option(); end

  def step_option(); end

  def wrapper_html_options(); end
end

module Formtastic::Inputs::Base::Numeric
end

module Formtastic::Inputs::Base::Placeholder
  def input_html_options(); end

  def placeholder_text(); end
end

module Formtastic::Inputs::Base::Placeholder
end

module Formtastic::Inputs::Base::Stringish
  def input_html_options(); end

  def maxlength(); end

  def size(); end

  def to_html(); end

  def wrapper_html_options(); end
end

module Formtastic::Inputs::Base::Stringish
end

module Formtastic::Inputs::Base::Timeish
  def date_fragments(); end

  def default_date_fragments(); end

  def fragment_id(fragment); end

  def fragment_input_html(fragment); end

  def fragment_label(fragment); end

  def fragment_label_html(fragment); end

  def fragment_name(fragment); end

  def fragment_prefix(); end

  def fragment_wrapping(&block); end

  def fragment_wrapping_html_options(); end

  def fragments(); end

  def fragments_inner_wrapping(&block); end

  def fragments_label(); end

  def fragments_wrapping(&block); end

  def fragments_wrapping_html_options(); end

  def hidden_field_name(fragment); end

  def hidden_fragments(); end

  def i18n_date_fragments(); end

  def include_blank?(); end

  def position(fragment); end

  def positions(); end

  def time_fragments(); end

  def to_html(); end

  def value(); end
end

module Formtastic::Inputs::Base::Timeish
end

class Formtastic::Inputs::BooleanInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def check_box_html(); end

  def checked?(); end

  def checked_value(); end

  def hidden_field_html(); end

  def input_html_options_name(); end

  def label_text_with_embedded_checkbox(); end

  def label_with_nested_checkbox(); end

  def unchecked_value(); end
end

class Formtastic::Inputs::BooleanInput
end

class Formtastic::Inputs::CheckBoxesInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  include ::Formtastic::Inputs::Base::Choices
  def check_box_with_hidden_input(choice); end

  def check_box_without_hidden_input(choice); end

  def checkbox_input(choice); end

  def checked?(value); end

  def disabled?(value); end

  def disabled_values(); end

  def extra_html_options(choice); end

  def hidden_field_for_all(); end

  def hidden_fields_for_every?(); end

  def initialize(*args); end

  def make_selected_values(); end

  def selected_values(); end

  def unchecked_value(); end
end

class Formtastic::Inputs::CheckBoxesInput
end

class Formtastic::Inputs::ColorInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::ColorInput
end

class Formtastic::Inputs::CountryInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def priority_countries(); end
end

class Formtastic::Inputs::CountryInput::CountrySelectPluginMissing
end

class Formtastic::Inputs::CountryInput::CountrySelectPluginMissing
end

class Formtastic::Inputs::CountryInput
end

class Formtastic::Inputs::DatalistInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Collections
  def data_list_html(); end

  def html_id_of_datalist(); end
end

class Formtastic::Inputs::DatalistInput
end

class Formtastic::Inputs::DatePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::DatePickerInput
end

class Formtastic::Inputs::DateSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
  def fragment_value(fragment); end

  def hidden_date_fragments(); end
end

class Formtastic::Inputs::DateSelectInput
end

class Formtastic::Inputs::DatetimePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::DatetimePickerInput
end

class Formtastic::Inputs::DatetimeSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
end

class Formtastic::Inputs::DatetimeSelectInput
end

class Formtastic::Inputs::EmailInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::EmailInput
end

class Formtastic::Inputs::FileInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
end

class Formtastic::Inputs::FileInput
end

class Formtastic::Inputs::HiddenInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
end

class Formtastic::Inputs::HiddenInput
end

class Formtastic::Inputs::NumberInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Numeric
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::NumberInput
end

class Formtastic::Inputs::PasswordInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::PasswordInput
end

class Formtastic::Inputs::PhoneInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::PhoneInput
end

class Formtastic::Inputs::RadioInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  include ::Formtastic::Inputs::Base::Choices
end

class Formtastic::Inputs::RadioInput
end

class Formtastic::Inputs::RangeInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Numeric
end

class Formtastic::Inputs::RangeInput
end

class Formtastic::Inputs::SearchInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::SearchInput
end

class Formtastic::Inputs::SelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  def extra_input_html_options(); end

  def include_blank(); end

  def initialize(*args); end

  def input_html_options_name(); end

  def input_html_options_name_multiple(); end

  def multiple?(); end

  def multiple_by_association?(); end

  def multiple_by_options?(); end

  def prompt?(); end

  def select_html(); end

  def single?(); end
end

class Formtastic::Inputs::SelectInput
end

class Formtastic::Inputs::StringInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::StringInput
end

class Formtastic::Inputs::TextInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::TextInput
end

class Formtastic::Inputs::TimePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::TimePickerInput
end

class Formtastic::Inputs::TimeSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
  def fragment_value(fragment); end

  def value_or_default_value(); end
end

class Formtastic::Inputs::TimeSelectInput
end

class Formtastic::Inputs::TimeZoneInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def priority_zones(); end
end

class Formtastic::Inputs::TimeZoneInput
end

class Formtastic::Inputs::UrlInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::UrlInput
end

module FormtasticI18n
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module Foundation::Icons::Sass::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module GC
  def garbage_collect(*_); end
end

module GC
  def self.verify_transient_heap_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsPackageVersion = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  USE_BUNDLER_FOR_GEMDEPS = ::T.let(nil, ::T.untyped)
end

class Gem::DependencyInstaller
  def _deprecated_add_found_dependencies(to_do, dependency_list); end

  def _deprecated_gather_dependencies(); end

  def add_found_dependencies(*args, &block); end

  def gather_dependencies(*args, &block); end
end

class Gem::Exception
  extend ::Gem::Deprecate
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::Builder
  def self.redirector(); end
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def length(); end

  def pos(); end

  def read(len=T.unsafe(nil)); end

  def readpartial(maxlen=T.unsafe(nil), outbuf=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::RemoteFetcher
  def correct_for_windows_path(path); end

  def s3_expiration(); end

  def sign_s3_url(uri, expiration=T.unsafe(nil)); end
  BASE64_URI_TRANSLATE = ::T.let(nil, ::T.untyped)
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

class Gem::Resolver::ActivationRequest
  def others_possible?(); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

Gem::Resolver::DependencyConflict = Gem::Resolver::Conflict

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::Security::Exception
end

class Gem::Security::Exception
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::Security::Policy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def check_cert(signer, issuer, time); end

  def check_chain(chain, time); end

  def check_data(public_key, digest, signature, data); end

  def check_key(signer, key); end

  def check_root(chain, time); end

  def check_trust(chain, digester, trust_dir); end

  def initialize(name, policy=T.unsafe(nil), opt=T.unsafe(nil)); end

  def name(); end

  def only_signed(); end

  def only_signed=(only_signed); end

  def only_trusted(); end

  def only_trusted=(only_trusted); end

  def subject(certificate); end

  def verify(chain, key=T.unsafe(nil), digests=T.unsafe(nil), signatures=T.unsafe(nil), full_name=T.unsafe(nil)); end

  def verify_chain(); end

  def verify_chain=(verify_chain); end

  def verify_data(); end

  def verify_data=(verify_data); end

  def verify_root(); end

  def verify_root=(verify_root); end

  def verify_signatures(spec, digests, signatures); end

  def verify_signer(); end

  def verify_signer=(verify_signer); end
end

class Gem::Security::Policy
end

class Gem::Security::Signer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil), options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def options(); end

  def re_sign_key(expiration_length: T.unsafe(nil)); end

  def sign(data); end
end

class Gem::Security::Signer
  def self.re_sign_cert(expired_cert, expired_cert_path, private_key); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_key(length=T.unsafe(nil), algorithm=T.unsafe(nil)); end

  def self.email_to_name(email_address); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def to_ruby(); end
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.add_spec(spec); end

  def self.add_specs(*specs); end

  def self.remove_spec(spec); end
end

class Gem::SpecificationPolicy
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::StreamUI
  def _deprecated_debug(statement); end
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

Gem::Version::Requirement = Gem::Requirement

module Gem
  def self.default_gems_use_full_paths?(); end

  def self.remove_unresolved_default_spec(spec); end
end

class GenerateSitemapService
  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end
end

class GenerateSitemapService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self._routes(); end

  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

module GeneratedUrlHelpers
  def rails_info_path(*args); end

  def rails_info_properties_path(*args); end

  def rails_info_properties_url(*args); end

  def rails_info_routes_path(*args); end

  def rails_info_routes_url(*args); end

  def rails_info_url(*args); end

  def rails_mailers_path(*args); end

  def rails_mailers_url(*args); end
end

class GeocodeQuery
  def after_add_for_geocode_results(); end

  def after_add_for_geocode_results=(val); end

  def after_add_for_geocode_results?(); end

  def after_remove_for_geocode_results(); end

  def after_remove_for_geocode_results=(val); end

  def after_remove_for_geocode_results?(); end

  def autosave_associated_records_for_geocode_results(*args); end

  def before_add_for_geocode_results(); end

  def before_add_for_geocode_results=(val); end

  def before_add_for_geocode_results?(); end

  def before_remove_for_geocode_results(); end

  def before_remove_for_geocode_results=(val); end

  def before_remove_for_geocode_results?(); end

  def validate_associated_records_for_geocode_results(*args); end
end

class GeocodeQuery::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeQuery::GeneratedRelationMethods
end

class GeocodeQuery::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeQuery::GeneratedRelationMethods
end

class GeocodeQuery::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeQuery::GeneratedRelationMethods
end

module GeocodeQuery::GeneratedAssociationMethods
  def geocode_result_ids=(ids); end
end

module GeocodeQuery::GeneratedRelationMethods
end

module GeocodeQuery::GeneratedRelationMethods
end

class GeocodeQuery
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_geocode_results(); end

  def self.after_add_for_geocode_results=(val); end

  def self.after_add_for_geocode_results?(); end

  def self.after_remove_for_geocode_results(); end

  def self.after_remove_for_geocode_results=(val); end

  def self.after_remove_for_geocode_results?(); end

  def self.before_add_for_geocode_results(); end

  def self.before_add_for_geocode_results=(val); end

  def self.before_add_for_geocode_results?(); end

  def self.before_remove_for_geocode_results(); end

  def self.before_remove_for_geocode_results=(val); end

  def self.before_remove_for_geocode_results?(); end
end

class GeocodeResult
  def autosave_associated_records_for_geocode_query(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class GeocodeResult::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeResult::GeneratedRelationMethods
end

class GeocodeResult::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeResult::GeneratedRelationMethods
end

class GeocodeResult::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GeocodeResult::GeneratedRelationMethods
end

module GeocodeResult::GeneratedRelationMethods
end

module GeocodeResult::GeneratedRelationMethods
end

class GeocodeResult
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class GeocodeService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Geocoder::Calculations
  COMPASS_POINTS = ::T.let(nil, ::T.untyped)
  DEGREES_PER_RADIAN = ::T.let(nil, ::T.untyped)
  EARTH_RADII = ::T.let(nil, ::T.untyped)
  EARTH_RADIUS = ::T.let(nil, ::T.untyped)
  KM_IN_MI = ::T.let(nil, ::T.untyped)
  KM_IN_NM = ::T.let(nil, ::T.untyped)
end

class Geocoder::Configuration
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Geocoder::IpAddress
  PRIVATE_IPS = ::T.let(nil, ::T.untyped)
end

class Geocoder::Logger
  SEVERITY = ::T.let(nil, ::T.untyped)
end

module Geocoder::Request
  GEOCODER_CANDIDATE_HEADERS = ::T.let(nil, ::T.untyped)
end

class GeocoderResults
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Geokit::Geocoders::BaseIpGeocoder
  NON_ROUTABLE_IP_RANGES = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::BingGeocoder
  ACCURACY_MAP = ::T.let(nil, ::T.untyped)
  PRECISION_MAP = ::T.let(nil, ::T.untyped)
  XML_MAPPINGS = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::FreeGeoIpGeocoder
  XML_MAPPINGS = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::GeoPluginGeocoder
  XML_MAPPINGS = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::GeonamesGeocoder
  XML_MAPPINGS = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::GoogleGeocoder
  ACCURACY = ::T.let(nil, ::T.untyped)
  PRECISIONS = ::T.let(nil, ::T.untyped)
end

class Geokit::Geocoders::MapboxGeocoder
  PRECISION_VALUES = ::T.let(nil, ::T.untyped)
end

Geokit::Geocoders::OsmGeocoder = Geokit::Geocoders::OSMGeocoder

module Geokit::Mappable::ClassMethods
  EARTH_RADIUS = ::T.let(nil, ::T.untyped)
  EARTH_RADIUS_IN_METERS = ::T.let(nil, ::T.untyped)
  METERS_PER_LATITUDE_DEGREE = ::T.let(nil, ::T.untyped)
  PER_LATITUDE_DEGREE = ::T.let(nil, ::T.untyped)
  PI_DIV_RAD = ::T.let(nil, ::T.untyped)
end

class GetText::PoParser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class GithubIssue
  def autosave_associated_records_for_authority(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class GithubIssue::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GithubIssue::GeneratedRelationMethods
end

class GithubIssue::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GithubIssue::GeneratedRelationMethods
end

class GithubIssue::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::GithubIssue::GeneratedRelationMethods
end

module GithubIssue::GeneratedRelationMethods
end

module GithubIssue::GeneratedRelationMethods
end

class GithubIssue
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class GoogleGeocodeService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Growl
  BIN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Dsl
  MORE_INFO_ON_UPGRADING_TO_GUARD_2 = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Dsl::ClassMethods
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Evaluator
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
  REEVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Guard::ClassMethods
  ADD_GROUP = ::T.let(nil, ::T.untyped)
  ADD_GUARD = ::T.let(nil, ::T.untyped)
  ADD_PLUGIN = ::T.let(nil, ::T.untyped)
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
  EVALUATOR = ::T.let(nil, ::T.untyped)
  GET_GUARD_CLASS = ::T.let(nil, ::T.untyped)
  GROUP = ::T.let(nil, ::T.untyped)
  GROUPS = ::T.let(nil, ::T.untyped)
  GUARDS = ::T.let(nil, ::T.untyped)
  GUARD_GEM_NAMES = ::T.let(nil, ::T.untyped)
  LISTENER_ASSIGN = ::T.let(nil, ::T.untyped)
  LOCATE_GUARD = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
  MORE_INFO_ON_UPGRADING_TO_GUARD_2 = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PLUGIN = ::T.let(nil, ::T.untyped)
  PLUGINS = ::T.let(nil, ::T.untyped)
  RESET_EVALUATOR = ::T.let(nil, ::T.untyped)
  RUNNER = ::T.let(nil, ::T.untyped)
  RUNNING = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_ASSIGN = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Watcher::ClassMethods
  MATCH_GUARDFILE = ::T.let(nil, ::T.untyped)
end

class Guard::Dsl
  WARN_INVALID_LOG_LEVEL = ::T.let(nil, ::T.untyped)
  WARN_INVALID_LOG_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Guard::Guardfile::Evaluator
  DEFAULT_GUARDFILES = ::T.let(nil, ::T.untyped)
  ERROR_NO_GUARDFILE = ::T.let(nil, ::T.untyped)
  ERROR_NO_PLUGINS = ::T.let(nil, ::T.untyped)
end

class Guard::Internals::Groups
  DEFAULT_GROUPS = ::T.let(nil, ::T.untyped)
end

class Guard::Internals::Session
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Guard::LiveReload::WebSocket
  HTTP_DATA_FORBIDDEN = ::T.let(nil, ::T.untyped)
  HTTP_DATA_NOT_FOUND = ::T.let(nil, ::T.untyped)
end

class Guard::Notifier
  DEPRECATED_IMPLICIT_CONNECT = ::T.let(nil, ::T.untyped)
end

class Guard::Plugin
  TEMPLATE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Guard::PluginUtil
  ERROR_NO_GUARD_OR_CLASS = ::T.let(nil, ::T.untyped)
  INFO_ADDED_GUARD_TO_GUARDFILE = ::T.let(nil, ::T.untyped)
end

class Guard::RSpec::Command
  FAILURE_EXIT_CODE = ::T.let(nil, ::T.untyped)
end

module Guard::RSpec::Options
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Guard::RSpecDefaults
  TEMPORARY_FILE_PATH = ::T.let(nil, ::T.untyped)
end

class Guard::RuboCop::Runner
  def args_specified_by_user(); end

  def build_command(paths); end

  def failed_paths(); end

  def include_formatter_for_console?(cli_args); end

  def initialize(options); end

  def json_file_path(); end

  def notify(passed); end

  def open_launchy_if_needed(); end

  def pluralize(number, thing, options=T.unsafe(nil)); end

  def result(); end

  def run(paths=T.unsafe(nil)); end

  def should_add_default_formatter_for_console?(); end

  def summary_text(); end
end

class Guard::RuboCop::Runner
end

class Guard::Runner
  ADDITION_TASKS = ::T.let(nil, ::T.untyped)
  MODIFICATION_TASKS = ::T.let(nil, ::T.untyped)
  PLUGIN_FAILED = ::T.let(nil, ::T.untyped)
  REMOVAL_TASKS = ::T.let(nil, ::T.untyped)
end

module Guard::UI::Colors
  ANSI_ESCAPE_BGBLACK = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGBLUE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGCYAN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGGREEN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGMAGENTA = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGRED = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGWHITE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGYELLOW = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BLACK = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BLUE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BRIGHT = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_CYAN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_GREEN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_MAGENTA = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_RED = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_WHITE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_YELLOW = ::T.let(nil, ::T.untyped)
end

class Guard::UI::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEPRECATED_OPTS = ::T.let(nil, ::T.untyped)
end

class Guard::UI::Logger::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Guard
  extend ::Guard::Internals::Helpers
end

class HTMLEntities
  FLAVORS = ::T.let(nil, ::T.untyped)
  MAPPINGS = ::T.let(nil, ::T.untyped)
  SKIP_DUP_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class HTMLEntities::Encoder
  INSTRUCTIONS = ::T.let(nil, ::T.untyped)
end

module HTMLEntities::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class HTMLSelector
  NO_STRIP = ::T.let(nil, ::T.untyped)
end

module HTTP
  CHARSET_RE = ::T.let(nil, ::T.untyped)
  MIME_TYPE_RE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module HTTP::Accept
  QUOTED_STRING = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module HTTP::Accept::Encodings
  CODINGS = ::T.let(nil, ::T.untyped)
  CONTENT_CODING = ::T.let(nil, ::T.untyped)
  HTTP_ACCEPT_ENCODING = ::T.let(nil, ::T.untyped)
  IDENTITY_CONTENT_CODING = ::T.let(nil, ::T.untyped)
  QVALUE = ::T.let(nil, ::T.untyped)
  WILDCARD_CONTENT_CODING = ::T.let(nil, ::T.untyped)
end

module HTTP::Accept::Languages
  LANGUAGE_RANGE = ::T.let(nil, ::T.untyped)
  LOCALE = ::T.let(nil, ::T.untyped)
  QVALUE = ::T.let(nil, ::T.untyped)
end

module HTTP::Accept::MediaTypes
  HTTP_ACCEPT = ::T.let(nil, ::T.untyped)
  MIME_TYPE = ::T.let(nil, ::T.untyped)
  PARAMETER = ::T.let(nil, ::T.untyped)
  WILDCARD_MEDIA_RANGE = ::T.let(nil, ::T.untyped)
end

class HTTP::Accept::MediaTypes::Map
  WILDCARD = ::T.let(nil, ::T.untyped)
end

class HTTP::Client
  include ::NewRelic::Agent::Instrumentation::HTTPrb::Prepend
  include ::NewRelic::Agent::Instrumentation::HTTPrb
  HTTP_OR_HTTPS_RE = ::T.let(nil, ::T.untyped)
end

class HTTP::Connection
  BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  HTTP_1_0 = ::T.let(nil, ::T.untyped)
  HTTP_1_1 = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
end

class HTTP::Cookie
  MAX_COOKIES_PER_DOMAIN = ::T.let(nil, ::T.untyped)
  MAX_COOKIES_TOTAL = ::T.let(nil, ::T.untyped)
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  PERSISTENT_PROPERTIES = ::T.let(nil, ::T.untyped)
  UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class HTTP::Cookie::Scanner
  def initialize(string, logger=T.unsafe(nil)); end

  def parse_cookie_date(s); end

  def scan_cookie(); end

  def scan_dquoted(); end

  def scan_name(); end

  def scan_name_value(comma_as_separator=T.unsafe(nil)); end

  def scan_set_cookie(); end

  def scan_value(comma_as_separator=T.unsafe(nil)); end

  def skip_wsp(); end
  RE_BAD_CHAR = ::T.let(nil, ::T.untyped)
  RE_COOKIE_COMMA = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_WSP = ::T.let(nil, ::T.untyped)
end

class HTTP::Cookie::Scanner
  def self.quote(s); end
end

module HTTP::FormData
  CRLF = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class HTTP::FormData::File
  DEFAULT_MIME = ::T.let(nil, ::T.untyped)
end

class HTTP::Headers
  ACCEPT = ::T.let(nil, ::T.untyped)
  ACCEPT_ENCODING = ::T.let(nil, ::T.untyped)
  AGE = ::T.let(nil, ::T.untyped)
  AUTHORIZATION = ::T.let(nil, ::T.untyped)
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CANONICAL_NAME_RE = ::T.let(nil, ::T.untyped)
  COMPLIANT_NAME_RE = ::T.let(nil, ::T.untyped)
  CONNECTION = ::T.let(nil, ::T.untyped)
  CONTENT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  COOKIE = ::T.let(nil, ::T.untyped)
  DATE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  IF_MODIFIED_SINCE = ::T.let(nil, ::T.untyped)
  IF_NONE_MATCH = ::T.let(nil, ::T.untyped)
  LAST_MODIFIED = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  PROXY_AUTHORIZATION = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
  VARY = ::T.let(nil, ::T.untyped)
end

class HTTP::Parser::Error
end

class HTTP::Parser::Error
end

class HTTP::Redirector
  REDIRECT_CODES = ::T.let(nil, ::T.untyped)
  SEE_OTHER_ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  STRICT_SENSITIVE_CODES = ::T.let(nil, ::T.untyped)
  UNSAFE_VERBS = ::T.let(nil, ::T.untyped)
end

class HTTP::Request
  METHODS = ::T.let(nil, ::T.untyped)
  PORTS = ::T.let(nil, ::T.untyped)
  SCHEMES = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

class HTTP::Request::Writer
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNKED_END = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class HTTP::RequestParser
end

class HTTP::RequestParser
end

class HTTP::Response::Status
  REASONS = ::T.let(nil, ::T.untyped)
  SYMBOLS = ::T.let(nil, ::T.untyped)
  SYMBOL_CODES = ::T.let(nil, ::T.untyped)
end

class HTTP::ResponseParser
end

class HTTP::ResponseParser
end

class HTTP::Timeout::PerOperation
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  READ_TIMEOUT = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class HTTP::URI
  HTTPS_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_SCHEME = ::T.let(nil, ::T.untyped)
  NORMALIZER = ::T.let(nil, ::T.untyped)
end

class HTTParty::Decompressor
  SupportedEncodings = ::T.let(nil, ::T.untyped)
end

module Haml
  VERSION = ::T.let(nil, ::T.untyped)
end

module Haml::AttributeBuilder
  INVALID_ATTRIBUTE_NAME_REGEX = ::T.let(nil, ::T.untyped)
end

module Haml::AttributeParser
  IGNORED_TYPES = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

class Haml::Error
  MESSAGES = ::T.let(nil, ::T.untyped)
end

module Haml::Helpers
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEX = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

class Haml::Parser
  BLOCK_KEYWORD_REGEX = ::T.let(nil, ::T.untyped)
  BLOCK_WITH_SPACES = ::T.let(nil, ::T.untyped)
  CLASS_KEY = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  DIV_CLASS = ::T.let(nil, ::T.untyped)
  DIV_ID = ::T.let(nil, ::T.untyped)
  DOCTYPE = ::T.let(nil, ::T.untyped)
  DOCTYPE_REGEX = ::T.let(nil, ::T.untyped)
  ELEMENT = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  FILTER = ::T.let(nil, ::T.untyped)
  FLAT_SCRIPT = ::T.let(nil, ::T.untyped)
  ID_KEY = ::T.let(nil, ::T.untyped)
  LITERAL_VALUE_REGEX = ::T.let(nil, ::T.untyped)
  METHOD_CALL_PREFIX = ::T.let(nil, ::T.untyped)
  MID_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  MULTILINE_CHAR_VALUE = ::T.let(nil, ::T.untyped)
  PLAIN_TEXT = ::T.let(nil, ::T.untyped)
  SANITIZE = ::T.let(nil, ::T.untyped)
  SCRIPT = ::T.let(nil, ::T.untyped)
  SILENT_COMMENT = ::T.let(nil, ::T.untyped)
  SILENT_SCRIPT = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORD_REGEX = ::T.let(nil, ::T.untyped)
end

module HamlLint
  APP_NAME = ::T.let(nil, ::T.untyped)
  BUG_REPORT_URL = ::T.let(nil, ::T.untyped)
  HOME = ::T.let(nil, ::T.untyped)
  REPO_URL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class HamlLint::ConfigurationLoader
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
  CONFIG_FILE_NAME = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG_PATH = ::T.let(nil, ::T.untyped)
end

class HamlLint::Directive
  DIRECTIVE_REGEXP = ::T.let(nil, ::T.untyped)
  LINTER_REGEXP = ::T.let(nil, ::T.untyped)
end

class HamlLint::Document
  STRING_SOURCE = ::T.let(nil, ::T.untyped)
end

class HamlLint::FileFinder
  VALID_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::AlignmentTabs
  REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ClassAttributeWithStaticValue
  STATIC_TYPES = ::T.let(nil, ::T.untyped)
  VALID_CLASS_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ClassesBeforeIds
  MSG = ::T.let(nil, ::T.untyped)
  TYPES_BY_PREFIX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ConsecutiveComments
  COMMENT_DETECTOR = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ConsecutiveSilentScripts
  SILENT_SCRIPT_DETECTOR = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::IdNames
  STYLES = ::T.let(nil, ::T.untyped)
  STYLIZED_NAMES = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::Indentation
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  LEADING_SPACES_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::InlineStyles
  MESSAGE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::LineLength
  MSG = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::MultilinePipe
  MESSAGE = ::T.let(nil, ::T.untyped)
  MULTILINE_PIPE_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::MultilineScript
  SPLIT_OPERATORS = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::RepeatedId
  MESSAGE_FORMAT = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::RuboCop
  SEVERITY_MAP = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::SpaceBeforeScript
  ALLOWED_SEPARATORS = ::T.let(nil, ::T.untyped)
  MESSAGE_FORMAT = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::SpaceInsideHashAttributes
  STYLE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::UnnecessaryStringOutput
  MESSAGE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ViewLength
  MSG = ::T.let(nil, ::T.untyped)
end

class HamlLint::Reporter::DisabledConfigReporter
  HEADING = ::T.let(nil, ::T.untyped)
end

class HamlLint::Reporter::ProgressReporter
  DOT = ::T.let(nil, ::T.untyped)
end

class HamlLint::RubyExtractor
  LOOP_KEYWORDS = ::T.let(nil, ::T.untyped)
  MID_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class HamlLint::Severity
  COLORS = ::T.let(nil, ::T.untyped)
  MARKS = ::T.let(nil, ::T.untyped)
  NAMES = ::T.let(nil, ::T.untyped)
  SEVERITY_ERROR = ::T.let(nil, ::T.untyped)
  SEVERITY_WARNING = ::T.let(nil, ::T.untyped)
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
end

class Hash
  def self.from_trusted_xml(xml); end
end

module Hashdiff
  VERSION = ::T.let(nil, ::T.untyped)
end

module Hashie
  VERSION = ::T.let(nil, ::T.untyped)
end

class Hashie::Clash
  def _end!(); end

  def _parent(); end

  def id(*args); end

  def initialize(other_hash=T.unsafe(nil), parent=T.unsafe(nil)); end

  def merge_store(key, *args); end

  def method_missing(name, *args); end
end

class Hashie::Clash::ChainError
end

class Hashie::Clash::ChainError
end

class Hashie::Clash
end

class Hashie::Dash
  def [](property); end

  def []=(property, value); end

  def initialize(attributes=T.unsafe(nil), &block); end

  def merge(other_hash); end

  def merge!(other_hash); end

  def replace(other_hash); end

  def update_attributes!(attributes); end
end

class Hashie::Dash
  def self.defaults(); end

  def self.getters(); end

  def self.inherited(klass); end

  def self.properties(); end

  def self.property(property_name, options=T.unsafe(nil)); end

  def self.property?(name); end

  def self.required?(name); end

  def self.required_properties(); end
end

module Hashie::Extensions::Coercion
  ABSTRACT_CORE_TYPES = ::T.let(nil, ::T.untyped)
  CORE_TYPES = ::T.let(nil, ::T.untyped)
end

module Hashie::Extensions::Coercion::ClassMethods
  def build_coercion(type); end

  def build_container_coercion(type, value_type); end

  def build_core_type_coercion(type); end

  def build_hash_coercion(type, key_type, value_type); end

  def coerce_key(*attrs); end

  def coerce_keys(*attrs); end

  def coerce_value(from, into, options=T.unsafe(nil)); end

  def coercion_cache(); end

  def fetch_coercion(type); end

  def inherited(klass); end

  def key_coercion(key); end

  def key_coercions(); end

  def key_coercions=(key_coercions); end

  def lenient_value_coercions(); end

  def strict_value_coercions(); end

  def value_coercion(value); end
end

module Hashie::Extensions::Coercion::ClassMethods
end

module Hashie::Extensions::Coercion::InstanceMethods
  def custom_writer(key, value, _convert=T.unsafe(nil)); end

  def replace(other_hash); end

  def set_value_with_coercion(key, value); end
end

module Hashie::Extensions::Coercion::InstanceMethods
end

module Hashie::Extensions::Coercion
  def self.included(base); end
end

module Hashie::Extensions::Dash::Coercion
end

module Hashie::Extensions::Dash::Coercion::ClassMethods
  def property(property_name, options=T.unsafe(nil)); end
end

module Hashie::Extensions::Dash::Coercion::ClassMethods
end

module Hashie::Extensions::Dash::Coercion
  def self.included(base); end
end

module Hashie::Extensions::Dash::IndifferentAccess
end

module Hashie::Extensions::Dash::IndifferentAccess::ClassMethods
  def property?(name); end

  def transformation_exists?(name); end

  def transformed_property(property_name, value); end

  def translation_exists?(name); end
end

module Hashie::Extensions::Dash::IndifferentAccess::ClassMethods
end

module Hashie::Extensions::Dash::IndifferentAccess
  def self.included(base); end

  def self.maybe_extend(base); end
end

module Hashie::Extensions::Dash::PropertyTranslation
end

module Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
  def inherited(klass); end

  def inverse_translations(); end

  def permitted_input_keys(); end

  def property(property_name, options=T.unsafe(nil)); end

  def transformation_exists?(name); end

  def transformed_property(property_name, value); end

  def transforms(); end

  def translation_exists?(name); end

  def translations(); end

  def translations_hash(); end
end

module Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
end

module Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
  def []=(property, value); end

  def initialize_attributes(attributes); end

  def property_exists?(property); end
end

module Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
end

module Hashie::Extensions::Dash::PropertyTranslation
  def self.included(base); end
end

module Hashie::Extensions::DeepFetch
  def deep_fetch(*args, &block); end
end

class Hashie::Extensions::DeepFetch::UndefinedPathError
end

class Hashie::Extensions::DeepFetch::UndefinedPathError
end

module Hashie::Extensions::DeepFetch
end

module Hashie::Extensions::DeepFind
  def deep_detect(key); end

  def deep_find(key); end

  def deep_find_all(key); end

  def deep_select(key); end
end

module Hashie::Extensions::DeepFind
end

module Hashie::Extensions::DeepLocate
  def deep_locate(comparator); end
end

module Hashie::Extensions::DeepLocate
  def self.deep_locate(comparator, object); end
end

module Hashie::Extensions::DeepMerge
  def deep_merge(other_hash, &block); end

  def deep_merge!(other_hash, &block); end
end

module Hashie::Extensions::DeepMerge
end

module Hashie::Extensions::IgnoreUndeclared
  def initialize_attributes(attributes); end

  def property_exists?(property); end
end

module Hashie::Extensions::IgnoreUndeclared
end

module Hashie::Extensions::IndifferentAccess
  def convert!(); end

  def convert_key(key); end

  def hash_lacking_indifference?(other); end

  def hash_with_indifference?(other); end

  def indifferent_access?(); end

  def indifferent_default(key=T.unsafe(nil)); end

  def indifferent_delete(key); end

  def indifferent_fetch(key, *args, &block); end

  def indifferent_key?(key); end

  def indifferent_replace(other_hash); end

  def indifferent_update(other_hash); end

  def indifferent_value(value); end

  def indifferent_values_at(*indices); end

  def indifferent_writer(key, value); end

  def merge(*args); end

  def merge!(*_); end
end

module Hashie::Extensions::IndifferentAccess
  def self.included(base); end

  def self.inject(hash); end

  def self.inject!(hash); end
end

module Hashie::Extensions::KeyConversion
end

module Hashie::Extensions::KeyConversion
  def self.included(base); end
end

module Hashie::Extensions::Mash::DefineAccessors
end

class Hashie::Extensions::Mash::DefineAccessors::Ext
  def define_initializing_reader(key, method_name); end

  def define_predicate(key, method_name); end

  def define_reader(key, method_name); end

  def define_underbang_reader(key, method_name); end

  def define_writer(key, method_name); end
end

class Hashie::Extensions::Mash::DefineAccessors::Ext
end

module Hashie::Extensions::Mash::DefineAccessors
  def self.extended(obj); end

  def self.included(klass); end
end

module Hashie::Extensions::Mash::KeepOriginalKeys
end

module Hashie::Extensions::Mash::KeepOriginalKeys
  def self.included(descendant); end
end

module Hashie::Extensions::Mash::PermissiveRespondTo
end

module Hashie::Extensions::Mash::PermissiveRespondTo
  def self.included(base); end
end

module Hashie::Extensions::Mash::SafeAssignment
  def []=(*args); end

  def custom_writer(key, *args); end
end

module Hashie::Extensions::Mash::SafeAssignment
end

module Hashie::Extensions::Mash::SymbolizeKeys
end

module Hashie::Extensions::Mash::SymbolizeKeys
  def self.included(base); end
end

module Hashie::Extensions::MergeInitializer
  def initialize(hash=T.unsafe(nil), default=T.unsafe(nil), &block); end
end

module Hashie::Extensions::MergeInitializer
end

module Hashie::Extensions::MethodAccess
end

module Hashie::Extensions::MethodAccess
  def self.included(base); end
end

module Hashie::Extensions::MethodAccessWithOverride
end

module Hashie::Extensions::MethodAccessWithOverride
  def self.included(base); end
end

module Hashie::Extensions::MethodQuery
  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodQuery
end

module Hashie::Extensions::MethodReader
  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodReader
end

module Hashie::Extensions::MethodWriter
  def convert_key(key); end

  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodWriter
end

class Hashie::Extensions::Parsers::YamlErbParser
  def initialize(file_path, options=T.unsafe(nil)); end

  def perform(); end
end

class Hashie::Extensions::Parsers::YamlErbParser
  def self.perform(file_path, options=T.unsafe(nil)); end
end

module Hashie::Extensions::StrictKeyAccess
  def [](key); end

  def default(_=T.unsafe(nil)); end

  def default=(_); end

  def default_proc(); end

  def default_proc=(_); end

  def key(value); end
end

class Hashie::Extensions::StrictKeyAccess::DefaultError
  def initialize(); end
end

class Hashie::Extensions::StrictKeyAccess::DefaultError
end

module Hashie::Extensions::StrictKeyAccess
end

module Hashie::Extensions::SymbolizeKeys
  extend ::Hashie::Extensions::SymbolizeKeys::ClassMethods
end

class Hashie::Mash
  ALLOWED_SUFFIXES = ::T.let(nil, ::T.untyped)
end

class Hashie::Rash
  def [](key); end

  def []=(key, value); end

  def all(query); end

  def fetch(*args); end

  def initialize(initial=T.unsafe(nil)); end

  def method_missing(*args, &block); end

  def optimize_every(); end

  def optimize_every=(optimize_every); end

  def update(other); end
end

class Hashie::Rash
end

class Hashie::Trash
  include ::Hashie::Extensions::Dash::PropertyTranslation
  include ::Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
end

class Hashie::Trash
  extend ::Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
end

module Hashie
  extend ::Hashie::Extensions::SymbolizeKeys::ClassMethods
end

module HealthCheck
  VERSION = ::T.let(nil, ::T.untyped)
end

class HighLine
  VERSION = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles
  BASIC_COLORS = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BLINK = ::T.let(nil, ::T.untyped)
  BLINK_STYLE = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  BOLD_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_RED = ::T.let(nil, ::T.untyped)
  BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CLEAR_STYLE = ::T.let(nil, ::T.untyped)
  COLORS = ::T.let(nil, ::T.untyped)
  COLOR_LIST = ::T.let(nil, ::T.untyped)
  CONCEALED = ::T.let(nil, ::T.untyped)
  CONCEALED_STYLE = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  CYAN_STYLE = ::T.let(nil, ::T.untyped)
  DARK = ::T.let(nil, ::T.untyped)
  DARK_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_CHAR = ::T.let(nil, ::T.untyped)
  ERASE_CHAR_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_LINE = ::T.let(nil, ::T.untyped)
  ERASE_LINE_STYLE = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  GRAY_STYLE = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  GREEN_STYLE = ::T.let(nil, ::T.untyped)
  GREY = ::T.let(nil, ::T.untyped)
  GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREY = ::T.let(nil, ::T.untyped)
  LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_RED = ::T.let(nil, ::T.untyped)
  LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GRAY = ::T.let(nil, ::T.untyped)
  ON_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREY = ::T.let(nil, ::T.untyped)
  ON_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_NONE = ::T.let(nil, ::T.untyped)
  ON_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  ON_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  RED_STYLE = ::T.let(nil, ::T.untyped)
  RESET = ::T.let(nil, ::T.untyped)
  RESET_STYLE = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  REVERSE_STYLE = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  STYLE_LIST = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  UNDERLINE_STYLE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  UNDERSCORE_STYLE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  WHITE_STYLE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
  YELLOW_STYLE = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles::ClassMethods
  RGB_COLOR_PATTERN = ::T.let(nil, ::T.untyped)
end

class HighLine::SampleColorScheme
  SAMPLE_SCHEME = ::T.let(nil, ::T.untyped)
end

module HighLine::StringExtensions
  STYLE_METHOD_NAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module Honeybadger
  BINDING_HAS_SOURCE_LOCATION = ::T.let(nil, ::T.untyped)
  GEM_ROOT = ::T.let(nil, ::T.untyped)
  MAX_EXCEPTION_CAUSES = ::T.let(nil, ::T.untyped)
  NOTIFIER = ::T.let(nil, ::T.untyped)
  NOT_BLANK = ::T.let(nil, ::T.untyped)
  PROJECT_ROOT = ::T.let(nil, ::T.untyped)
  RELATIVE_ROOT = ::T.let(nil, ::T.untyped)
  STRING_EMPTY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Backend::Response
  FRIENDLY_ERRORS = ::T.let(nil, ::T.untyped)
  NOT_BLANK = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Backend::Server
  CHECK_IN_ENDPOINT = ::T.let(nil, ::T.untyped)
  ENDPOINTS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Backtrace::Line
  INPUT_FORMAT = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_PATHS = ::T.let(nil, ::T.untyped)
  DEVELOPMENT_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
  DOTTED_KEY = ::T.let(nil, ::T.untyped)
  IGNORE_DEFAULT = ::T.let(nil, ::T.untyped)
  IVARS = ::T.let(nil, ::T.untyped)
  KEY_REPLACEMENT = ::T.let(nil, ::T.untyped)
  NOT_BLANK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Honeybadger::Config::Env
  ARRAY_VALUES = ::T.let(nil, ::T.untyped)
  CONFIG_KEY = ::T.let(nil, ::T.untyped)
  CONFIG_MAPPING = ::T.let(nil, ::T.untyped)
  IGNORED_TYPES = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Config::Mash
  def initialize(config, prefix: T.unsafe(nil), hash: T.unsafe(nil)); end

  def to_h(); end

  def to_hash(); end
  KEYS = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Config::Mash
end

class Honeybadger::Config::Ruby
  def backend(); end

  def backend=(backend); end

  def backtrace_filter(&block); end

  def before_notify(action=T.unsafe(nil), &block); end

  def exception_filter(&block); end

  def exception_fingerprint(&block); end

  def logger(); end

  def logger=(logger); end
end

class Honeybadger::Config::Ruby
end

module Honeybadger::Config::Yaml
  DISALLOWED_KEYS = ::T.let(nil, ::T.untyped)
end

module Honeybadger::Config::Yaml
  def self.dotify_keys(hash, key_prefix=T.unsafe(nil)); end

  def self.load_yaml(path); end

  def self.new(path, env=T.unsafe(nil)); end
end

module Honeybadger::Logging
  LOGGER_PROG = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Logging::ConfigLogger
  CALLER_LOCATION = ::T.let(nil, ::T.untyped)
  DEBUG_SUPPLEMENT = ::T.let(nil, ::T.untyped)
  INFO_SUPPLEMENT = ::T.let(nil, ::T.untyped)
  LOCATE_CALLER_LOCATION = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Notice
  BACKTRACE_FILTERS = ::T.let(nil, ::T.untyped)
  GEM_ROOT_CACHE = ::T.let(nil, ::T.untyped)
  PROJECT_ROOT_CACHE = ::T.let(nil, ::T.untyped)
  TAG_SANITIZER = ::T.let(nil, ::T.untyped)
  TAG_SEPERATOR = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Plugin
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Util::HTTP
  ERRORS = ::T.let(nil, ::T.untyped)
  HEADERS = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Util::Lambda
  AWS_ENV_MAP = ::T.let(nil, ::T.untyped)
end

module Honeybadger::Util::RequestHash
  CGI_WHITELIST = ::T.let(nil, ::T.untyped)
  HTTP_HEADER_PREFIX = ::T.let(nil, ::T.untyped)
end

module Honeybadger::Util::RequestPayload
  DEFAULTS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE_KEY = ::T.let(nil, ::T.untyped)
  KEYS = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Util::SQL
  DQuotedData = ::T.let(nil, ::T.untyped)
  DoubleQuoters = ::T.let(nil, ::T.untyped)
  EmptyReplacement = ::T.let(nil, ::T.untyped)
  EscapedQuotes = ::T.let(nil, ::T.untyped)
  Newline = ::T.let(nil, ::T.untyped)
  NumericData = ::T.let(nil, ::T.untyped)
  Replacement = ::T.let(nil, ::T.untyped)
  SQuotedData = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Util::Sanitizer
  BASIC_OBJECT = ::T.let(nil, ::T.untyped)
  COOKIE_PAIRS = ::T.let(nil, ::T.untyped)
  COOKIE_PAIR_SEP = ::T.let(nil, ::T.untyped)
  COOKIE_SEP = ::T.let(nil, ::T.untyped)
  DEPTH = ::T.let(nil, ::T.untyped)
  ENCODE_OPTS = ::T.let(nil, ::T.untyped)
  FILTERED = ::T.let(nil, ::T.untyped)
  IMMUTABLE = ::T.let(nil, ::T.untyped)
  MAX_STRING_SIZE = ::T.let(nil, ::T.untyped)
  RAISED = ::T.let(nil, ::T.untyped)
  RECURSION = ::T.let(nil, ::T.untyped)
  TRUNCATED = ::T.let(nil, ::T.untyped)
  VALID_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Util::Stats
  HAS_LOAD = ::T.let(nil, ::T.untyped)
  HAS_MEM = ::T.let(nil, ::T.untyped)
end

class Honeybadger::Worker
  BASE_THROTTLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN = ::T.let(nil, ::T.untyped)
end

Http = HTTP

module HttpParser
  ERRORS = ::T.let(nil, ::T.untyped)
  FLAG = ::T.let(nil, ::T.untyped)
  HTTP_MAX_HEADER_SIZE = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  UrlFields = ::T.let(nil, ::T.untyped)
end

class HttpParser::Parser
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::Flatten
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

module INotify
  VERSION = ::T.let(nil, ::T.untyped)
end

module INotify::Native::Flags
  IN_ACCESS = ::T.let(nil, ::T.untyped)
  IN_ALL_EVENTS = ::T.let(nil, ::T.untyped)
  IN_ATTRIB = ::T.let(nil, ::T.untyped)
  IN_CLOSE = ::T.let(nil, ::T.untyped)
  IN_CLOSE_NOWRITE = ::T.let(nil, ::T.untyped)
  IN_CLOSE_WRITE = ::T.let(nil, ::T.untyped)
  IN_CREATE = ::T.let(nil, ::T.untyped)
  IN_DELETE = ::T.let(nil, ::T.untyped)
  IN_DELETE_SELF = ::T.let(nil, ::T.untyped)
  IN_DONT_FOLLOW = ::T.let(nil, ::T.untyped)
  IN_IGNORED = ::T.let(nil, ::T.untyped)
  IN_ISDIR = ::T.let(nil, ::T.untyped)
  IN_MASK_ADD = ::T.let(nil, ::T.untyped)
  IN_MODIFY = ::T.let(nil, ::T.untyped)
  IN_MOVE = ::T.let(nil, ::T.untyped)
  IN_MOVED_FROM = ::T.let(nil, ::T.untyped)
  IN_MOVED_TO = ::T.let(nil, ::T.untyped)
  IN_MOVE_SELF = ::T.let(nil, ::T.untyped)
  IN_ONESHOT = ::T.let(nil, ::T.untyped)
  IN_ONLYDIR = ::T.let(nil, ::T.untyped)
  IN_OPEN = ::T.let(nil, ::T.untyped)
  IN_Q_OVERFLOW = ::T.let(nil, ::T.untyped)
  IN_UNMOUNT = ::T.let(nil, ::T.untyped)
  PC_NAME_MAX = ::T.let(nil, ::T.untyped)
end

class INotify::Notifier
  RECURSIVE_BLACKLIST = ::T.let(nil, ::T.untyped)
end

class IO
  def beep(); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(); end

  def echo=(echo); end

  def echo?(); end

  def getch(*_); end

  def getpass(*_); end

  def goto(); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(_); end

  def pressed?(); end

  def raw(*_); end

  def raw!(*_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end

  def winsize(); end

  def winsize=(winsize); end
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*_); end
end

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end
end

module IceNine
  VERSION = ::T.let(nil, ::T.untyped)
end

IceNine::Freezer::BasicObject = IceNine::Freezer::Object

class ImportApplicationsJob
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ImportApplicationsService::ImportRecord
  def self.inherited(s); end
end

class ImportApplicationsService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module InheritedResources
  ACTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module InheritedResources::BelongsToHelpers
  def parent(); end

  def parent?(); end

  def parent_type(); end
end

module InheritedResources::BelongsToHelpers
end

module InheritedResources::DSL
end

module InheritedResources::DSL
  def self.included(base); end
end

module InheritedResources::PolymorphicHelpers
  def parent(); end

  def parent?(); end

  def parent_class(); end

  def parent_type(); end
end

module InheritedResources::PolymorphicHelpers
end

module InheritedResources::ShallowHelpers
end

module InheritedResources::ShallowHelpers
end

module InheritedResources::SingletonHelpers
  def collection(); end

  def resource(); end
end

module InheritedResources::SingletonHelpers
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  include ::ActiveSupport::NumericWithFormat
  def to_bn(); end
end

class JSON::Ext::Generator::State
  def escape_slash(); end

  def escape_slash=(escape_slash); end

  def escape_slash?(); end
end

class JSON::Ext::Generator::State
  def self.from_state(_); end
end

class JSON::Ext::Parser
  def initialize(*_); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  def self.create_fast_state(); end

  def self.create_pretty_state(); end

  def self.load_file(filespec, opts=T.unsafe(nil)); end

  def self.load_file!(filespec, opts=T.unsafe(nil)); end
end

class Jbuilder
  BLANK = ::T.let(nil, ::T.untyped)
  NON_ENUMERABLES = ::T.let(nil, ::T.untyped)
end

module Jbuilder::DependencyTrackerMethods
  DIRECT_RENDERS = ::T.let(nil, ::T.untyped)
  INDIRECT_RENDERS = ::T.let(nil, ::T.untyped)
end

module Jquery::Rails
  JQUERY_2_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_3_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_UJS_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Jquery::Ui::Rails
  JQUERY_UI_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Actionview
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Activerecord
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Helpers
  PARAM_KEY_EXCEPT_LIST = ::T.let(nil, ::T.untyped)
end

class Kaminari::PaginatableArray
  ENTRY = ::T.let(nil, ::T.untyped)
end

module Kernel
  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def then(); end

  def yield_self(); end
end

module Kernel
  def self.`(_); end

  def self.at_exit(); end

  def self.autoload(_, _1); end

  def self.load(path, wrap=T.unsafe(nil)); end

  def self.require(path); end
end

class KeyError
  include ::DidYouMean::Correctable
end

module Launchy
  VERSION = ::T.let(nil, ::T.untyped)
end

module Launchy::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

module Libv8::Node
  LIBV8_VERSION = ::T.let(nil, ::T.untyped)
  NODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Listen
  VERSION = ::T.let(nil, ::T.untyped)
end

module Listen::Adapter
  OPTIMIZED_ADAPTERS = ::T.let(nil, ::T.untyped)
  POLLING_FALLBACK_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::BSD
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Base
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Darwin
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INCOMPATIBLE_GEM_VERSION = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Linux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
  README_URL = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Polling
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Windows
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Event::Loop
  MAX_STARTUP_SECONDS = ::T.let(nil, ::T.untyped)
end

Listen::Event::Loop::Error = Listen::Error

Listen::Event::Loop::NotStarted = Listen::Error::NotStarted

class Listen::Listener::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Record::SymlinkDetector
  README_URL = ::T.let(nil, ::T.untyped)
  SYMLINK_LOOP_ERROR = ::T.let(nil, ::T.untyped)
end

Listen::Record::SymlinkDetector::Error = Listen::Error

class Listen::Silencer
  DEFAULT_IGNORED_DIRECTORIES = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORED_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Location
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class LogApiCallJob
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class LogApiCallService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Logger
  include ::Honeybadger::Breadcrumbs::LogWrapper
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_IMPORTANT = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
  CSS_PROPERTY_STRING_WITHOUT_EMBEDDED_QUOTES = ::T.let(nil, ::T.untyped)
  DATA_ATTRIBUTE_NAME = ::T.let(nil, ::T.untyped)
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

module Lumberjack
  LINE_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Device::LogFile
  EXTERNAL_ENCODING = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Device::Writer
  DEFAULT_ADDITIONAL_LINES_TEMPLATE = ::T.let(nil, ::T.untyped)
  DEFAULT_FIRST_LINE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Lumberjack::LogEntry
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
  UNIT_OF_WORK_ID = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Rack::RequestId
  REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module Lumberjack::Severity
  DEBUG = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FATAL = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  SEVERITY_LABELS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  WARN = ::T.let(nil, ::T.untyped)
end

class Lumberjack::TaggedLoggerSupport::Formatter
end

class Lumberjack::Template
  MICROSECOND_TIME_FORMAT = ::T.let(nil, ::T.untyped)
  MILLISECOND_TIME_FORMAT = ::T.let(nil, ::T.untyped)
  PLACEHOLDER_PATTERN = ::T.let(nil, ::T.untyped)
  TEMPLATE_ARGUMENT_ORDER = ::T.let(nil, ::T.untyped)
end

class MIME::Type
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  VERSION = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Columnar
  LOAD_MUTEX = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Data
  PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  extend ::Enumerable
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::BccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateTimeElement
  def date_string(); end

  def initialize(string); end

  def time_string(); end
end

class Mail::DateTimeElement
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Header
  LIMITED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

class Mail::PartsList
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  include ::Mail::Utilities
  include ::Mail::Constants
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

class MappifyGeocodeService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Marcel
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  MAGIC = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

Markdown = RedcarpetCompat

module Marshal
  extend ::ActiveSupport::MarshalWithAutoloading
end

class Matrix
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def *(m); end

  def **(other); end

  def +(m); end

  def +@(); end

  def -(m); end

  def -@(); end

  def /(other); end

  def ==(other); end

  def [](i, j); end

  def []=(i, j, v); end

  def adjugate(); end

  def antisymmetric?(); end

  def coerce(other); end

  def cofactor(row, column); end

  def cofactor_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  def collect(which=T.unsafe(nil), &block); end

  def collect!(which=T.unsafe(nil)); end

  def column(j); end

  def column_count(); end

  def column_size(); end

  def column_vectors(); end

  def combine(*matrices, &block); end

  def component(i, j); end

  def conj(); end

  def conjugate(); end

  def det(); end

  def det_e(); end

  def determinant(); end

  def determinant_e(); end

  def diagonal?(); end

  def each_with_index(which=T.unsafe(nil)); end

  def eigen(); end

  def eigensystem(); end

  def element(i, j); end

  def elements_to_f(); end

  def elements_to_i(); end

  def elements_to_r(); end

  def empty?(); end

  def entrywise_product(m); end

  def eql?(other); end

  def find_index(*args); end

  def first_minor(row, column); end

  def hadamard_product(m); end

  def hermitian?(); end

  def hstack(*matrices); end

  def imag(); end

  def imaginary(); end

  def index(*args); end

  def initialize(rows, column_count=T.unsafe(nil)); end

  def inv(); end

  def inverse(); end

  def laplace_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  def lower_triangular?(); end

  def lup(); end

  def lup_decomposition(); end

  def map(which=T.unsafe(nil), &block); end

  def map!(which=T.unsafe(nil)); end

  def minor(*param); end

  def normal?(); end

  def orthogonal?(); end

  def permutation?(); end

  def rank(); end

  def rank_e(); end

  def real(); end

  def real?(); end

  def rect(); end

  def rectangular(); end

  def regular?(); end

  def round(ndigits=T.unsafe(nil)); end

  def row(i, &block); end

  def row_count(); end

  def row_size(); end

  def row_vectors(); end

  def rows(); end

  def singular?(); end

  def skew_symmetric?(); end

  def square?(); end

  def symmetric?(); end

  def t(); end

  def to_a(); end

  def to_matrix(); end

  def tr(); end

  def trace(); end

  def transpose(); end

  def unitary?(); end

  def upper_triangular?(); end

  def vstack(*matrices); end

  def zero?(); end
  SELECTORS = ::T.let(nil, ::T.untyped)
end

module Matrix::CoercionHelper
end

module Matrix::CoercionHelper
  def self.check_int(val, count, kind); end

  def self.check_range(val, count, kind); end

  def self.coerce_to(obj, cls, meth); end

  def self.coerce_to_int(obj); end

  def self.coerce_to_matrix(obj); end
end

module Matrix::ConversionHelper
end

module Matrix::ConversionHelper
end

class Matrix::EigenvalueDecomposition
  def initialize(a); end
end

class Matrix::LUPDecomposition
  include ::Matrix::ConversionHelper
  def det(); end

  def determinant(); end

  def initialize(a); end

  def l(); end

  def p(); end

  def pivots(); end

  def singular?(); end

  def solve(b); end

  def to_a(); end

  def to_ary(); end

  def u(); end
end

class Matrix::LUPDecomposition
end

class Matrix::Scalar
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def *(other); end

  def **(other); end

  def +(other); end

  def -(other); end

  def /(other); end

  def initialize(value); end
end

class Matrix::Scalar
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

class Matrix
  extend ::Exception2MessageMapper
  extend ::Matrix::ConversionHelper
  def self.included(mod); end
end

module Memoizable
  Freezer = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module MessagePack
  DEFAULT_EMPTY_PARAMS = ::T.let(nil, ::T.untyped)
end

module MessagePack::Time
  Packer = ::T.let(nil, ::T.untyped)
  TIME_AT_3_AVAILABLE = ::T.let(nil, ::T.untyped)
  Unpacker = ::T.let(nil, ::T.untyped)
end

class MessagePack::Timestamp
  TIMESTAMP32_MAX_SEC = ::T.let(nil, ::T.untyped)
  TIMESTAMP64_MAX_SEC = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db
  LOCK = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class MiniPortile
  KEYRING_NAME = ::T.let(nil, ::T.untyped)
  TAR_EXECUTABLES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module MiniRacer
  LIBV8_NODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  def _synchronize(); end

  def assert_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_in_epsilon(exp, act, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_match(matcher, obj, msg=T.unsafe(nil)); end

  def assert_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_output(stdout=T.unsafe(nil), stderr=T.unsafe(nil)); end

  def assert_path_exists(path, msg=T.unsafe(nil)); end

  def assert_predicate(o1, op, msg=T.unsafe(nil)); end

  def assert_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def assert_same(exp, act, msg=T.unsafe(nil)); end

  def assert_send(send_ary, m=T.unsafe(nil)); end

  def assert_silent(); end

  def assert_throws(sym, msg=T.unsafe(nil)); end

  def capture_io(); end

  def capture_subprocess_io(); end

  def diff(exp, act); end

  def exception_details(e, msg); end

  def fail_after(y, m, d, msg); end

  def flunk(msg=T.unsafe(nil)); end

  def message(msg=T.unsafe(nil), ending=T.unsafe(nil), &default); end

  def mu_pp(obj); end

  def mu_pp_for_diff(obj); end

  def pass(_msg=T.unsafe(nil)); end

  def refute_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_in_epsilon(a, b, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def refute_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def refute_match(matcher, obj, msg=T.unsafe(nil)); end

  def refute_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_path_exists(path, msg=T.unsafe(nil)); end

  def refute_predicate(o1, op, msg=T.unsafe(nil)); end

  def refute_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def refute_same(exp, act, msg=T.unsafe(nil)); end

  def skip(msg=T.unsafe(nil), bt=T.unsafe(nil)); end

  def skip_until(y, m, d, msg); end

  def skipped?(); end

  def things_to_diff(exp, act); end
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  def self.diff(); end

  def self.diff=(o); end
end

module Minitest::Guard
  def jruby?(platform=T.unsafe(nil)); end

  def maglev?(platform=T.unsafe(nil)); end

  def mri?(platform=T.unsafe(nil)); end

  def osx?(platform=T.unsafe(nil)); end

  def rubinius?(platform=T.unsafe(nil)); end

  def windows?(platform=T.unsafe(nil)); end
end

module Minitest::Guard
end

module Minitest::Reportable
  def class_name(); end

  def error?(); end

  def location(); end

  def passed?(); end

  def result_code(); end

  def skipped?(); end
end

module Minitest::Reportable
end

class Minitest::Runnable
  def assertions(); end

  def assertions=(assertions); end

  def failure(); end

  def failures(); end

  def failures=(failures); end

  def initialize(name); end

  def marshal_dump(); end

  def marshal_load(ary); end

  def name(); end

  def name=(o); end

  def passed?(); end

  def result_code(); end

  def run(); end

  def skipped?(); end

  def time(); end

  def time=(time); end

  def time_it(); end
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  def self.inherited(klass); end

  def self.methods_matching(re); end

  def self.on_signal(name, action); end

  def self.reset(); end

  def self.run(reporter, options=T.unsafe(nil)); end

  def self.run_one_method(klass, method_name, reporter); end

  def self.runnable_methods(); end

  def self.runnables(); end

  def self.with_info_handler(reporter, &block); end
end

class Minitest::Test
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  def capture_exceptions(); end

  def with_info_handler(&block); end
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

module Minitest::Test::LifecycleHooks
  def after_setup(); end

  def after_teardown(); end

  def before_setup(); end

  def before_teardown(); end

  def setup(); end

  def teardown(); end
end

module Minitest::Test::LifecycleHooks
end

class Minitest::Test
  extend ::Minitest::Guard
  def self.i_suck_and_my_tests_are_order_dependent!(); end

  def self.io_lock(); end

  def self.io_lock=(io_lock); end

  def self.make_my_diffs_pretty!(); end

  def self.parallelize_me!(); end

  def self.test_order(); end
end

class Module
  include ::NewRelic::Agent::MethodTracer::ClassMethods
  include ::NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer
  include ::NewRelic::Agent::MethodTracer
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class Monitor
  def enter(); end

  def exit(); end

  def try_enter(); end
end

module MonitorMixin
  def initialize(*args); end
  EXCEPTION_IMMEDIATE = ::T.let(nil, ::T.untyped)
  EXCEPTION_NEVER = ::T.let(nil, ::T.untyped)
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module MultiJson
  ALIASES = ::T.let(nil, ::T.untyped)
  REQUIREMENT_MAP = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

MultiJson::DecodeError = MultiJson::ParseError

MultiJson::LoadError = MultiJson::ParseError

module MultiJson::OptionsCache
  MAX_CACHE_SIZE = ::T.let(nil, ::T.untyped)
end

class MultiJson::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
end

module MultiXml
  CONTENT_ROOT = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  DISALLOWED_XML_TYPES = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  REQUIREMENT_MAP = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module Mutex_m
  VERSION = ::T.let(nil, ::T.untyped)
end

module Mysql2
  VERSION = ::T.let(nil, ::T.untyped)
end

class Mysql2::Client
  ALL_FLAGS = ::T.let(nil, ::T.untyped)
  BASIC_FLAGS = ::T.let(nil, ::T.untyped)
  COMPRESS = ::T.let(nil, ::T.untyped)
  CONNECT_ATTRS = ::T.let(nil, ::T.untyped)
  CONNECT_WITH_DB = ::T.let(nil, ::T.untyped)
  FOUND_ROWS = ::T.let(nil, ::T.untyped)
  IGNORE_SIGPIPE = ::T.let(nil, ::T.untyped)
  IGNORE_SPACE = ::T.let(nil, ::T.untyped)
  INTERACTIVE = ::T.let(nil, ::T.untyped)
  LOCAL_FILES = ::T.let(nil, ::T.untyped)
  LONG_FLAG = ::T.let(nil, ::T.untyped)
  LONG_PASSWORD = ::T.let(nil, ::T.untyped)
  MULTI_STATEMENTS = ::T.let(nil, ::T.untyped)
  NO_SCHEMA = ::T.let(nil, ::T.untyped)
  ODBC = ::T.let(nil, ::T.untyped)
  OPTION_MULTI_STATEMENTS_OFF = ::T.let(nil, ::T.untyped)
  OPTION_MULTI_STATEMENTS_ON = ::T.let(nil, ::T.untyped)
  PROTOCOL_41 = ::T.let(nil, ::T.untyped)
  PS_MULTI_RESULTS = ::T.let(nil, ::T.untyped)
  REMEMBER_OPTIONS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SECURE_CONNECTION = ::T.let(nil, ::T.untyped)
  SSL = ::T.let(nil, ::T.untyped)
  SSL_MODE_DISABLED = ::T.let(nil, ::T.untyped)
  SSL_MODE_PREFERRED = ::T.let(nil, ::T.untyped)
  SSL_MODE_REQUIRED = ::T.let(nil, ::T.untyped)
  SSL_MODE_VERIFY_CA = ::T.let(nil, ::T.untyped)
  SSL_MODE_VERIFY_IDENTITY = ::T.let(nil, ::T.untyped)
  SSL_VERIFY_SERVER_CERT = ::T.let(nil, ::T.untyped)
  TRANSACTIONS = ::T.let(nil, ::T.untyped)
end

class Mysql2::Error
  CODES = ::T.let(nil, ::T.untyped)
  ENCODE_OPTS = ::T.let(nil, ::T.untyped)
end

Mysql2::Util::TIMEOUT_ERROR_CLASS = Timeout::Error

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NameError
  include ::DidYouMean::Correctable
end

module Naught
  VERSION = ::T.let(nil, ::T.untyped)
end

module Nenv
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::BufferedIO
  def write_timeout(); end

  def write_timeout=(write_timeout); end
end

class Net::HTTP
  include ::NewRelic::Agent::Instrumentation::NetHTTP
  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def request_with_newrelic_trace(request, *args, &block); end

  def request_without_newrelic_trace(*args, &block); end

  def write_timeout(); end

  def write_timeout=(sec); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

Net::HTTPClientErrorCode = Net::HTTPClientError

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPInformation
end

Net::HTTPInformationCode::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPInformation
end

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRedirectionCode = Net::HTTPRedirection

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::IMAP
  def open_timeout(); end
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  Revision = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Net::SCP
  include ::Net::SCP::Download
end

module Net::SCP::Upload
  DEFAULT_CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

Net::SMTPSession = Net::SMTP

module Net::SSH::Authentication::ED25519Loader
  ERROR = ::T.let(nil, ::T.untyped)
end

class Net::SSH::Gateway
  MAX_PORT = ::T.let(nil, ::T.untyped)
  MIN_PORT = ::T.let(nil, ::T.untyped)
end

class Net::SSH::Transport::Algorithms
  DEFAULT_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

module Net::SSH::Transport::Constants
  KEXDH_GEX_GROUP = ::T.let(nil, ::T.untyped)
  KEXDH_GEX_INIT = ::T.let(nil, ::T.untyped)
  KEXDH_GEX_REPLY = ::T.let(nil, ::T.untyped)
  KEXDH_GEX_REQUEST = ::T.let(nil, ::T.untyped)
end

module Net::SSH::Transport::Kex::Curve25519Sha256Loader
  ERROR = ::T.let(nil, ::T.untyped)
  LOADED = ::T.let(nil, ::T.untyped)
end

class Net::SSH::Version
  PRE = ::T.let(nil, ::T.untyped)
end

class Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Netrc
  CYGWIN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WINDOWS = ::T.let(nil, ::T.untyped)
end

module NewRelic
  ARGS_FOR_RUBY_VERSION = ::T.let(nil, ::T.untyped)
  CANDIDATE_NEWRELIC_KEYS = ::T.let(nil, ::T.untyped)
  CONNECT_RETRY_PERIODS = ::T.let(nil, ::T.untyped)
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  FORMAT_NON_RACK = ::T.let(nil, ::T.untyped)
  FORMAT_RACK = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_NEWRELIC_KEY = ::T.let(nil, ::T.untyped)
  HTTP_TRACEPARENT_KEY = ::T.let(nil, ::T.untyped)
  HTTP_TRACESTATE_KEY = ::T.let(nil, ::T.untyped)
  MAX_RETRY_PERIOD = ::T.let(nil, ::T.untyped)
  MIN_RETRY_PERIOD = ::T.let(nil, ::T.untyped)
  MYSQL_EXPLAIN_COLUMNS = ::T.let(nil, ::T.untyped)
  NEWRELIC_KEY = ::T.let(nil, ::T.untyped)
  PRIORITY_PRECISION = ::T.let(nil, ::T.untyped)
  TRACEPARENT_KEY = ::T.let(nil, ::T.untyped)
  TRACESTATE_KEY = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent
  ENTITY_GUID_KEY = ::T.let(nil, ::T.untyped)
  ENTITY_NAME_KEY = ::T.let(nil, ::T.untyped)
  ENTITY_TYPE = ::T.let(nil, ::T.untyped)
  ENTITY_TYPE_KEY = ::T.let(nil, ::T.untyped)
  HOSTNAME_KEY = ::T.let(nil, ::T.untyped)
  SPAN_ID_KEY = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_INCREMENT_METRIC = ::T.let(nil, ::T.untyped)
  TRACE_ID_KEY = ::T.let(nil, ::T.untyped)
  UNKNOWN_METRIC = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Agent::InstanceMethods
  CUSTOM_EVENT = ::T.let(nil, ::T.untyped)
  ERROR_EVENT = ::T.let(nil, ::T.untyped)
  SPAN_EVENT = ::T.let(nil, ::T.untyped)
  TRANSACTION_EVENT = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread
  ANALYTIC_EVENT_DATA = ::T.let(nil, ::T.untyped)
  CUSTOM_EVENT_DATA = ::T.let(nil, ::T.untyped)
  ERROR_EVENT_DATA = ::T.let(nil, ::T.untyped)
  LOG_ONCE_KEYS_RESET_PERIOD = ::T.let(nil, ::T.untyped)
  SPAN_EVENT_DATA = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::AgentLogger
  LOG_LEVELS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::AttributeFilter
  DST_ALL = ::T.let(nil, ::T.untyped)
  DST_BROWSER_MONITORING = ::T.let(nil, ::T.untyped)
  DST_ERROR_COLLECTOR = ::T.let(nil, ::T.untyped)
  DST_NONE = ::T.let(nil, ::T.untyped)
  DST_SPAN_EVENTS = ::T.let(nil, ::T.untyped)
  DST_TRANSACTION_EVENTS = ::T.let(nil, ::T.untyped)
  DST_TRANSACTION_SEGMENTS = ::T.let(nil, ::T.untyped)
  DST_TRANSACTION_TRACER = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::AttributeProcessing
  EMPTY_ARRAY_STRING_LITERAL = ::T.let(nil, ::T.untyped)
  EMPTY_HASH_STRING_LITERAL = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Attributes
  COUNT_LIMIT = ::T.let(nil, ::T.untyped)
  KEY_LIMIT = ::T.let(nil, ::T.untyped)
  VALUE_LIMIT = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Autostart
  COMMA = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Commands::AgentCommandRouter
  ERROR_KEY = ::T.let(nil, ::T.untyped)
  SUCCESS_RESULT = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Configuration
  AUTOSTART_DENYLISTED_RAKE_TASKS = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  MASK_DEFAULTS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::DefaultSource
  DEFAULT_LOG_DIR = ::T.let(nil, ::T.untyped)
  SEMICOLON = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::EnvironmentSource
  SPECIAL_CASE_KEYS = ::T.let(nil, ::T.untyped)
  SUPPORTED_PREFIXES = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Configuration::EventHarvestConfig
  EVENT_HARVEST_CONFIG_KEY_MAPPING = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::HighSecuritySource
  OBFUSCATED = ::T.let(nil, ::T.untyped)
  OFF = ::T.let(nil, ::T.untyped)
  RAW = ::T.let(nil, ::T.untyped)
  SET_TO_OBFUSCATED = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::Manager
  MALFORMED_LABELS_WARNING = ::T.let(nil, ::T.untyped)
  MAX_LABEL_COUNT = ::T.let(nil, ::T.untyped)
  MAX_LABEL_LENGTH = ::T.let(nil, ::T.untyped)
  PARSING_LABELS_FAILURE = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::SecurityPolicySource
  COLON_COLON = ::T.let(nil, ::T.untyped)
  ENABLED = ::T.let(nil, ::T.untyped)
  SECURITY_SETTINGS_MAP = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Configuration::ServerSource
  EVENT_HARVEST_CONFIG_SUPPORTABILITY_METRIC_NAMES = ::T.let(nil, ::T.untyped)
  TOP_LEVEL_KEYS = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::CrossAppTracing
  NR_APPDATA_HEADER = ::T.let(nil, ::T.untyped)
  NR_ID_HEADER = ::T.let(nil, ::T.untyped)
  NR_MESSAGE_BROKER_ID_HEADER = ::T.let(nil, ::T.untyped)
  NR_MESSAGE_BROKER_SYNTHETICS_HEADER = ::T.let(nil, ::T.untyped)
  NR_MESSAGE_BROKER_TXN_HEADER = ::T.let(nil, ::T.untyped)
  NR_TXN_HEADER = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::CustomEventAggregator
  EVENT_TYPE_REGEX = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
  TIMESTAMP = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::DataMapperTracing
  AMPERSAND = ::T.let(nil, ::T.untyped)
  DATA_MAPPER = ::T.let(nil, ::T.untyped)
  PASSWORD_PARAM = ::T.let(nil, ::T.untyped)
  PASSWORD_REGEX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Database
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  KNOWN_OPERATIONS = ::T.let(nil, ::T.untyped)
  MAX_QUERY_LENGTH = ::T.let(nil, ::T.untyped)
  RECORD_FOR = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_REGEX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Database::ExplainPlanHelpers
  MULTIPLE_QUERIES = ::T.let(nil, ::T.untyped)
  QUERY_PLAN = ::T.let(nil, ::T.untyped)
  SELECT = ::T.let(nil, ::T.untyped)
  SQLITE_EXPLAIN_COLUMNS = ::T.let(nil, ::T.untyped)
  SUPPORTED_ADAPTERS_FOR_EXPLAIN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Database::ObfuscationHelpers
  CASSANDRA_COMPONENTS_REGEX = ::T.let(nil, ::T.untyped)
  CLEANUP_REGEX = ::T.let(nil, ::T.untyped)
  COMPONENTS_REGEX_MAP = ::T.let(nil, ::T.untyped)
  DIALECT_COMPONENTS = ::T.let(nil, ::T.untyped)
  FAILED_TO_OBFUSCATE_MESSAGE = ::T.let(nil, ::T.untyped)
  FALLBACK_REGEX = ::T.let(nil, ::T.untyped)
  MYSQL_COMPONENTS_REGEX = ::T.let(nil, ::T.untyped)
  ORACLE_COMPONENTS_REGEX = ::T.let(nil, ::T.untyped)
  PLACEHOLDER = ::T.let(nil, ::T.untyped)
  POSTGRES_COMPONENTS_REGEX = ::T.let(nil, ::T.untyped)
  SQLITE_COMPONENTS_REGEX = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Database::Obfuscator
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  QUERY_TOO_LARGE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Database::PostgresExplainObfuscator
  LABEL_LINE_REGEX = ::T.let(nil, ::T.untyped)
  QUOTED_STRINGS_REGEX = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Database::Statement
  DEFAULT_QUERY_NAME = ::T.let(nil, ::T.untyped)
  MYSQL2_PREFIX = ::T.let(nil, ::T.untyped)
  MYSQL_PREFIX = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  POSTGIS_PREFIX = ::T.let(nil, ::T.untyped)
  POSTGRES_PREFIX = ::T.let(nil, ::T.untyped)
  SQLITE_PREFIX = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::DatabaseAdapter
  VERSIONS = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Datastores::MetricHelper
  ALL = ::T.let(nil, ::T.untyped)
  ALL_OTHER = ::T.let(nil, ::T.untyped)
  ALL_WEB = ::T.let(nil, ::T.untyped)
  DEFAULT_PRODUCT_NAME = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
  OTHER_ROLLUP_METRIC = ::T.let(nil, ::T.untyped)
  ROLLUP_METRIC = ::T.let(nil, ::T.untyped)
  WEB_ROLLUP_METRIC = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Datastores::Mongo::EventFormatter
  DENYLISTED_KEYS = ::T.let(nil, ::T.untyped)
  OBFUSCATE_KEYS = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Datastores::Mongo::Obfuscator
  ALLOWLIST = ::T.let(nil, ::T.untyped)
  QUESTION_MARK = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Datastores::Redis
  ALL_BUT_FIRST = ::T.let(nil, ::T.untyped)
  BINARY_DATA_PLACEHOLDER = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  ELLIPSES = ::T.let(nil, ::T.untyped)
  MAXIMUM_ARGUMENT_LENGTH = ::T.let(nil, ::T.untyped)
  MAXIMUM_COMMAND_LENGTH = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  OBFUSCATE_ARGS = ::T.let(nil, ::T.untyped)
  PREFIX_RANGE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  STRINGS_SUPPORT_ENCODING = ::T.let(nil, ::T.untyped)
  SUFFIX_RANGE = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::DistributedTraceAttributes
  GUID_KEY = ::T.let(nil, ::T.untyped)
  INTRINSIC_KEYS = ::T.let(nil, ::T.untyped)
  PARENT_ACCOUNT_ID_KEY = ::T.let(nil, ::T.untyped)
  PARENT_APP_KEY = ::T.let(nil, ::T.untyped)
  PARENT_SPAN_ID_KEY = ::T.let(nil, ::T.untyped)
  PARENT_TRANSACTION_ID_KEY = ::T.let(nil, ::T.untyped)
  PARENT_TRANSPORT_DURATION_KEY = ::T.let(nil, ::T.untyped)
  PARENT_TRANSPORT_TYPE_KEY = ::T.let(nil, ::T.untyped)
  PARENT_TYPE_KEY = ::T.let(nil, ::T.untyped)
  SAMPLED_KEY = ::T.let(nil, ::T.untyped)
  TRACE_ID_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::DistributedTraceMetrics
  ALL_OTHER_SUFFIX = ::T.let(nil, ::T.untyped)
  ALL_SUFFIX = ::T.let(nil, ::T.untyped)
  ALL_WEB_SUFFIX = ::T.let(nil, ::T.untyped)
  UNKNOWN_CALLER_PREFIX = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::DistributedTracePayload
  DATA_KEY = ::T.let(nil, ::T.untyped)
  ID_KEY = ::T.let(nil, ::T.untyped)
  PARENT_ACCOUNT_ID_KEY = ::T.let(nil, ::T.untyped)
  PARENT_APP_KEY = ::T.let(nil, ::T.untyped)
  PARENT_TYPE = ::T.let(nil, ::T.untyped)
  PARENT_TYPE_KEY = ::T.let(nil, ::T.untyped)
  POUND = ::T.let(nil, ::T.untyped)
  PRIORITY_KEY = ::T.let(nil, ::T.untyped)
  SAMPLED_KEY = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
  TRACE_ID_KEY = ::T.let(nil, ::T.untyped)
  TRUSTED_ACCOUNT_KEY = ::T.let(nil, ::T.untyped)
  TX_KEY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::DistributedTraceTransportType
  ALLOWABLE_TRANSPORT_TYPES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  URL_SCHEMES = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::DistributedTracing::CrossAppMonitor
  CONTENT_LENGTH_HEADER_KEY = ::T.let(nil, ::T.untyped)
  NEWRELIC_APPDATA_HEADER = ::T.let(nil, ::T.untyped)
  NEWRELIC_ID_HEADER = ::T.let(nil, ::T.untyped)
  NEWRELIC_ID_HEADER_KEY = ::T.let(nil, ::T.untyped)
  NEWRELIC_TXN_HEADER = ::T.let(nil, ::T.untyped)
  NEWRELIC_TXN_HEADER_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::DistributedTracing::TraceContext
  COMMA = ::T.let(nil, ::T.untyped)
  EQUALS = ::T.let(nil, ::T.untyped)
  INVALID_PARENT_ID = ::T.let(nil, ::T.untyped)
  INVALID_TRACE_ID = ::T.let(nil, ::T.untyped)
  INVALID_VERSION = ::T.let(nil, ::T.untyped)
  MAX_TRACE_STATE_ENTRY_SIZE = ::T.let(nil, ::T.untyped)
  MAX_TRACE_STATE_SIZE = ::T.let(nil, ::T.untyped)
  PARENT_ID_KEY = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_TRACE_PARENT_PARSE_EXCEPTION = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_TRACE_STATE_INVALID_NR_ENTRY = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_TRACE_STATE_PARSE_EXCEPTION = ::T.let(nil, ::T.untyped)
  TP_PARENT_ID = ::T.let(nil, ::T.untyped)
  TP_TRACE_FLAGS = ::T.let(nil, ::T.untyped)
  TP_TRACE_ID = ::T.let(nil, ::T.untyped)
  TP_UNDEFINED_FIELDS = ::T.let(nil, ::T.untyped)
  TP_VERSION = ::T.let(nil, ::T.untyped)
  TRACE_FLAGS_KEY = ::T.let(nil, ::T.untyped)
  TRACE_ID_KEY = ::T.let(nil, ::T.untyped)
  TRACE_PARENT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
  TRACE_PARENT_REGEX = ::T.let(nil, ::T.untyped)
  UNDEFINED_FIELDS_KEY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::ErrorCollector
  EXCEPTION_TAG_IVAR = ::T.let(nil, ::T.untyped)
  MAX_ERROR_QUEUE_LENGTH = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::External
  NON_HTTP_CAT_CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  NON_HTTP_CAT_ID_HEADER = ::T.let(nil, ::T.untyped)
  NON_HTTP_CAT_SYNTHETICS_HEADER = ::T.let(nil, ::T.untyped)
  NON_HTTP_CAT_TXN_HEADER = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::GuidGenerator
  HEX_DIGITS = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::HTTPClients
  MUST_IMPLEMENT_ERROR = ::T.let(nil, ::T.untyped)
  WHINY_NIL_ERROR = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::HTTPClients::HTTPRequest
  COLON = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HTTP_RB = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::HTTPClients::NetHTTPRequest
  COLON = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  NET_HTTP = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::HTTPClients::TyphoeusHTTPRequest
  GET = ::T.let(nil, ::T.untyped)
  LHOST = ::T.let(nil, ::T.untyped)
  TYPHOEUS = ::T.let(nil, ::T.untyped)
  UHOST = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::HTTPClients::URIUtil
  QUESTION_MARK = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Hostname
  LOCALHOST = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::ActionCableSubscriber
  DOT_ACTION_CABLE = ::T.let(nil, ::T.untyped)
  PERFORM_ACTION = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::ActionViewSubscriber
  RENDER_COLLECTION_EVENT_NAME = ::T.let(nil, ::T.untyped)
  RENDER_PARTIAL_EVENT_NAME = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_EVENT_NAME = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveJobHelper
  ADAPTER_REGEX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveRecord
  EXPLAINER = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveRecordHelper
  ACTIVE_RECORD = ::T.let(nil, ::T.untyped)
  ACTIVE_RECORD_DEFAULT_PRODUCT_NAME = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  OPERATION_NAMES = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
  PRODUCT_NAMES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveRecordHelper::InstanceIdentification
  DATASTORE_DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  PRODUCT_SYMBOLS = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  SUPPORTED_ADAPTERS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveRecordNotifications
  SQL_ACTIVE_RECORD = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ActiveRecordPrepend
  ACTIVE_RECORD = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::ActiveRecordSubscriber
  def cached?(payload); end
  CACHED_QUERY_NAME = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::ActiveStorageSubscriber
  METHOD_NAME_MAPPING = ::T.let(nil, ::T.untyped)
  PATTERN = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Bunny
  DEFAULT_NAME = ::T.let(nil, ::T.untyped)
  DEFAULT_TYPE = ::T.let(nil, ::T.untyped)
  LIBRARY = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::ControllerInstrumentation
  NR_DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  NR_DO_NOT_TRACE_KEY = ::T.let(nil, ::T.untyped)
  NR_IGNORE_APDEX_KEY = ::T.let(nil, ::T.untyped)
  NR_IGNORE_ENDUSER_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::DelayedJob::Naming
  CLASS_METHOD_DELIMITER = ::T.let(nil, ::T.untyped)
  INSTANCE_METHOD_DELIMITER = ::T.let(nil, ::T.untyped)
  LEGACY_DJ_DEFAULT_CLASS = ::T.let(nil, ::T.untyped)
  LEGACY_DJ_FORMAT_DELIMITER = ::T.let(nil, ::T.untyped)
  LEGACY_DJ_FORMAT_PREFIX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::DelayedJobTracer
  NR_TRANSACTION_CATEGORY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Grape::Instrumentation
  API_ENDPOINT = ::T.let(nil, ::T.untyped)
  API_VERSION = ::T.let(nil, ::T.untyped)
  FORMAT_REGEX = ::T.let(nil, ::T.untyped)
  MIN_VERSION = ::T.let(nil, ::T.untyped)
  PIPE_STRING = ::T.let(nil, ::T.untyped)
  VERSION_REGEX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Memcache::Helper
  DATASTORE_INSTANCES_SUPPORTED_VERSION = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Memcache::Tracer
  LOCALHOST = ::T.let(nil, ::T.untyped)
  MEMCACHED = ::T.let(nil, ::T.untyped)
  MULTIGET_METRIC_NAME = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::MiddlewareProxy
  ANONYMOUS_CLASS = ::T.let(nil, ::T.untyped)
  OBJECT_CLASS_NAME = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::MiddlewareTracing
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  TXN_STARTED_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::MongodbCommandSubscriber
  COLLECTION = ::T.let(nil, ::T.untyped)
  ERROR_KEYS = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  MONGODB = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Instrumentation::NotificationsSubscriber
  def exception_object(payload); end
end

module NewRelic::Agent::Instrumentation::QueueTime
  ALL_QUEUE_METRIC = ::T.let(nil, ::T.untyped)
  CANDIDATE_HEADERS = ::T.let(nil, ::T.untyped)
  DIVISORS = ::T.let(nil, ::T.untyped)
  EARLIEST_ACCEPTABLE_TIME = ::T.let(nil, ::T.untyped)
  MIDDLEWARE_START_HEADER = ::T.let(nil, ::T.untyped)
  QUEUE_START_HEADER = ::T.let(nil, ::T.untyped)
  REQUEST_START_HEADER = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Redis
  CONNECT = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  MULTI_OPERATION = ::T.let(nil, ::T.untyped)
  PIPELINE_OPERATION = ::T.let(nil, ::T.untyped)
  PRODUCT_NAME = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::SequelHelper
  DEFAULT_PRODUCT_NAME = ::T.let(nil, ::T.untyped)
  PRODUCT_NAMES = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Sinatra::TransactionNamer
  ROOT = ::T.let(nil, ::T.untyped)
  SINATRA_ROUTE = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Instrumentation::Typhoeus
  EARLIEST_VERSION = ::T.let(nil, ::T.untyped)
  HYDRA_SEGMENT_NAME = ::T.let(nil, ::T.untyped)
  NOTICIBLE_ERROR_CLASS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::JavascriptInstrumentor
  AGENT_KEY = ::T.let(nil, ::T.untyped)
  APPLICATIONID_KEY = ::T.let(nil, ::T.untyped)
  APPLICATION_TIME_KEY = ::T.let(nil, ::T.untyped)
  ATTS_AGENT_SUBKEY = ::T.let(nil, ::T.untyped)
  ATTS_KEY = ::T.let(nil, ::T.untyped)
  ATTS_USER_SUBKEY = ::T.let(nil, ::T.untyped)
  BEACON_KEY = ::T.let(nil, ::T.untyped)
  ERROR_BEACON_KEY = ::T.let(nil, ::T.untyped)
  LICENSE_KEY_KEY = ::T.let(nil, ::T.untyped)
  QUEUE_TIME_KEY = ::T.let(nil, ::T.untyped)
  RUM_KEY_LENGTH = ::T.let(nil, ::T.untyped)
  SSL_FOR_HTTP_KEY = ::T.let(nil, ::T.untyped)
  TRANSACTION_NAME_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::LogOnce
  NUM_LOG_ONCE_KEYS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Logging::DecoratingFormatter
  CLOSING_BRACE = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  COMMA = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_KEY = ::T.let(nil, ::T.untyped)
  LOG_NAME_KEY = ::T.let(nil, ::T.untyped)
  MESSAGE_KEY = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer
  ALLOWED_KEYS = ::T.let(nil, ::T.untyped)
  DEFAULT_SETTINGS = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::MethodTracerHelpers
  MAX_ALLOWED_METRIC_DURATION = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::NewRelicService
  CONNECTION_ERRORS = ::T.let(nil, ::T.untyped)
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::NewRelicService::Encoders::Compressed::Gzip
  BINARY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::NewRelicService::JsonMarshaller
  OK_YAJL_VERSION = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::NewRelicService::SecurityPolicySettings
  EXPECTED_SECURITY_POLICIES = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Obfuscator
  EMPTY_KEY_BYTES = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::ParameterFiltering
  ACTION_DISPATCH_PARAMETER_FILTER = ::T.let(nil, ::T.untyped)
end

NewRelic::Agent::ParameterFiltering::RAILS_FILTER_CLASS = ActionDispatch::Http::ParameterFilter

module NewRelic::Agent::PayloadMetricMapping
  SPEC_MAPPINGS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::PipeChannelManager::Pipe
  NUM_LENGTH_BYTES = ::T.let(nil, ::T.untyped)
  READY_MARKER = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::PrioritySampledBuffer
  PRIORITY_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::RulesEngine
  LEADING_SLASH_REGEX = ::T.let(nil, ::T.untyped)
  SEGMENT_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::RulesEngine::SegmentTermsRule
  ADJACENT_PLACEHOLDERS_REGEX = ::T.let(nil, ::T.untyped)
  ADJACENT_PLACEHOLDERS_REPLACEMENT = ::T.let(nil, ::T.untyped)
  PREFIX_KEY = ::T.let(nil, ::T.untyped)
  SEGMENT_PLACEHOLDER = ::T.let(nil, ::T.untyped)
  TERMS_KEY = ::T.let(nil, ::T.untyped)
  VALID_PREFIX_SEGMENT_COUNT = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Samplers::DelayedJobSampler
  FAILED_QUERY = ::T.let(nil, ::T.untyped)
  LOCKED_QUERY = ::T.let(nil, ::T.untyped)
  QUEUE_QUERY_CONDITION = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Samplers::VMSampler
  CONSTANT_INVALIDATIONS_METRIC = ::T.let(nil, ::T.untyped)
  GC_RUNS_METRIC = ::T.let(nil, ::T.untyped)
  HEAP_FREE_METRIC = ::T.let(nil, ::T.untyped)
  HEAP_LIVE_METRIC = ::T.let(nil, ::T.untyped)
  MAJOR_GC_METRIC = ::T.let(nil, ::T.untyped)
  METHOD_INVALIDATIONS_METRIC = ::T.let(nil, ::T.untyped)
  MINOR_GC_METRIC = ::T.let(nil, ::T.untyped)
  OBJECT_ALLOCATIONS_METRIC = ::T.let(nil, ::T.untyped)
  THREAD_COUNT_METRIC = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::SpanEventAggregator
  SUPPORTABILITY_DISCARDED = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_TOTAL_SEEN = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_TOTAL_SENT = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::SpanEventPrimitive
  CATEGORY_KEY = ::T.let(nil, ::T.untyped)
  CLIENT = ::T.let(nil, ::T.untyped)
  COMPONENT_KEY = ::T.let(nil, ::T.untyped)
  DATASTORE_CATEGORY = ::T.let(nil, ::T.untyped)
  DB_INSTANCE_KEY = ::T.let(nil, ::T.untyped)
  DB_STATEMENT_KEY = ::T.let(nil, ::T.untyped)
  DURATION_KEY = ::T.let(nil, ::T.untyped)
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  ENTRY_POINT_KEY = ::T.let(nil, ::T.untyped)
  EVENT_TYPE = ::T.let(nil, ::T.untyped)
  GENERIC_CATEGORY = ::T.let(nil, ::T.untyped)
  GRANDPARENT_ID_KEY = ::T.let(nil, ::T.untyped)
  GUID_KEY = ::T.let(nil, ::T.untyped)
  HTTP_CATEGORY = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_KEY = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODE_KEY = ::T.let(nil, ::T.untyped)
  HTTP_URL_KEY = ::T.let(nil, ::T.untyped)
  NAME_KEY = ::T.let(nil, ::T.untyped)
  PARENT_ID_KEY = ::T.let(nil, ::T.untyped)
  PEER_ADDRESS_KEY = ::T.let(nil, ::T.untyped)
  PEER_HOSTNAME_KEY = ::T.let(nil, ::T.untyped)
  PRIORITY_KEY = ::T.let(nil, ::T.untyped)
  SAMPLED_KEY = ::T.let(nil, ::T.untyped)
  SPAN_KIND_KEY = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
  TRACE_ID_KEY = ::T.let(nil, ::T.untyped)
  TRACING_VENDORS_KEY = ::T.let(nil, ::T.untyped)
  TRANSACTION_ID_KEY = ::T.let(nil, ::T.untyped)
  TRANSACTION_NAME_KEY = ::T.let(nil, ::T.untyped)
  TRUSTED_PARENT_KEY = ::T.let(nil, ::T.untyped)
  TYPE_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::SqlSampler
  MAX_SAMPLES = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::StatsEngine::GCProfiler
  GC_OTHER = ::T.let(nil, ::T.untyped)
  GC_ROLLUP = ::T.let(nil, ::T.untyped)
  GC_WEB = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::SyntheticsEventAggregator
  TIMESTAMP = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::SyntheticsMonitor
  EXPECTED_PAYLOAD_LENGTH = ::T.let(nil, ::T.untyped)
  SUPPORTED_VERSION = ::T.let(nil, ::T.untyped)
  SYNTHETICS_HEADER_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Threading
  MAX_THREAD_PROFILE_DEPTH = ::T.let(nil, ::T.untyped)
  UNKNOWN_LINE_NUMBER = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Threading::BacktraceService
  ALL_TRANSACTIONS = ::T.let(nil, ::T.untyped)
  MAX_BUFFER_LENGTH = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Threading::ThreadProfile
  THREAD_PROFILER_NODES = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::TimestampSampledBuffer
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::TraceContextPayload
  DELIMITER = ::T.let(nil, ::T.untyped)
  FALSE_CHAR = ::T.let(nil, ::T.untyped)
  PARENT_TYPE = ::T.let(nil, ::T.untyped)
  PARENT_TYPES = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_PARSE_EXCEPTION = ::T.let(nil, ::T.untyped)
  TRUE_CHAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::TraceContextPayload
  extend ::NewRelic::Coerce
end

class NewRelic::Agent::Transaction
  ACTION_CABLE_PREFIX = ::T.let(nil, ::T.untyped)
  APDEX_ALL_METRIC = ::T.let(nil, ::T.untyped)
  APDEX_F = ::T.let(nil, ::T.untyped)
  APDEX_METRIC = ::T.let(nil, ::T.untyped)
  APDEX_OTHER_METRIC = ::T.let(nil, ::T.untyped)
  APDEX_OTHER_TXN_METRIC_PREFIX = ::T.let(nil, ::T.untyped)
  APDEX_S = ::T.let(nil, ::T.untyped)
  APDEX_T = ::T.let(nil, ::T.untyped)
  APDEX_TXN_METRIC_PREFIX = ::T.let(nil, ::T.untyped)
  CONTROLLER_PREFIX = ::T.let(nil, ::T.untyped)
  GRAPE_PREFIX = ::T.let(nil, ::T.untyped)
  JRUBY_CPU_TIME_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_PREFIX = ::T.let(nil, ::T.untyped)
  MIDDLEWARE_PREFIX = ::T.let(nil, ::T.untyped)
  MIDDLEWARE_SUMMARY_METRICS = ::T.let(nil, ::T.untyped)
  NESTED_TRANSACTION_PREFIX = ::T.let(nil, ::T.untyped)
  OTHER_SUMMARY_METRIC = ::T.let(nil, ::T.untyped)
  OTHER_TRANSACTION_PREFIX = ::T.let(nil, ::T.untyped)
  QUEUE_TIME_METRIC = ::T.let(nil, ::T.untyped)
  RACK_PREFIX = ::T.let(nil, ::T.untyped)
  RAKE_PREFIX = ::T.let(nil, ::T.untyped)
  SINATRA_PREFIX = ::T.let(nil, ::T.untyped)
  TASK_PREFIX = ::T.let(nil, ::T.untyped)
  TRANSACTION_NAMING_SOURCES = ::T.let(nil, ::T.untyped)
  WEB_SUMMARY_METRIC = ::T.let(nil, ::T.untyped)
  WEB_TRANSACTION_CATEGORIES = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::AbstractSegment
  INSPECT_IGNORE = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::DatastoreSegment
  NEWLINE = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Transaction::DistributedTracing
  ACCEPT_EXCEPTION_METRIC = ::T.let(nil, ::T.untyped)
  ACCEPT_PARSE_EXCEPTION_METRIC = ::T.let(nil, ::T.untyped)
  ACCEPT_PREFIX = ::T.let(nil, ::T.untyped)
  ACCEPT_SUCCESS_METRIC = ::T.let(nil, ::T.untyped)
  CREATE_EXCEPTION_METRIC = ::T.let(nil, ::T.untyped)
  CREATE_PREFIX = ::T.let(nil, ::T.untyped)
  CREATE_SUCCESS_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_ACCEPT_AFTER_CREATE_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_ACCEPT_MAJOR_VERSION_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_ACCEPT_NULL_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_ACCEPT_UNTRUSTED_ACCOUNT_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_MULTIPLE_ACCEPT_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_PREFIX = ::T.let(nil, ::T.untyped)
  LBRACE = ::T.let(nil, ::T.untyped)
  NEWRELIC_TRACE_KEY = ::T.let(nil, ::T.untyped)
  NULL_PAYLOAD = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_DISTRIBUTED_TRACE = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::ExternalRequestSegment
  APP_DATA_KEY = ::T.let(nil, ::T.untyped)
  EXTERNAL_ALL = ::T.let(nil, ::T.untyped)
  EXTERNAL_ALL_OTHER = ::T.let(nil, ::T.untyped)
  EXTERNAL_ALL_WEB = ::T.let(nil, ::T.untyped)
  MISSING_STATUS_CODE = ::T.let(nil, ::T.untyped)
  NR_SYNTHETICS_HEADER = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::MessageBrokerSegment
  ACTIONS = ::T.let(nil, ::T.untyped)
  CONSUME = ::T.let(nil, ::T.untyped)
  DESTINATION_TYPES = ::T.let(nil, ::T.untyped)
  EXCHANGE = ::T.let(nil, ::T.untyped)
  METRIC_PREFIX = ::T.let(nil, ::T.untyped)
  NAMED = ::T.let(nil, ::T.untyped)
  PRODUCE = ::T.let(nil, ::T.untyped)
  PURGE = ::T.let(nil, ::T.untyped)
  QUEUE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  TEMP = ::T.let(nil, ::T.untyped)
  TOPIC = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::RequestAttributes
  HTTP_ACCEPT_HEADER_KEY = ::T.let(nil, ::T.untyped)
  ROOT_PATH = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::SlowestSampleBuffer
  CAPACITY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::Trace
  AGENT_ATTRIBUTES_KEY = ::T.let(nil, ::T.untyped)
  INTRINSIC_ATTRIBUTES_KEY = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
  USER_ATTRIBUTES_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Transaction::TraceContext
  ACCEPT_EXCEPTION_METRIC = ::T.let(nil, ::T.untyped)
  ACCEPT_PREFIX = ::T.let(nil, ::T.untyped)
  ACCEPT_SUCCESS_METRIC = ::T.let(nil, ::T.untyped)
  CREATE_EXCEPTION_METRIC = ::T.let(nil, ::T.untyped)
  CREATE_PREFIX = ::T.let(nil, ::T.untyped)
  CREATE_SUCCESS_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_ACCEPT_AFTER_CREATE_METRIC = ::T.let(nil, ::T.untyped)
  IGNORE_MULTIPLE_ACCEPT_METRIC = ::T.let(nil, ::T.untyped)
  INVALID_TRACESTATE_PAYLOAD_METRIC = ::T.let(nil, ::T.untyped)
  NO_NR_ENTRY_TRACESTATE_METRIC = ::T.let(nil, ::T.untyped)
  SUPPORTABILITY_PREFIX = ::T.let(nil, ::T.untyped)
  TRACESTATE_PREFIX = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::TraceNode
  UNKNOWN_NODE_NAME = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::Transaction::Tracing
  OTHER_TRANSACTION_TOTAL_TIME = ::T.let(nil, ::T.untyped)
  WEB_TRANSACTION_TOTAL_TIME = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Transaction::TransactionSampleBuffer
  NO_SAMPLES = ::T.let(nil, ::T.untyped)
  SINGLE_BUFFER_MAX = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::TransactionErrorPrimitive
  DURATION_KEY = ::T.let(nil, ::T.untyped)
  ERROR_CLASS_KEY = ::T.let(nil, ::T.untyped)
  ERROR_EXPECTED_KEY = ::T.let(nil, ::T.untyped)
  ERROR_MESSAGE_KEY = ::T.let(nil, ::T.untyped)
  GUID_KEY = ::T.let(nil, ::T.untyped)
  NAME_KEY = ::T.let(nil, ::T.untyped)
  PORT_KEY = ::T.let(nil, ::T.untyped)
  PRIORITY_KEY = ::T.let(nil, ::T.untyped)
  REFERRING_TRANSACTION_GUID_KEY = ::T.let(nil, ::T.untyped)
  SAMPLED_KEY = ::T.let(nil, ::T.untyped)
  SAMPLE_TYPE = ::T.let(nil, ::T.untyped)
  SPAN_ID_KEY = ::T.let(nil, ::T.untyped)
  SYNTHETICS_JOB_ID_KEY = ::T.let(nil, ::T.untyped)
  SYNTHETICS_MONITOR_ID_KEY = ::T.let(nil, ::T.untyped)
  SYNTHETICS_RESOURCE_ID_KEY = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
  TYPE_KEY = ::T.let(nil, ::T.untyped)
end

module NewRelic::Agent::TransactionEventPrimitive
  APDEX_PERF_ZONE_KEY = ::T.let(nil, ::T.untyped)
  CAT_ALTERNATE_PATH_HASHES_KEY = ::T.let(nil, ::T.untyped)
  CAT_PATH_HASH_KEY = ::T.let(nil, ::T.untyped)
  CAT_REFERRING_PATH_HASH_KEY = ::T.let(nil, ::T.untyped)
  COMMA = ::T.let(nil, ::T.untyped)
  DURATION_KEY = ::T.let(nil, ::T.untyped)
  ERROR_KEY = ::T.let(nil, ::T.untyped)
  GUID_KEY = ::T.let(nil, ::T.untyped)
  NAME_KEY = ::T.let(nil, ::T.untyped)
  PRIORITY_KEY = ::T.let(nil, ::T.untyped)
  REFERRING_TRANSACTION_GUID_KEY = ::T.let(nil, ::T.untyped)
  SAMPLED_KEY = ::T.let(nil, ::T.untyped)
  SAMPLE_TYPE = ::T.let(nil, ::T.untyped)
  SYNTHETICS_JOB_ID_KEY = ::T.let(nil, ::T.untyped)
  SYNTHETICS_MONITOR_ID_KEY = ::T.let(nil, ::T.untyped)
  SYNTHETICS_RESOURCE_ID_KEY = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
  TYPE_KEY = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::TransactionMetrics
  DEFAULT_PROC = ::T.let(nil, ::T.untyped)
end

NewRelic::Agent::TransactionState = NewRelic::Agent::Tracer

module NewRelic::Agent::TransactionTimeAggregator
  INSTANCE_BUSY_METRIC = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Utilization::GCP
  MACH_TYPE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  ZONE = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::Utilization::Vendor
  SUCCESS = ::T.let(nil, ::T.untyped)
  VALID_CHARS = ::T.let(nil, ::T.untyped)
end

class NewRelic::Agent::UtilizationData
  KUBERNETES_SERVICE_HOST = ::T.let(nil, ::T.untyped)
  METADATA_VERSION = ::T.let(nil, ::T.untyped)
  VENDORS = ::T.let(nil, ::T.untyped)
end

module NewRelic::CollectionHelper
  DEFAULT_ARRAY_TRUNCATION_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_TRUNCATION_SIZE = ::T.let(nil, ::T.untyped)
end

class NewRelic::MetricSpec
  EMPTY_SCOPE = ::T.let(nil, ::T.untyped)
  LENGTH_RANGE = ::T.let(nil, ::T.untyped)
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

class NewRelic::NoticedError
  AGENT_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DESTINATION = ::T.let(nil, ::T.untyped)
  ERROR_CLASS_KEY = ::T.let(nil, ::T.untyped)
  ERROR_EXPECTED_KEY = ::T.let(nil, ::T.untyped)
  ERROR_MESSAGE_KEY = ::T.let(nil, ::T.untyped)
  ERROR_PREFIX_KEY = ::T.let(nil, ::T.untyped)
  INTRINSIC_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  NIL_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  STRIPPED_EXCEPTION_REPLACEMENT_MESSAGE = ::T.let(nil, ::T.untyped)
  UNKNOWN_ERROR_CLASS_NAME = ::T.let(nil, ::T.untyped)
  USER_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class NewRelic::Rack::BrowserMonitoring
  ALREADY_INSTRUMENTED_KEY = ::T.let(nil, ::T.untyped)
  ATTACHMENT = ::T.let(nil, ::T.untyped)
  BODY_START = ::T.let(nil, ::T.untyped)
  CHARSET_RE = ::T.let(nil, ::T.untyped)
  CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  GT = ::T.let(nil, ::T.untyped)
  HEAD_START = ::T.let(nil, ::T.untyped)
  SCAN_LIMIT = ::T.let(nil, ::T.untyped)
  TEXT_HTML = ::T.let(nil, ::T.untyped)
  X_UA_COMPATIBLE_RE = ::T.let(nil, ::T.untyped)
end

module NewRelic::SidekiqInstrumentation
end

class NewRelic::SidekiqInstrumentation::Client
  def call(_worker_class, job, *_); end

  def distributed_tracing_headers(); end
end

class NewRelic::SidekiqInstrumentation::Client
end

class NewRelic::SidekiqInstrumentation::Server
  include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation
  def call(worker, msg, queue, *_); end
end

class NewRelic::SidekiqInstrumentation::Server
  def self.default_trace_args(msg); end
end

module NewRelic::SidekiqInstrumentation
end

module NewRelic::SupportabilityHelper
  API_SUPPORTABILITY_METRICS = ::T.let(nil, ::T.untyped)
  API_SUPPORTABILITY_PREFIX = ::T.let(nil, ::T.untyped)
end

module NewRelic::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  def to_d(); end
end

module Nokogiri
  LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  LIBXML_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_MEMORY_MANAGEMENT = ::T.let(nil, ::T.untyped)
  LIBXSLT_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_DATETIME_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  OTHER_LIBRARY_VERSIONS = ::T.let(nil, ::T.untyped)
  PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  CACHE_SWITCH_NAME = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Gumbo
  DEFAULT_MAX_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML4
end

class Nokogiri::HTML4::ElementDescription
end

Nokogiri::HTML::ElementDescription::Desc = Struct::HTMLElementDescription

class Nokogiri::HTML4::ElementDescription
end

module Nokogiri::HTML4
end

module Nokogiri::HTML4
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML4::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML5
  HTML_NAMESPACE = ::T.let(nil, ::T.untyped)
  MATHML_NAMESPACE = ::T.let(nil, ::T.untyped)
  SVG_NAMESPACE = ::T.let(nil, ::T.untyped)
  XLINK_NAMESPACE = ::T.let(nil, ::T.untyped)
  XMLNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  XML_NAMESPACE = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Builder
  DEFAULT_DOCUMENT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_SCHEMA = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DEFAULT_XSLT = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Notiffany
  VERSION = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier
  NOTIFICATIONS_DISABLED = ::T.let(nil, ::T.untyped)
  ONLY_NOTIFY = ::T.let(nil, ::T.untyped)
  SUPPORTED = ::T.let(nil, ::T.untyped)
  USING_NOTIFIER = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Base
  ERROR_ADD_GEM_AND_RUN_BUNDLE = ::T.let(nil, ::T.untyped)
  HOSTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Detected
  NO_SUPPORTED_NOTIFIERS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Emacs
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_ELISP_ERB = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::File
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::GNTP
  CLIENT_DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Growl
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INSTALL_GROWLNOTIFY = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Libnotify
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Notifu
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::NotifySend
  DEFAULTS = ::T.let(nil, ::T.untyped)
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::TerminalNotifier
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ERROR_ONLY_OSX10 = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::TerminalTitle
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Tmux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ERROR_ANCIENT_TMUX = ::T.let(nil, ::T.untyped)
  ERROR_NOT_INSIDE_TMUX = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Tmux::Client
  CLIENT = ::T.let(nil, ::T.untyped)
end

class NotifySlackCommentDeliveryService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  CURB_MIN_VERSION = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  EXCON_MIDDLEWARE_MIN_VERSION = ::T.let(nil, ::T.untyped)
  EXCON_MIN_VERSION = ::T.let(nil, ::T.untyped)
  ElasticSearchClient = ::T.let(nil, ::T.untyped)
  HTTPCLIENT_MIN_VERSION = ::T.let(nil, ::T.untyped)
  IS_SECTION = ::T.let(nil, ::T.untyped)
  RANSACK_FORM_BUILDER = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class ObjectSpace::InternalObjectWrapper
  def internal_object_id(); end

  def type(); end
end

class ObjectSpace::InternalObjectWrapper
end

module ObjectSpace
  def self.allocation_class_path(_); end

  def self.allocation_generation(_); end

  def self.allocation_method_id(_); end

  def self.allocation_sourcefile(_); end

  def self.allocation_sourceline(_); end

  def self.count_imemo_objects(*_); end

  def self.count_nodes(*_); end

  def self.count_objects_size(*_); end

  def self.count_symbols(*_); end

  def self.count_tdata_objects(*_); end

  def self.dump(*_); end

  def self.dump_all(*_); end

  def self.internal_class_of(_); end

  def self.internal_super_of(_); end

  def self.memsize_of(_); end

  def self.memsize_of_all(*_); end

  def self.reachable_objects_from(_); end

  def self.reachable_objects_from_root(); end

  def self.trace_object_allocations(); end

  def self.trace_object_allocations_debug_start(); end
end

module Octokit
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  RATE_LIMITED_ERRORS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Octokit::Client
  CONVENIENCE_HEADERS = ::T.let(nil, ::T.untyped)
end

module Octokit::Client::ServiceStatus
  STATUS_ROOT = ::T.let(nil, ::T.untyped)
end

module Octokit::Connection
  CONVENIENCE_HEADERS = ::T.let(nil, ::T.untyped)
end

module Octokit::Default
  API_ENDPOINT = ::T.let(nil, ::T.untyped)
  MEDIA_TYPE = ::T.let(nil, ::T.untyped)
  MIDDLEWARE = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
  WEB_ENDPOINT = ::T.let(nil, ::T.untyped)
end

Octokit::Default::RACK_BUILDER_CLASS = Faraday::RackBuilder

class Octokit::Middleware::FollowRedirects
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  ENV_TO_CLEAR = ::T.let(nil, ::T.untyped)
  FOLLOW_LIMIT = ::T.let(nil, ::T.untyped)
  REDIRECT_CODES = ::T.let(nil, ::T.untyped)
  URI_UNSAFE = ::T.let(nil, ::T.untyped)
end

class Octokit::OneTimePasswordRequired
  OTP_DELIVERY_PATTERN = ::T.let(nil, ::T.untyped)
end

module Octokit::Preview
  PREVIEW_TYPES = ::T.let(nil, ::T.untyped)
end

class Octokit::Repository
  NAME_WITH_OWNER_PATTERN = ::T.let(nil, ::T.untyped)
end

module Octokit
  extend ::Octokit::Configurable
end

module Oj
  CUSTOM_MIMIC_JSON_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Oj::CStack
end

class Oj::CStack
end

class Oj::Cache
end

class Oj::Cache
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(_); end

  def negative?(); end
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*_); end

  def self.pbkdf2_hmac(*_); end

  def self.scrypt(*_); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::EC::Point
  def to_octet_string(_); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  def alpn_protocol(); end

  def tmp_key(); end
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  def ==(other); end
end

class OpenSSL::X509::CRL
  def ==(other); end
end

class OpenSSL::X509::Extension
  def ==(other); end
end

class OpenSSL::X509::Name
  def to_utf8(); end
end

class OpenSSL::X509::Request
  def ==(other); end
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenURI::Buffer
  def <<(str); end

  def io(); end

  def size(); end
  StringMax = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
end

class OpenURI::HTTPError
  def initialize(message, io); end
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end
end

module OpenURI::Meta
  def content_type_parse(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
end

module OpenURI::Meta
  def self.init(obj, src=T.unsafe(nil)); end
end

module OpenURI
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

module OrmAdapter
  VERSION = ::T.let(nil, ::T.untyped)
end

module Parallel
  Stop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Parallel::UserInterruptHandler
  INTERRUPT_SIGNAL = ::T.let(nil, ::T.untyped)
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Parser::CurrentRuby = Parser::Ruby26

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::MaxNumparamStack
  ORDINARY_PARAMS = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby24
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby26
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::StaticEnvironment
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class Pathname
  def fnmatch?(*_); end

  def glob(*_); end

  def make_symlink(_); end
end

Polyamorous::InnerJoin = Arel::Nodes::InnerJoin

Polyamorous::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

class Polyamorous::JoinDependency
  include ::Polyamorous::JoinDependencyExtensions
  def alias_tracker(); end

  def apply_column_aliases(relation); end

  def initialize(base, table, associations); end

  def instantiate(result_set, &block); end

  def join_root(); end

  def reflections(); end
end

class Polyamorous::JoinDependency::Aliases
  def column_alias(node, column); end

  def column_aliases(node); end

  def columns(); end

  def initialize(tables); end

  def slice_selected_attr_types(column_types); end

  def update_aliases_to_select_values(select_values); end
end

class Polyamorous::JoinDependency::Aliases::Column
  def alias(); end

  def alias=(_); end

  def name(); end

  def name=(_); end
end

class Polyamorous::JoinDependency::Aliases::Column
  def self.[](*_); end

  def self.members(); end
end

class Polyamorous::JoinDependency::Aliases::Table
  def column_aliases(); end

  def columns(); end

  def columns=(_); end

  def node(); end

  def node=(_); end
end

class Polyamorous::JoinDependency::Aliases::Table
  def self.[](*_); end

  def self.members(); end
end

class Polyamorous::JoinDependency::Aliases
end

Polyamorous::JoinDependency::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

class Polyamorous::JoinDependency::JoinBase
  def initialize(base_klass, table, children); end

  def instantiate(row, aliases, column_types=T.unsafe(nil), &block); end
end

class Polyamorous::JoinDependency::JoinBase
end

class Polyamorous::JoinDependency::JoinPart
  include ::Enumerable
  def base_klass(); end

  def children(); end

  def column_names(*args, &block); end

  def each(&block); end

  def each_children(&block); end

  def extract_record(row, column_names_with_alias); end

  def initialize(base_klass, children); end

  def instantiate(row, aliases, &block); end

  def match?(other); end

  def primary_key(*args, &block); end

  def table(); end

  def table_name(*args, &block); end
end

class Polyamorous::JoinDependency::JoinPart
end

class Polyamorous::JoinDependency
  extend ::Polyamorous::JoinDependencyExtensions::ClassMethods
  def self.make_tree(associations); end
end

Polyamorous::OuterJoin = Arel::Nodes::OuterJoin

module Polyfill
  VERSION = ::T.let(nil, ::T.untyped)
end

class Proc
  def <<(_); end

  def >>(_); end

  def clone(); end
end

class ProcessAlertAndRecordStatsService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ProcessAlertJob
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ProcessAlertService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ProgressBar::Components::Bar
  DEFAULT_PROGRESS_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_REMAINDER_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_UPA_STEPS = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Time
  ELAPSED_LABEL = ::T.let(nil, ::T.untyped)
  ESTIMATED_LABEL = ::T.let(nil, ::T.untyped)
  NO_TIME_ELAPSED_TEXT = ::T.let(nil, ::T.untyped)
  OOB_FRIENDLY_TIME_TEXT = ::T.let(nil, ::T.untyped)
  OOB_LIMIT_IN_HOURS = ::T.let(nil, ::T.untyped)
  OOB_TEXT_TO_FORMAT = ::T.let(nil, ::T.untyped)
  OOB_TIME_FORMATS = ::T.let(nil, ::T.untyped)
  OOB_UNKNOWN_TIME_TEXT = ::T.let(nil, ::T.untyped)
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Title
  DEFAULT_TITLE = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::Molecule
  BAR_MOLECULES = ::T.let(nil, ::T.untyped)
  MOLECULES = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::String
  ANSI_SGR_PATTERN = ::T.let(nil, ::T.untyped)
  MOLECULE_PATTERN = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Output
  DEFAULT_OUTPUT_STREAM = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::NonTty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::Tty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Progress
  DEFAULT_BEGINNING_POSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SMOOTHING = ::T.let(nil, ::T.untyped)
  DEFAULT_TOTAL = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Time
  TIME_MOCKING_LIBRARY_METHODS = ::T.let(nil, ::T.untyped)
end

class Pry
  BINDING_METHOD_IMPL = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  EMPTY_COMPLETIONS = ::T.let(nil, ::T.untyped)
  HAS_SAFE_LEVEL = ::T.let(nil, ::T.untyped)
  LOCAL_RC_FILE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::BasicObject
  ENV = ::T.let(nil, ::T.untyped)
end

Pry::BasicObject::Dir = Dir

Pry::BasicObject::File = File

Pry::BasicObject::Kernel = Kernel

Pry::BasicObject::LoadError = LoadError

Pry::BasicObject::Pry = Pry

class Pry::Code
  extend ::MethodSource::CodeHelpers
end

class Pry::CodeFile
  DEFAULT_EXT = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  FILES = ::T.let(nil, ::T.untyped)
  INITIAL_PWD = ::T.let(nil, ::T.untyped)
end

class Pry::Command
  VOID_VALUE = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Constants
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Globals
  BUILTIN_GLOBALS = ::T.let(nil, ::T.untyped)
  PSEUDO_GLOBALS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Wtf
  RUBY_FRAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::DocumentationHelpers
  YARD_TAGS = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::Text
  COLORS = ::T.let(nil, ::T.untyped)
end

class Pry::Indent
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
  MIDWAY_TOKENS = ::T.let(nil, ::T.untyped)
  OPEN_TOKENS = ::T.let(nil, ::T.untyped)
  OPTIONAL_DO_TOKENS = ::T.let(nil, ::T.untyped)
  SINGLELINE_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  STATEMENT_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Pry::InputCompleter
  ARRAY_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_OR_METHOD_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_REGEXP = ::T.let(nil, ::T.untyped)
  GLOBALVARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  HEX_REGEXP = ::T.let(nil, ::T.untyped)
  NUMERIC_REGEXP = ::T.let(nil, ::T.untyped)
  PROC_OR_HASH_REGEXP = ::T.let(nil, ::T.untyped)
  REGEX_REGEXP = ::T.let(nil, ::T.untyped)
  RESERVED_WORDS = ::T.let(nil, ::T.untyped)
  SYMBOL_METHOD_CALL_REGEXP = ::T.let(nil, ::T.untyped)
  SYMBOL_REGEXP = ::T.let(nil, ::T.untyped)
  TOPLEVEL_LOOKUP_REGEXP = ::T.let(nil, ::T.untyped)
  VARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  WORD_ESCAPE_STR = ::T.let(nil, ::T.untyped)
end

class Pry::Inspector
  MAP = ::T.let(nil, ::T.untyped)
end

class Pry::ObjectPath
  SPECIAL_TERMS = ::T.let(nil, ::T.untyped)
end

class Pry::Output
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class Pry::Slop
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::Slop::Option
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

module Psych
  extend ::Bootsnap::CompileCache::YAML::Patch
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.remove_type(type_tag); end
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module Pundit
  SUFFIX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class QueueUpAlertsService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class REXML::Light::Node
  NAMESPLIT = ::T.let(nil, ::T.untyped)
  PARENTS = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::BaseParser
  EXTERNAL_ID_PUBLIC = ::T.let(nil, ::T.untyped)
  EXTERNAL_ID_SYSTEM = ::T.let(nil, ::T.untyped)
  PUBLIC_ID = ::T.let(nil, ::T.untyped)
  QNAME = ::T.let(nil, ::T.untyped)
  QNAME_STR = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::XPathParser
  LOCAL_NAME_WILDCARD = ::T.let(nil, ::T.untyped)
  PREFIX_WILDCARD = ::T.let(nil, ::T.untyped)
end

class REXML::XPathParser
  DEBUG = ::T.let(nil, ::T.untyped)
end

module RGeo
  VERSION = ::T.let(nil, ::T.untyped)
end

module RGeo::CoordSys::CS
  AO_DOWN = ::T.let(nil, ::T.untyped)
  AO_EAST = ::T.let(nil, ::T.untyped)
  AO_NORTH = ::T.let(nil, ::T.untyped)
  AO_OTHER = ::T.let(nil, ::T.untyped)
  AO_SOUTH = ::T.let(nil, ::T.untyped)
  AO_UP = ::T.let(nil, ::T.untyped)
  AO_WEST = ::T.let(nil, ::T.untyped)
  HD_CLASSIC = ::T.let(nil, ::T.untyped)
  HD_GEOCENTRIC = ::T.let(nil, ::T.untyped)
  HD_MAX = ::T.let(nil, ::T.untyped)
  HD_MIN = ::T.let(nil, ::T.untyped)
  HD_OTHER = ::T.let(nil, ::T.untyped)
  LD_MAX = ::T.let(nil, ::T.untyped)
  LD_MIN = ::T.let(nil, ::T.untyped)
  VD_ALTITUDE_BAROMETRIC = ::T.let(nil, ::T.untyped)
  VD_DEPTH = ::T.let(nil, ::T.untyped)
  VD_ELLIPSOIDAL = ::T.let(nil, ::T.untyped)
  VD_GEOID_MODE_DERIVED = ::T.let(nil, ::T.untyped)
  VD_MAX = ::T.let(nil, ::T.untyped)
  VD_MIN = ::T.let(nil, ::T.untyped)
  VD_NORMAL = ::T.let(nil, ::T.untyped)
  VD_ORTHOMETRIC = ::T.let(nil, ::T.untyped)
  VD_OTHER = ::T.let(nil, ::T.untyped)
end

class RGeo::CoordSys::CS::AxisInfo
  NAMES_BY_VALUE = ::T.let(nil, ::T.untyped)
end

module RGeo::Feature::GeometryCollection
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::Feature::MultiCurve
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::Feature::MultiLineString
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::Feature::MultiPoint
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::Feature::MultiPolygon
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::Feature::MultiSurface
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::GeoJSON
  VERSION = ::T.let(nil, ::T.untyped)
end

class RGeo::Geographic::SimpleMercatorProjector
  EQUATORIAL_RADIUS = ::T.let(nil, ::T.untyped)
end

module RGeo::Geographic::SphericalMath
  RADIUS = ::T.let(nil, ::T.untyped)
end

class RGeo::Geographic::SphericalMath::PointXYZ
  P1 = ::T.let(nil, ::T.untyped)
  P2 = ::T.let(nil, ::T.untyped)
end

module RGeo::Geos
  CAPI_SUPPORTED = ::T.let(nil, ::T.untyped)
  CAP_FLAT = ::T.let(nil, ::T.untyped)
  CAP_ROUND = ::T.let(nil, ::T.untyped)
  CAP_SQUARE = ::T.let(nil, ::T.untyped)
  FFI_SUPPORTED = ::T.let(nil, ::T.untyped)
  FFI_SUPPORT_EXCEPTION = ::T.let(nil, ::T.untyped)
  JOIN_BEVEL = ::T.let(nil, ::T.untyped)
  JOIN_MITRE = ::T.let(nil, ::T.untyped)
  JOIN_ROUND = ::T.let(nil, ::T.untyped)
end

module RGeo::Geos::FFIGeometryCollectionMethods
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class RGeo::Geos::ZMFactory
  TYPE_KLASSES = ::T.let(nil, ::T.untyped)
end

module RGeo::Geos::ZMGeometryCollectionMethods
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::ImplHelper::BasicGeometryCollectionMethods
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module RGeo::ImplHelper::Math
  DEGREES_PER_RADIAN = ::T.let(nil, ::T.untyped)
  RADIANS_PER_DEGREE = ::T.let(nil, ::T.untyped)
end

class RGeo::WKRep::WKBGenerator
  TYPE_CODES = ::T.let(nil, ::T.untyped)
end

module RSS
  AVAILABLE_PARSERS = ::T.let(nil, ::T.untyped)
  AVAILABLE_PARSER_LIBRARIES = ::T.let(nil, ::T.untyped)
  DEBUG = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class RSS::BaseListener
end

class RSS::BaseListener
  extend ::RSS::Utils
  def self.available_tags(uri); end

  def self.class_name(uri, tag_name); end

  def self.getter(uri, tag_name); end

  def self.install_class_name(uri, tag_name, class_name); end

  def self.install_get_text_element(uri, name, accessor_base); end

  def self.raise_for_undefined_entity?(); end

  def self.register_uri(uri, name); end

  def self.setter(uri, tag_name); end

  def self.uri_registered?(uri, name); end
end

module RSS::BaseModel
  include ::RSS::Utils
  def install_date_element(tag_name, uri, occurs, name=T.unsafe(nil), type=T.unsafe(nil), disp_name=T.unsafe(nil)); end

  def install_have_attribute_element(tag_name, uri, occurs, name=T.unsafe(nil), type=T.unsafe(nil)); end

  def install_have_child_element(tag_name, uri, occurs, name=T.unsafe(nil), type=T.unsafe(nil)); end

  def install_have_children_element(tag_name, uri, occurs, name=T.unsafe(nil), plural_name=T.unsafe(nil)); end

  def install_text_element(tag_name, uri, occurs, name=T.unsafe(nil), type=T.unsafe(nil), disp_name=T.unsafe(nil)); end
end

module RSS::BaseModel
end

class RSS::BaseParser
  def do_validate(); end

  def do_validate=(new_value); end

  def ignore_unknown_element(); end

  def ignore_unknown_element=(new_value); end

  def initialize(rss); end

  def parse(); end

  def rss(); end
end

class RSS::BaseParser
  def self.raise_for_undefined_entity?(); end
end

class RSS::ConversionError
  def from(); end

  def initialize(string, to, from); end

  def string(); end

  def to(); end
end

class RSS::ConversionError
end

class RSS::Converter
  include ::RSS::Utils
  def convert(value); end

  def def_convert(depth=T.unsafe(nil)); end

  def def_else_enc(to_enc, from_enc); end

  def def_iconv_convert(to_enc, from_enc, depth=T.unsafe(nil)); end

  def def_same_enc(); end

  def def_to_euc_jp_from_iso_2022_jp(); end

  def def_to_euc_jp_from_shift_jis(); end

  def def_to_euc_jp_from_utf_8(); end

  def def_to_iso_2022_jp_from_euc_jp(); end

  def def_to_iso_8859_1_from_utf_8(); end

  def def_to_shift_jis_from_euc_jp(); end

  def def_to_shift_jis_from_utf_8(); end

  def def_to_utf_8_from_euc_jp(); end

  def def_to_utf_8_from_iso_8859_1(); end

  def def_to_utf_8_from_shift_jis(); end

  def def_uconv_convert_if_can(meth, to_enc, from_enc, nkf_arg); end

  def initialize(to_enc, from_enc=T.unsafe(nil)); end
end

class RSS::Converter
end

class RSS::Element
  include ::RSS::Utils
  include ::RSS::SetupMaker
  def convert(value); end

  def converter=(converter); end

  def do_validate(); end

  def do_validate=(do_validate); end

  def full_name(); end

  def have_required_elements?(); end

  def have_xml_content?(); end

  def initialize(do_validate=T.unsafe(nil), attrs=T.unsafe(nil)); end

  def need_base64_encode?(); end

  def parent(); end

  def parent=(parent); end

  def set_next_element(tag_name, next_element); end

  def tag_name(); end

  def to_s(need_convert=T.unsafe(nil), indent=T.unsafe(nil)); end

  def valid?(ignore_unknown_element=T.unsafe(nil)); end

  def validate(ignore_unknown_element=T.unsafe(nil)); end

  def validate_for_stream(tags, ignore_unknown_element=T.unsafe(nil)); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  INDENT = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Element
  extend ::RSS::BaseModel
  extend ::RSS::Utils
  extend ::RSS::Utils::InheritedReader
  def self.add_have_children_element(variable_name, plural_name); end

  def self.add_need_initialize_variable(variable_name); end

  def self.add_plural_form(singular, plural); end

  def self.add_to_element_method(method_name); end

  def self.content_setup(type=T.unsafe(nil), disp_name=T.unsafe(nil)); end

  def self.def_corresponded_attr_reader(name, type=T.unsafe(nil)); end

  def self.def_corresponded_attr_writer(name, type=T.unsafe(nil), disp_name=T.unsafe(nil)); end

  def self.get_attributes(); end

  def self.have_children_elements(); end

  def self.have_content?(); end

  def self.inherited(klass); end

  def self.inherited_base(); end

  def self.install_get_attribute(name, uri, required=T.unsafe(nil), type=T.unsafe(nil), disp_name=T.unsafe(nil), element_name=T.unsafe(nil)); end

  def self.install_model(tag, uri, occurs=T.unsafe(nil), getter=T.unsafe(nil), plural=T.unsafe(nil)); end

  def self.install_must_call_validator(prefix, uri); end

  def self.install_ns(prefix, uri); end

  def self.models(); end

  def self.must_call_validators(); end

  def self.need_initialize_variables(); end

  def self.need_parent?(); end

  def self.plural_forms(); end

  def self.required_prefix(); end

  def self.required_uri(); end

  def self.tag_name(); end

  def self.to_element_methods(); end
end

class RSS::Error
end

class RSS::Error
end

class RSS::InvalidRSSError
end

class RSS::InvalidRSSError
end

module RSS::ListenerMixin
  def do_validate(); end

  def do_validate=(do_validate); end

  def ignore_unknown_element(); end

  def ignore_unknown_element=(ignore_unknown_element); end

  def initialize(); end

  def instruction(name, content); end

  def rss(); end

  def tag_end(name); end

  def tag_start(name, attributes); end

  def text(data); end

  def xmldecl(version, encoding, standalone); end
  CONTENT_PATTERN = ::T.let(nil, ::T.untyped)
  NAMESPLIT = ::T.let(nil, ::T.untyped)
end

module RSS::ListenerMixin
end

class RSS::MissingAttributeError
  def attribute(); end

  def initialize(tag, attribute); end

  def tag(); end
end

class RSS::MissingAttributeError
end

class RSS::MissingTagError
  def initialize(tag, parent); end

  def parent(); end

  def tag(); end
end

class RSS::MissingTagError
end

class RSS::NSError
  def initialize(tag, prefix, require_uri); end

  def prefix(); end

  def tag(); end

  def uri(); end
end

class RSS::NSError
end

class RSS::NotAvailableValueError
  def attribute(); end

  def initialize(tag, value, attribute=T.unsafe(nil)); end

  def tag(); end

  def value(); end
end

class RSS::NotAvailableValueError
end

RSS::NotExceptedTagError = RSS::NotExpectedTagError

class RSS::NotExpectedTagError
  def initialize(tag, uri, parent); end

  def parent(); end

  def tag(); end

  def uri(); end
end

class RSS::NotExpectedTagError
end

class RSS::NotSetError
  def initialize(name, variables); end

  def name(); end

  def variables(); end
end

class RSS::NotSetError
end

class RSS::NotValidXMLParser
  def initialize(parser); end
end

class RSS::NotValidXMLParser
end

class RSS::NotWellFormedError
  def element(); end

  def initialize(line=T.unsafe(nil), element=T.unsafe(nil)); end

  def line(); end
end

class RSS::NotWellFormedError
end

class RSS::OverlappedPrefixError
  def initialize(prefix); end

  def prefix(); end
end

class RSS::OverlappedPrefixError
end

class RSS::Parser
  def do_validate(*args, &block); end

  def do_validate=(*args, &block); end

  def ignore_unknown_element(*args, &block); end

  def ignore_unknown_element=(*args, &block); end

  def initialize(rss, parser_class=T.unsafe(nil)); end

  def parse(*args, &block); end

  def rss(*args, &block); end
end

class RSS::Parser
  extend ::Forwardable
  def self.default_parser(); end

  def self.default_parser=(new_value); end

  def self.parse(rss, *args); end
end

class RSS::RDF
  include ::RSS::RSS10
  include ::RSS::RootElementMixin
  include ::RSS::XMLStyleSheetMixin
  def channel(); end

  def channel=(channel); end

  def image(); end

  def image=(image); end

  def initialize(version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end

  def item(*args); end

  def item=(*args); end

  def items(); end

  def rss_version(); end

  def set_item(*args); end

  def textinput(); end

  def textinput=(textinput); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Bag
  include ::RSS::RSS10
  def initialize(*args); end

  def li(*args); end

  def li=(*args); end

  def lis(); end

  def set_li(*args); end

  def setup_maker(target); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

RSS::RDF::Bag::Li = RSS::RDF::Li

class RSS::RDF::Bag
end

class RSS::RDF::Channel
  include ::RSS::RSS10
  def about(); end

  def about=(about); end

  def description(); end

  def description=(description); end

  def image(); end

  def image=(image); end

  def initialize(*args); end

  def items(); end

  def items=(items); end

  def link(); end

  def link=(link); end

  def textinput(); end

  def textinput=(textinput); end

  def title(); end

  def title=(title); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Channel::Image
  include ::RSS::RSS10
  def initialize(*args); end

  def resource(); end

  def resource=(resource); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Channel::Image
end

class RSS::RDF::Channel::Items
  include ::RSS::RSS10
  def Seq(); end

  def Seq=(_); end

  def initialize(*args); end

  def resources(); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

RSS::RDF::Channel::Items::Seq = RSS::RDF::Seq

class RSS::RDF::Channel::Items
end

class RSS::RDF::Channel::Textinput
  include ::RSS::RSS10
  def initialize(*args); end

  def resource(); end

  def resource=(resource); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Channel::Textinput
end

class RSS::RDF::Channel
end

class RSS::RDF::Image
  include ::RSS::RSS10
  def about(); end

  def about=(about); end

  def initialize(*args); end

  def link(); end

  def link=(link); end

  def title(); end

  def title=(title); end

  def url(); end

  def url=(url); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Image
end

class RSS::RDF::Item
  include ::RSS::RSS10
  def about(); end

  def about=(about); end

  def description(); end

  def description=(description); end

  def initialize(*args); end

  def link(); end

  def link=(link); end

  def title(); end

  def title=(title); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Item
end

class RSS::RDF::Li
  include ::RSS::RSS10
  def initialize(*args); end

  def resource(); end

  def resource=(resource); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Li
end

class RSS::RDF::Seq
  include ::RSS::RSS10
  def initialize(*args); end

  def li(*args); end

  def li=(*args); end

  def lis(); end

  def set_li(*args); end

  def setup_maker(target); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

RSS::RDF::Seq::Li = RSS::RDF::Li

class RSS::RDF::Seq
end

class RSS::RDF::Textinput
  include ::RSS::RSS10
  def about(); end

  def about=(about); end

  def description(); end

  def description=(description); end

  def initialize(*args); end

  def link(); end

  def link=(link); end

  def name(); end

  def name=(name); end

  def title(); end

  def title=(title); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::RDF::Textinput
end

class RSS::RDF
end

class RSS::REXMLListener
  include ::REXML::StreamListener
  include ::RSS::ListenerMixin
  def cdata(data); end
end

class RSS::REXMLListener
end

class RSS::REXMLParser
end

class RSS::REXMLParser
  def self.listener(); end
end

module RSS::RSS09
  ELEMENTS = ::T.let(nil, ::T.untyped)
  NSPOOL = ::T.let(nil, ::T.untyped)
end

module RSS::RSS09
  def self.append_features(klass); end
end

module RSS::RSS10
  ELEMENTS = ::T.let(nil, ::T.untyped)
  NSPOOL = ::T.let(nil, ::T.untyped)
end

module RSS::RSS10
  def self.append_features(klass); end
end

module RSS::RootElementMixin
  include ::RSS::XMLStyleSheetMixin
  def encoding(); end

  def encoding=(encoding); end

  def feed_info(); end

  def feed_subtype(); end

  def feed_type(); end

  def feed_version(); end

  def initialize(feed_version, version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end

  def output_encoding(); end

  def output_encoding=(enc); end

  def setup_maker(maker); end

  def standalone(); end

  def standalone=(standalone); end

  def to_atom(type, &block); end

  def to_feed(type, &block); end

  def to_rss(type, &block); end

  def to_xml(type=T.unsafe(nil), &block); end

  def version(); end

  def version=(version); end
end

module RSS::RootElementMixin
end

class RSS::Rss
  include ::RSS::RSS09
  include ::RSS::RootElementMixin
  include ::RSS::XMLStyleSheetMixin
  def channel(); end

  def channel=(channel); end

  def feed_version=(feed_version); end

  def image(); end

  def items(); end

  def rss_version(); end

  def rss_version=(rss_version); end

  def setup_maker_elements(maker); end

  def textinput(); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel
  include ::RSS::RSS09
  def categories(); end

  def category(*args); end

  def category=(*args); end

  def cloud(); end

  def cloud=(cloud); end

  def copyright(); end

  def copyright=(copyright); end

  def date(); end

  def date=(new_value); end

  def description(); end

  def description=(description); end

  def docs(); end

  def docs=(docs); end

  def generator(); end

  def generator=(generator); end

  def image(); end

  def image=(image); end

  def item(*args); end

  def item=(*args); end

  def items(); end

  def language(); end

  def language=(language); end

  def lastBuildDate(); end

  def lastBuildDate=(new_value); end

  def link(); end

  def link=(link); end

  def managingEditor(); end

  def managingEditor=(managingEditor); end

  def pubDate(); end

  def pubDate=(new_value); end

  def rating(); end

  def rating=(rating); end

  def set_category(*args); end

  def set_item(*args); end

  def skipDays(); end

  def skipDays=(skipDays); end

  def skipHours(); end

  def skipHours=(skipHours); end

  def textInput(); end

  def textInput=(textInput); end

  def title(); end

  def title=(title); end

  def ttl(); end

  def ttl=(new_value); end

  def webMaster(); end

  def webMaster=(webMaster); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

RSS::Rss::Channel::Category = RSS::Rss::Channel::Item::Category

class RSS::Rss::Channel::Cloud
  include ::RSS::RSS09
  def domain(); end

  def domain=(domain); end

  def initialize(*args); end

  def path(); end

  def path=(path); end

  def port(); end

  def port=(new_value); end

  def protocol(); end

  def protocol=(protocol); end

  def registerProcedure(); end

  def registerProcedure=(registerProcedure); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Cloud
end

class RSS::Rss::Channel::Image
  include ::RSS::RSS09
  def description(); end

  def description=(description); end

  def height(); end

  def height=(new_value); end

  def initialize(*args); end

  def link(); end

  def link=(link); end

  def title(); end

  def title=(title); end

  def url(); end

  def url=(url); end

  def width(); end

  def width=(new_value); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Image
end

class RSS::Rss::Channel::Item
  include ::RSS::RSS09
  def author(); end

  def author=(author); end

  def categories(); end

  def category(*args); end

  def category=(*args); end

  def comments(); end

  def comments=(comments); end

  def date(); end

  def date=(new_value); end

  def description(); end

  def description=(description); end

  def enclosure(); end

  def enclosure=(enclosure); end

  def guid(); end

  def guid=(guid); end

  def link(); end

  def link=(link); end

  def pubDate(); end

  def pubDate=(new_value); end

  def set_category(*args); end

  def source(); end

  def source=(source); end

  def title(); end

  def title=(title); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Item::Category
  include ::RSS::RSS09
  def content(); end

  def content=(content); end

  def domain(); end

  def domain=(domain); end

  def initialize(*args); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Item::Category
end

class RSS::Rss::Channel::Item::Enclosure
  include ::RSS::RSS09
  def initialize(*args); end

  def length(); end

  def length=(new_value); end

  def type(); end

  def type=(type); end

  def url(); end

  def url=(url); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Item::Enclosure
end

class RSS::Rss::Channel::Item::Guid
  include ::RSS::RSS09
  def PermaLink?(); end

  def content(); end

  def content=(content); end

  def initialize(*args); end

  def isPermaLink(); end

  def isPermaLink=(new_value); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Item::Guid
end

class RSS::Rss::Channel::Item::Source
  include ::RSS::RSS09
  def content(); end

  def content=(content); end

  def initialize(*args); end

  def url(); end

  def url=(url); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::Item::Source
end

class RSS::Rss::Channel::Item
end

class RSS::Rss::Channel::SkipDays
  include ::RSS::RSS09
  def day(*args); end

  def day=(*args); end

  def days(); end

  def set_day(*args); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::SkipDays::Day
  include ::RSS::RSS09
  def content(); end

  def content=(content); end

  def initialize(*args); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::SkipDays::Day
end

class RSS::Rss::Channel::SkipDays
end

class RSS::Rss::Channel::SkipHours
  include ::RSS::RSS09
  def hour(*args); end

  def hour=(*args); end

  def hours(); end

  def set_hour(*args); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::SkipHours::Hour
  include ::RSS::RSS09
  def content(); end

  def content=(new_value); end

  def initialize(*args); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::SkipHours::Hour
end

class RSS::Rss::Channel::SkipHours
end

class RSS::Rss::Channel::TextInput
  include ::RSS::RSS09
  def description(); end

  def description=(description); end

  def initialize(*args); end

  def link(); end

  def link=(link); end

  def name(); end

  def name=(name); end

  def title(); end

  def title=(title); end
  GET_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  HAVE_CHILDREN_ELEMENTS = ::T.let(nil, ::T.untyped)
  MODELS = ::T.let(nil, ::T.untyped)
  MUST_CALL_VALIDATORS = ::T.let(nil, ::T.untyped)
  NEED_INITIALIZE_VARIABLES = ::T.let(nil, ::T.untyped)
  PLURAL_FORMS = ::T.let(nil, ::T.untyped)
  TO_ELEMENT_METHODS = ::T.let(nil, ::T.untyped)
end

class RSS::Rss::Channel::TextInput
end

class RSS::Rss::Channel
end

class RSS::Rss
end

module RSS::SetupMaker
  def setup_maker(maker); end
end

module RSS::SetupMaker
end

class RSS::TooMuchTagError
  def initialize(tag, parent); end

  def parent(); end

  def tag(); end
end

class RSS::TooMuchTagError
end

class RSS::UnknownConversionMethodError
  def from(); end

  def initialize(to, from); end

  def to(); end
end

class RSS::UnknownConversionMethodError
end

RSS::UnknownConvertMethod = RSS::UnknownConversionMethodError

class RSS::UnknownTagError
  def initialize(tag, uri); end

  def tag(); end

  def uri(); end
end

class RSS::UnknownTagError
end

class RSS::UnsupportedMakerVersionError
  def initialize(version); end

  def version(); end
end

class RSS::UnsupportedMakerVersionError
end

module RSS::Utils
end

module RSS::Utils::CSV
end

module RSS::Utils::CSV
  def self.parse(value, &block); end
end

module RSS::Utils::ExplicitCleanOther
end

module RSS::Utils::ExplicitCleanOther
  def self.parse(value); end
end

module RSS::Utils::InheritedReader
  def inherited_array_reader(constant_name); end

  def inherited_hash_reader(constant_name); end

  def inherited_reader(constant_name); end
end

module RSS::Utils::InheritedReader
end

module RSS::Utils::YesOther
end

module RSS::Utils::YesOther
  def self.parse(value); end
end

module RSS::Utils
  def self.element_initialize_arguments?(args); end

  def self.get_file_and_line_from_caller(i=T.unsafe(nil)); end

  def self.html_escape(s); end

  def self.new_with_value_if_need(klass, value); end

  def self.to_class_name(name); end
end

module RSS::XML
end

class RSS::XML::Element
  include ::Enumerable
  def <<(child); end

  def ==(other); end

  def [](name); end

  def []=(name, value); end

  def attributes(); end

  def children(); end

  def each(&block); end

  def full_name(); end

  def initialize(name, prefix=T.unsafe(nil), uri=T.unsafe(nil), attributes=T.unsafe(nil), children=T.unsafe(nil)); end

  def name(); end

  def prefix(); end

  def uri(); end
end

class RSS::XML::Element
end

module RSS::XML
end

class RSS::XMLParserNotFound
  def initialize(); end
end

class RSS::XMLParserNotFound
end

class RSS::XMLStyleSheet
  include ::RSS::Utils
  def alternate(); end

  def alternate=(value); end

  def charset(); end

  def charset=(charset); end

  def do_validate(); end

  def do_validate=(do_validate); end

  def href(); end

  def href=(value); end

  def initialize(*attrs); end

  def media(); end

  def media=(media); end

  def setup_maker(maker); end

  def title(); end

  def title=(title); end

  def type(); end

  def type=(type); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  GUESS_TABLE = ::T.let(nil, ::T.untyped)
end

class RSS::XMLStyleSheet
end

module RSS::XMLStyleSheetMixin
  def initialize(*args); end

  def xml_stylesheets(); end

  def xml_stylesheets=(xml_stylesheets); end
end

module RSS::XMLStyleSheetMixin
end

module RSS
end

module RSpec
  MODULES_TO_AUTOLOAD = ::T.let(nil, ::T.untyped)
end

module RSpec::ActiveModel::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpec::CallerFilter
  ADDITIONAL_TOP_LEVEL_FILES = ::T.let(nil, ::T.untyped)
  IGNORE_REGEX = ::T.let(nil, ::T.untyped)
  LIB_REGEX = ::T.let(nil, ::T.untyped)
  RSPEC_LIBS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Configuration
  DEFAULT_FORMATTER = ::T.let(nil, ::T.untyped)
  FAILED_STATUS = ::T.let(nil, ::T.untyped)
  MOCKING_ADAPTERS = ::T.let(nil, ::T.untyped)
  PASSED_STATUS = ::T.let(nil, ::T.untyped)
  PENDING_STATUS = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  UNKNOWN_STATUS = ::T.let(nil, ::T.untyped)
  VALID_STATUSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ConfigurationOptions
  OPTIONS_ORDER = ::T.let(nil, ::T.untyped)
  UNFORCED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNPROCESSABLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::ExampleGroup
  INSTANCE_VARIABLE_TO_IGNORE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterRules
  PROC_HEX_NUMBER = ::T.let(nil, ::T.untyped)
  PROJECT_DIR = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::ConsoleCodes
  VT100_CODES = ::T.let(nil, ::T.untyped)
  VT100_CODE_VALUES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter
  DEPRECATION_STREAM_NOTICE = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_CONFIG_NOTICE = ::T.let(nil, ::T.untyped)
  TOO_MANY_WARNINGS_NOTICE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  TOO_MANY_USES_LIMIT = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::ExceptionPresenter
  PENDING_DETAIL_FORMATTER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::Helpers
  DEFAULT_PRECISION = ::T.let(nil, ::T.untyped)
  SUB_SECOND_PRECISION = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::HtmlPrinter
  GLOBAL_SCRIPTS = ::T.let(nil, ::T.untyped)
  GLOBAL_STYLES = ::T.let(nil, ::T.untyped)
  HTML_HEADER = ::T.let(nil, ::T.untyped)
  REPORT_HEADER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  RESET_CODE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

class RSpec::Core::Hooks::HookCollections
  EMPTY_HOOK_ARRAY = ::T.let(nil, ::T.untyped)
  HOOK_TYPES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
  SCOPE_ALIASES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Metadata
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Ordering::Random
  MAX_32_BIT = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Pending
  NOT_YET_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  NO_REASON_GIVEN = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Profiler
  NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Reporter
  RSPEC_NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::ShellEscape
  SHELLS_ALLOWING_UNQUOTED_IDS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpec::Expectations::Configuration
  FALSE_POSITIVE_BEHAVIOURS = ::T.let(nil, ::T.untyped)
end

RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

module RSpec::Expectations::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers
  BE_PREDICATE_REGEX = ::T.let(nil, ::T.untyped)
  DYNAMIC_MATCHER_REGEX = ::T.let(nil, ::T.untyped)
  HAS_REGEX = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

class RSpec::Matchers::BuiltIn::BaseMatcher
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Equal
  LITERAL_SINGLETONS = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::BuiltIn::SpecificValuesChange::MATCH_ANYTHING = BasicObject

RSpec::Matchers::BuiltIn::StartAndEndWith = RSpec::Matchers::BuiltIn::StartOrEndWith

module RSpec::Matchers::DSL::Macros
  RAISE_NOTIFIER = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  DEFAULT_DIFF_LABEL = ::T.let(nil, ::T.untyped)
  DESCRIPTION_MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks
  DEFAULT_CALLBACK_INVOCATION_STRATEGY = ::T.let(nil, ::T.untyped)
  IGNORED_BACKTRACE_LINE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::PositiveExpectationChain
  ExpectationInvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::StubChain
  EmptyInvocationOrder = ::T.let(nil, ::T.untyped)
  InvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentListMatcher
  MATCH_ALL = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::AnyArgMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::BooleanMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::NoArgsMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Matchers::HaveReceived
  ARGS_CONSTRAINTS = ::T.let(nil, ::T.untyped)
  CONSTRAINTS = ::T.let(nil, ::T.untyped)
  COUNT_CONSTRAINTS = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ObjectReference
  MODULE_NAME_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Proxy
  DEFAULT_MESSAGE_EXPECTATION_OPTS = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  DEFAULT_FAILURE_NOTIFIER = ::T.let(nil, ::T.untyped)
  DEFAULT_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD_METHOD = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  AVOID_RESCUING = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::EncodedString
  REPLACE = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::MethodSignature
  INFINITY = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Mutex
  NEW_MUTEX_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  INSPECTOR_CLASSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::TimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  OBJECT_ID_FORMAT = ::T.let(nil, ::T.untyped)
end

RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module Rabl
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rabl::Builder
  SETTING_TYPES = ::T.let(nil, ::T.untyped)
end

class Rabl::Configuration
  DEFAULT_XML_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rabl::Engine
  FORMATS = ::T.let(nil, ::T.untyped)
end

class Rabl::Tracker
  EXTENDS_DEPENDENCY = ::T.let(nil, ::T.untyped)
  PARTIAL_DEPENDENCY = ::T.let(nil, ::T.untyped)
end

module Racc
  Copyright = ::T.let(nil, ::T.untyped)
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  ADAPTERS = ::T.let(nil, ::T.untyped)
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Adapter::Rails
  def call(env); end

  def file_exist?(path); end

  def initialize(options=T.unsafe(nil)); end

  def load_application(); end
  FILE_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Adapter::Rails::CGIWrapper
  def args(); end

  def cookies(); end

  def initialize(request, response, *args); end

  def params(); end

  def query_string(); end
end

class Rack::Adapter::Rails::CGIWrapper
end

class Rack::Adapter::Rails::CgiApp
  def call(env); end
end

class Rack::Adapter::Rails::CgiApp
end

class Rack::Adapter::Rails
  def self.rack_based?(); end
end

class Rack::Auth::AbstractRequest
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::MD5
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  include ::NewRelic::Agent::Instrumentation::Rack::Prepend
  include ::NewRelic::Agent::Instrumentation::RackBuilder
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def self._nr_deferred_detection_ran(); end

  def self._nr_deferred_detection_ran=(_nr_deferred_detection_ran); end
end

class Rack::Cascade
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Chunked::Body
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Cors
  CORS_SIMPLE_HEADERS = ::T.let(nil, ::T.untyped)
  DEFAULT_VARY_HEADERS = ::T.let(nil, ::T.untyped)
  ENV_KEY = ::T.let(nil, ::T.untyped)
  HTTP_ACCESS_CONTROL_REQUEST_HEADERS = ::T.let(nil, ::T.untyped)
  HTTP_ACCESS_CONTROL_REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  HTTP_ORIGIN = ::T.let(nil, ::T.untyped)
  HTTP_X_ORIGIN = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  RACK_CORS = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  VARY = ::T.let(nil, ::T.untyped)
end

class Rack::Cors::Result
  HEADER_KEY = ::T.let(nil, ::T.untyped)
  MISS_DENY_HEADER = ::T.let(nil, ::T.untyped)
  MISS_DENY_METHOD = ::T.let(nil, ::T.untyped)
  MISS_NO_METHOD = ::T.let(nil, ::T.untyped)
  MISS_NO_ORIGIN = ::T.let(nil, ::T.untyped)
  MISS_NO_PATH = ::T.let(nil, ::T.untyped)
end

class Rack::Directory
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

Rack::File = Rack::Files

class Rack::Files
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::Handler::Thin
end

class Rack::Handler::Thin
  def self.run(app, **options); end

  def self.valid_options(); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, **options); end

  def self.shutdown(); end

  def self.valid_options(); end
end

class Rack::Lint::HijackWrapper
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::LiveReload
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::LiveReload::BodyProcessor
  HEAD_TAG_REGEX = ::T.let(nil, ::T.untyped)
  LIVERELOAD_JS_PATH = ::T.let(nil, ::T.untyped)
  LIVERELOAD_PORT = ::T.let(nil, ::T.untyped)
end

class Rack::LiveReload::ProcessingSkipAnalyzer
  BAD_USER_AGENTS = ::T.let(nil, ::T.untyped)
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler
  ASSET_VERSION = ::T.let(nil, ::T.untyped)
  SOURCE_CODE_URI = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::AbstractStore
  MAX_TOKEN_AGE = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::ClientSettings
  BACKTRACE_DEFAULT = ::T.let(nil, ::T.untyped)
  BACKTRACE_FULL = ::T.let(nil, ::T.untyped)
  BACKTRACE_NONE = ::T.let(nil, ::T.untyped)
  COOKIE_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::FileStore
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::MemcacheStore
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::MemoryStore
  CLEANUP_CYCLE = ::T.let(nil, ::T.untyped)
  CLEANUP_INTERVAL = ::T.let(nil, ::T.untyped)
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::RedisStore
  COUNTER_LUA = ::T.let(nil, ::T.untyped)
  COUNTER_LUA_SHA = ::T.let(nil, ::T.untyped)
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler
  extend ::Rack::MiniProfiler::ProfilingMethods
end

class Rack::MockRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN_QUOTED = ::T.let(nil, ::T.untyped)
  BROKEN_UNQUOTED = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::Parser
  BOUNDARY_REGEX = ::T.let(nil, ::T.untyped)
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Request
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Dalli
  DEFAULT_DALLI_OPTIONS = ::T.let(nil, ::T.untyped)
end

Rack::Session::Memcache = Rack::Session::Dalli

class Rack::Session::Pool
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::SessionId
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Throttle::Daily
  def max_per_day(request=T.unsafe(nil)); end

  def max_per_window(request=T.unsafe(nil)); end
end

class Rack::Throttle::Daily
end

class Rack::Throttle::Hourly
  def max_per_hour(request=T.unsafe(nil)); end

  def max_per_window(request=T.unsafe(nil)); end
end

class Rack::Throttle::Hourly
end

class Rack::Throttle::Interval
  def minimum_interval(); end

  def retry_after(); end
end

class Rack::Throttle::Interval
end

class Rack::Throttle::Minute
  def max_per_minute(request=T.unsafe(nil)); end

  def max_per_window(request=T.unsafe(nil)); end
end

class Rack::Throttle::Minute
end

class Rack::Throttle::Rules
  def client_identifier_for_rule(request, rule); end

  def default_limit(); end

  def ip(request); end

  def ip_whitelisted?(request_ip); end

  def ips(); end

  def max_per_window(request); end

  def path_matches?(rule, path); end

  def retry_after(); end

  def rule_for(request); end

  def rule_whitelisted?(request); end

  def rules(); end

  def time_string(); end
end

class Rack::Throttle::Rules
end

class Rack::Throttle::Second
  def max_per_second(request=T.unsafe(nil)); end

  def max_per_window(request=T.unsafe(nil)); end
end

class Rack::Throttle::Second
end

class Rack::Throttle::TimeWindow
end

class Rack::Throttle::TimeWindow
end

module Rack::Throttle::VERSION
  EXTRA = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module Rack::Throttle::VERSION
  def self.to_a(); end

  def self.to_str(); end
end

class Rack::URLMap
  include ::NewRelic::Agent::Instrumentation::Rack::URLMap::Prepend
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

class Rails::ApplicationController
end

class Rails::ApplicationController
end

module Rails::Command::Actions
  def load_generators(); end

  def load_tasks(); end

  def require_application!(); end

  def require_application_and_environment!(); end

  def require_environment!(); end

  def set_application_directory!(); end
end

module Rails::Command::Actions
end

class Rails::Command::Base
  include ::Rails::Command::Actions
  def help(); end
end

class Rails::Command::Base::Error
end

class Rails::Command::Base::Error
end

class Rails::Command::Base
  def self.banner(*_); end

  def self.base_name(); end

  def self.command_name(); end

  def self.default_command_root(); end

  def self.desc(usage=T.unsafe(nil), description=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.engine?(); end

  def self.executable(); end

  def self.hide_command!(); end

  def self.inherited(base); end

  def self.perform(command, args, config); end

  def self.printing_commands(); end

  def self.usage_path(); end
end

module Rails::Controller::Testing
  VERSION = ::T.let(nil, ::T.untyped)
end

module Rails::Controller::Testing::TemplateAssertions
  RENDER_TEMPLATE_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module Rails::Generators::Actions
  def add_source(source, options=T.unsafe(nil), &block); end

  def after_bundle(&block); end

  def application(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def capify!(); end

  def environment(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def gem(*args); end

  def gem_group(*names, &block); end

  def generate(what, *args); end

  def git(commands=T.unsafe(nil)); end

  def initialize(*_); end

  def initializer(filename, data=T.unsafe(nil)); end

  def lib(filename, data=T.unsafe(nil)); end

  def rails_command(command, options=T.unsafe(nil)); end

  def rake(command, options=T.unsafe(nil)); end

  def rakefile(filename, data=T.unsafe(nil)); end

  def readme(path); end

  def route(routing_code); end

  def vendor(filename, data=T.unsafe(nil)); end
end

class Rails::Generators::Actions::CreateMigration
  def existing_migration(); end

  def migration_dir(); end

  def migration_file_name(); end

  def relative_existing_migration(); end
end

class Rails::Generators::Actions::CreateMigration
end

module Rails::Generators::Actions
end

class Rails::Generators::ActiveModel
  def destroy(); end

  def errors(); end

  def initialize(name); end

  def name(); end

  def save(); end

  def update(params=T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def self.all(klass); end

  def self.build(klass, params=T.unsafe(nil)); end

  def self.find(klass, params=T.unsafe(nil)); end
end

class Rails::Generators::Base
  include ::Thor::Actions
  include ::Rails::Generators::Actions
end

class Rails::Generators::Base
  def self.add_shebang_option!(); end

  def self.base_name(); end

  def self.base_root(); end

  def self.default_aliases_for_option(name, options); end

  def self.default_for_option(config, name, options, default); end

  def self.default_generator_root(); end

  def self.default_source_root(); end

  def self.default_value_for_option(name, options); end

  def self.generator_name(); end

  def self.hide!(); end

  def self.hook_for(*names, &block); end

  def self.hooks(); end

  def self.inherited(base); end

  def self.prepare_for_invocation(name, value); end

  def self.remove_hook_for(*names); end

  def self.usage_path(); end
end

module Rails::Generators::Migration
  def create_migration(destination, data, config=T.unsafe(nil), &block); end

  def migration_class_name(); end

  def migration_file_name(); end

  def migration_number(); end

  def migration_template(source, destination, config=T.unsafe(nil)); end

  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end

  def migration_exists?(dirname, file_name); end

  def migration_lookup_at(dirname); end

  def next_migration_number(dirname); end
end

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern
end

class Rails::Generators::NamedBase
  def file_name(); end

  def initialize(args, *options); end

  def js_template(source, destination); end

  def name(); end

  def name=(name); end
end

class Rails::Generators::NamedBase
  def self.check_class_collision(options=T.unsafe(nil)); end
end

module Rails::Generators::ResourceHelpers
  def controller_file_name(); end

  def controller_name(); end

  def initialize(*args); end
end

module Rails::Generators::ResourceHelpers
  def self.included(base); end
end

class Rails::Generators::TestCase
  include ::Rails::Generators::Testing::Behaviour
  include ::ActiveSupport::Testing::Stream
  include ::Rails::Generators::Testing::SetupAndTeardown
  include ::Rails::Generators::Testing::Assertions
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def current_path(); end

  def current_path=(val); end

  def current_path?(); end

  def default_arguments(); end

  def default_arguments=(val); end

  def default_arguments?(); end

  def destination_root(); end

  def destination_root=(val); end

  def destination_root?(); end

  def generator_class(); end

  def generator_class=(val); end

  def generator_class?(); end
end

class Rails::Generators::TestCase
  def self.current_path(); end

  def self.current_path=(val); end

  def self.current_path?(); end

  def self.default_arguments(); end

  def self.default_arguments=(val); end

  def self.default_arguments?(); end

  def self.destination_root(); end

  def self.destination_root=(val); end

  def self.destination_root?(); end

  def self.generator_class(); end

  def self.generator_class=(val); end

  def self.generator_class?(); end
end

module Rails::Generators::Testing::Assertions
  def assert_class_method(method, content, &block); end

  def assert_directory(relative, *contents); end

  def assert_field_default_value(attribute_type, value); end

  def assert_field_type(attribute_type, field_type); end

  def assert_file(relative, *contents); end

  def assert_instance_method(method, content); end

  def assert_method(method, content); end

  def assert_migration(relative, *contents, &block); end

  def assert_no_directory(relative); end

  def assert_no_file(relative); end

  def assert_no_migration(relative); end
end

module Rails::Generators::Testing::Assertions
end

module Rails::Generators::Testing::Behaviour
  include ::ActiveSupport::Testing::Stream
  def create_generated_attribute(attribute_type, name=T.unsafe(nil), index=T.unsafe(nil)); end

  def generator(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def run_generator(args=T.unsafe(nil), config=T.unsafe(nil)); end
end

module Rails::Generators::Testing::Behaviour
  extend ::ActiveSupport::Concern
end

module Rails::Generators::Testing::SetupAndTeardown
  def setup(); end

  def teardown(); end
end

module Rails::Generators::Testing::SetupAndTeardown
end

module Rails::Html
  XPATHS_TO_REMOVE = ::T.let(nil, ::T.untyped)
end

class Rails::Html::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

module Rails::Info
  def properties(); end

  def properties=(obj); end
end

module Rails::Info
  def self.properties(); end

  def self.properties=(obj); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def _layout_from_proc(); end

  def index(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

class Rails::MailersController
  def index(); end

  def preview(); end
end

class Rails::MailersController
end

module Rails::Observers
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rails::Rack::Logger
  def call(env); end

  def initialize(app, taggers=T.unsafe(nil)); end
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

RakeFileUtils = Rake::FileUtilsExt

class Random
  def self.bytes(_); end
end

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::IncludeTimeWithZone
  include ::ActiveSupport::EachTimeWithZone
  def %(_); end

  def entries(); end

  def to_a(); end
end

module Ransack
  SUPPORTS_ATTRIBUTE_ALIAS = ::T.let(nil, ::T.untyped)
end

module Ransack::Constants
  AND = ::T.let(nil, ::T.untyped)
  AND_OR = ::T.let(nil, ::T.untyped)
  AREL_PREDICATES = ::T.let(nil, ::T.untyped)
  ASSOCIATION_JOIN = ::T.let(nil, ::T.untyped)
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  A_S_I = ::T.let(nil, ::T.untyped)
  BOOLEAN_VALUES = ::T.let(nil, ::T.untyped)
  CAP_SEARCH = ::T.let(nil, ::T.untyped)
  COMBINATOR = ::T.let(nil, ::T.untyped)
  CONT = ::T.let(nil, ::T.untyped)
  DERIVED_PREDICATES = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  DOT_ASTERIX = ::T.let(nil, ::T.untyped)
  EQ = ::T.let(nil, ::T.untyped)
  EQ_ANY = ::T.let(nil, ::T.untyped)
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
  I = ::T.let(nil, ::T.untyped)
  IN_NOT_IN = ::T.let(nil, ::T.untyped)
  JOIN_NODE = ::T.let(nil, ::T.untyped)
  LEFT_PARENTHESIS = ::T.let(nil, ::T.untyped)
  NOT_EQ = ::T.let(nil, ::T.untyped)
  NOT_EQ_ALL = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  Q = ::T.let(nil, ::T.untyped)
  RAILS_6_0 = ::T.let(nil, ::T.untyped)
  RAILS_6_1 = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES_SLASH_SEARCH = ::T.let(nil, ::T.untyped)
  SEARCH = ::T.let(nil, ::T.untyped)
  SEARCHES = ::T.let(nil, ::T.untyped)
  STASHED_JOIN = ::T.let(nil, ::T.untyped)
  STRING_JOIN = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  TWO_COLONS = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

class Ransack::Visitor
  DISPATCH = ::T.let(nil, ::T.untyped)
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end

  def self.ruby(); end
end

module Readline
  def self.completion_quote_character(); end
end

module Recaptcha
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
  RESPONSE_LIMIT = ::T.let(nil, ::T.untyped)
end

class Recaptcha::Configuration
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Recaptcha::Helpers
  DEFAULT_ERRORS = ::T.let(nil, ::T.untyped)
end

module Redcarpet
  VERSION = ::T.let(nil, ::T.untyped)
end

class RedcarpetCompat
  EXTENSION_MAP = ::T.let(nil, ::T.untyped)
  RENDERER_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Redis
  include ::ActiveSupport::Cache::ConnectionPoolLike
  Boolify = ::T.let(nil, ::T.untyped)
  BoolifySet = ::T.let(nil, ::T.untyped)
  Floatify = ::T.let(nil, ::T.untyped)
  FloatifyPairs = ::T.let(nil, ::T.untyped)
  Hashify = ::T.let(nil, ::T.untyped)
  HashifyClusterNodeInfo = ::T.let(nil, ::T.untyped)
  HashifyClusterNodes = ::T.let(nil, ::T.untyped)
  HashifyClusterSlaves = ::T.let(nil, ::T.untyped)
  HashifyClusterSlots = ::T.let(nil, ::T.untyped)
  HashifyInfo = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaim = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaimJustId = ::T.let(nil, ::T.untyped)
  HashifyStreamEntries = ::T.let(nil, ::T.untyped)
  HashifyStreamPendingDetails = ::T.let(nil, ::T.untyped)
  HashifyStreamPendings = ::T.let(nil, ::T.untyped)
  HashifyStreams = ::T.let(nil, ::T.untyped)
  Noop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Redis::Client
  include ::NewRelic::Agent::Instrumentation::Redis::Prepend
  include ::NewRelic::Agent::Instrumentation::Redis
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Redis::Cluster::KeySlotConverter
  HASH_SLOTS = ::T.let(nil, ::T.untyped)
  XMODEM_CRC16_LOOKUP = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Node
  ROLE_SLAVE = ::T.let(nil, ::T.untyped)
end

module Redis::Cluster::NodeKey
  DELIMITER = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Option
  DEFAULT_SCHEME = ::T.let(nil, ::T.untyped)
  SECURE_SCHEME = ::T.let(nil, ::T.untyped)
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Slot
  ROLE_SLAVE = ::T.let(nil, ::T.untyped)
end

module Redis::Connection::CommandHelper
  COMMAND_DELIMITER = ::T.let(nil, ::T.untyped)
end

class Redis::Connection::Ruby
  ASTERISK = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  DOLLAR = ::T.let(nil, ::T.untyped)
  MINUS = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
end

module Redis::Connection::SocketMixin
  CRLF = ::T.let(nil, ::T.untyped)
end

class Redis::Distributed
  include ::ActiveSupport::Cache::ConnectionPoolLike
  def [](key); end

  def []=(key, value); end

  def _bpop(cmd, args); end

  def _eval(cmd, args); end

  def add_node(options); end

  def append(key, value); end

  def bgsave(); end

  def bitcount(key, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def bitop(operation, destkey, *keys); end

  def bitpos(key, bit, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def blpop(*args); end

  def brpop(*args); end

  def brpoplpush(source, destination, deprecated_timeout=T.unsafe(nil), **options); end

  def dbsize(); end

  def decr(key); end

  def decrby(key, decrement); end

  def del(*args); end

  def discard(); end

  def dump(key); end

  def echo(value); end

  def ensure_same_node(command, keys); end

  def eval(*args); end

  def evalsha(*args); end

  def exec(); end

  def exists(*args); end

  def exists?(*args); end

  def expire(key, seconds); end

  def expireat(key, unix_time); end

  def flushall(); end

  def flushdb(); end

  def get(key); end

  def getbit(key, offset); end

  def getrange(key, start, stop); end

  def getset(key, value); end

  def hdel(key, *fields); end

  def hexists(key, field); end

  def hget(key, field); end

  def hgetall(key); end

  def hincrby(key, field, increment); end

  def hincrbyfloat(key, field, increment); end

  def hkeys(key); end

  def hlen(key); end

  def hmget(key, *fields); end

  def hmset(key, *attrs); end

  def hset(key, *attrs); end

  def hsetnx(key, field, value); end

  def hvals(key); end

  def incr(key); end

  def incrby(key, increment); end

  def incrbyfloat(key, increment); end

  def info(cmd=T.unsafe(nil)); end

  def initialize(node_configs, options=T.unsafe(nil)); end

  def key_tag(key); end

  def keys(glob=T.unsafe(nil)); end

  def lastsave(); end

  def lindex(key, index); end

  def linsert(key, where, pivot, value); end

  def llen(key); end

  def lpop(key, count=T.unsafe(nil)); end

  def lpush(key, value); end

  def lpushx(key, value); end

  def lrange(key, start, stop); end

  def lrem(key, count, value); end

  def lset(key, index, value); end

  def ltrim(key, start, stop); end

  def mapped_hmget(key, *fields); end

  def mapped_hmset(key, hash); end

  def mapped_mget(*keys); end

  def mapped_mset(_hash); end

  def mapped_msetnx(_hash); end

  def mget(*keys); end

  def migrate(_key, _options); end

  def monitor(); end

  def move(key, db); end

  def mset(*_args); end

  def msetnx(*_args); end

  def multi(&block); end

  def node_for(key); end

  def node_index_for(key); end

  def nodes(); end

  def on_each_node(command, *args); end

  def persist(key); end

  def pexpire(key, milliseconds); end

  def pexpireat(key, ms_unix_time); end

  def pfadd(key, member); end

  def pfcount(*keys); end

  def pfmerge(dest_key, *source_key); end

  def ping(); end

  def pipelined(); end

  def psetex(key, ttl, value); end

  def psubscribe(*channels, &block); end

  def pttl(key); end

  def publish(channel, message); end

  def punsubscribe(*channels); end

  def quit(); end

  def randomkey(); end

  def rename(old_name, new_name); end

  def renamenx(old_name, new_name); end

  def restore(key, ttl, serialized_value, **options); end

  def ring(); end

  def rpop(key, count=T.unsafe(nil)); end

  def rpoplpush(source, destination); end

  def rpush(key, value); end

  def rpushx(key, value); end

  def sadd(key, member); end

  def save(); end

  def scard(key); end

  def script(subcommand, *args); end

  def sdiff(*keys); end

  def sdiffstore(destination, *keys); end

  def select(db); end

  def set(key, value, **options); end

  def setbit(key, offset, value); end

  def setex(key, ttl, value); end

  def setnx(key, value); end

  def setrange(key, offset, value); end

  def sinter(*keys); end

  def sinterstore(destination, *keys); end

  def sismember(key, member); end

  def smembers(key); end

  def smove(source, destination, member); end

  def sort(key, **options); end

  def spop(key, count=T.unsafe(nil)); end

  def srandmember(key, count=T.unsafe(nil)); end

  def srem(key, member); end

  def sscan(key, cursor, **options); end

  def sscan_each(key, **options, &block); end

  def strlen(key); end

  def subscribe(channel, *channels, &block); end

  def subscribed?(); end

  def sunion(*keys); end

  def sunionstore(destination, *keys); end

  def time(); end

  def ttl(key); end

  def type(key); end

  def unlink(*args); end

  def unsubscribe(*channels); end

  def unwatch(); end

  def watch(*keys, &block); end

  def zadd(key, *args); end

  def zcard(key); end

  def zcount(key, min, max); end

  def zincrby(key, increment, member); end

  def zinter(*keys, **options); end

  def zinterstore(destination, keys, **options); end

  def zrange(key, start, stop, **options); end

  def zrangebyscore(key, min, max, **options); end

  def zrank(key, member); end

  def zrem(key, member); end

  def zremrangebyrank(key, start, stop); end

  def zremrangebyscore(key, min, max); end

  def zrevrange(key, start, stop, **options); end

  def zrevrangebyscore(key, max, min, **options); end

  def zrevrank(key, member); end

  def zscore(key, member); end

  def zunionstore(destination, keys, **options); end
end

class Redis::Distributed::CannotDistribute
  def initialize(command); end
end

class Redis::Distributed::CannotDistribute
end

class Redis::Distributed
end

class Redis::Future
  FutureNotReady = ::T.let(nil, ::T.untyped)
end

class Redis::HashRing
  def add_node(node); end

  def get_node(key); end

  def get_node_pos(key); end

  def initialize(nodes=T.unsafe(nil), replicas=T.unsafe(nil)); end

  def iter_nodes(key); end

  def nodes(); end

  def remove_node(node); end

  def replicas(); end

  def ring(); end

  def sorted_keys(); end
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Redis::HashRing
  def self.binary_search(ary, value); end
end

class Redis::Namespace
  ADMINISTRATIVE_COMMANDS = ::T.let(nil, ::T.untyped)
  COMMANDS = ::T.let(nil, ::T.untyped)
  DEPRECATED_COMMANDS = ::T.let(nil, ::T.untyped)
  HELPER_COMMANDS = ::T.let(nil, ::T.untyped)
  NAMESPACED_COMMANDS = ::T.let(nil, ::T.untyped)
  TRANSACTION_COMMANDS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Regexp
  TOKEN_KEYS = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine

Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine

Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString

Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

Regexp::Expression::MatchLength = Regexp::MatchLength

class Regexp::Expression::Quantifier
  MODES = ::T.let(nil, ::T.untyped)
end

class Regexp::Lexer
  CLOSING_TOKENS = ::T.let(nil, ::T.untyped)
  OPENING_TOKENS = ::T.let(nil, ::T.untyped)
end

class Regexp::Parser
  ENC_FLAGS = ::T.let(nil, ::T.untyped)
  MOD_FLAGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Regexp::Parser::UPTokens = Regexp::Syntax::Token::UnicodeProperty

module Regexp::Syntax
  VERSION_CONST_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION_FORMAT = ::T.let(nil, ::T.untyped)
  VERSION_REGEXP = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token
  All = ::T.let(nil, ::T.untyped)
  Map = ::T.let(nil, ::T.untyped)
  Types = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  MatchStart = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Assertion
  All = ::T.let(nil, ::T.untyped)
  Lookahead = ::T.let(nil, ::T.untyped)
  Lookbehind = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Backreference
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  RecursionLevel = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterSet
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterType
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Clustered = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Conditional
  All = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  Delimiters = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Escape
  ASCII = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Control = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Meta = ::T.let(nil, ::T.untyped)
  Octal = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  Unicode = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::FreeSpace
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Group
  All = ::T.let(nil, ::T.untyped)
  Atomic = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Comment = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Named = ::T.let(nil, ::T.untyped)
  Passive = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V2_4_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Keep
  All = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Literal
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Meta
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::PosixClass
  All = ::T.let(nil, ::T.untyped)
  Extensions = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  Standard = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Quantifier
  All = ::T.let(nil, ::T.untyped)
  Greedy = ::T.let(nil, ::T.untyped)
  Interval = ::T.let(nil, ::T.untyped)
  IntervalAll = ::T.let(nil, ::T.untyped)
  IntervalPossessive = ::T.let(nil, ::T.untyped)
  IntervalReluctant = ::T.let(nil, ::T.untyped)
  Possessive = ::T.let(nil, ::T.untyped)
  Reluctant = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::SubexpressionCall
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty
  Age = ::T.let(nil, ::T.untyped)
  Age_V1_9_3 = ::T.let(nil, ::T.untyped)
  Age_V2_0_0 = ::T.let(nil, ::T.untyped)
  Age_V2_2_0 = ::T.let(nil, ::T.untyped)
  Age_V2_3_0 = ::T.let(nil, ::T.untyped)
  Age_V2_4_0 = ::T.let(nil, ::T.untyped)
  Age_V2_5_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_2 = ::T.let(nil, ::T.untyped)
  Age_V2_6_3 = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  CharType_V1_9_0 = ::T.let(nil, ::T.untyped)
  CharType_V2_5_0 = ::T.let(nil, ::T.untyped)
  Derived = ::T.let(nil, ::T.untyped)
  Derived_V1_9_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_0_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_4_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji = ::T.let(nil, ::T.untyped)
  Emoji_V2_5_0 = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  POSIX = ::T.let(nil, ::T.untyped)
  Script = ::T.let(nil, ::T.untyped)
  Script_V1_9_0 = ::T.let(nil, ::T.untyped)
  Script_V1_9_3 = ::T.let(nil, ::T.untyped)
  Script_V2_0_0 = ::T.let(nil, ::T.untyped)
  Script_V2_2_0 = ::T.let(nil, ::T.untyped)
  Script_V2_3_0 = ::T.let(nil, ::T.untyped)
  Script_V2_4_0 = ::T.let(nil, ::T.untyped)
  Script_V2_5_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_2 = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  UnicodeBlock = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V1_9_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_0_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_2_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_3_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_4_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_5_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_2 = ::T.let(nil, ::T.untyped)
  V1_9_0 = ::T.let(nil, ::T.untyped)
  V1_9_3 = ::T.let(nil, ::T.untyped)
  V2_0_0 = ::T.let(nil, ::T.untyped)
  V2_2_0 = ::T.let(nil, ::T.untyped)
  V2_3_0 = ::T.let(nil, ::T.untyped)
  V2_4_0 = ::T.let(nil, ::T.untyped)
  V2_5_0 = ::T.let(nil, ::T.untyped)
  V2_6_0 = ::T.let(nil, ::T.untyped)
  V2_6_2 = ::T.let(nil, ::T.untyped)
  V2_6_3 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  All = ::T.let(nil, ::T.untyped)
  Codepoint = ::T.let(nil, ::T.untyped)
  Letter = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  Punctuation = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
end

class Report
  def autosave_associated_records_for_comment(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class Report::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Report::GeneratedRelationMethods
end

class Report::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Report::GeneratedRelationMethods
end

class Report::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Report::GeneratedRelationMethods
end

module Report::GeneratedRelationMethods
end

module Report::GeneratedRelationMethods
end

class ReportMailer
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ReportsController::CreateParams
  def self.inherited(s); end
end

class ReportsController::NewParams
  def self.inherited(s); end
end

class ReportsController::ReportParams
  def self.inherited(s); end
end

class Resolv::DNS
  def extract_resources(msg, name, typeclass); end
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config
  def initialize(config_info=T.unsafe(nil)); end
end

class Resolv::DNS::Label::Str
  def initialize(string); end
end

class Resolv::DNS::Message
  def initialize(id=T.unsafe(nil)); end
end

class Resolv::DNS::Message::MessageDecoder
  def initialize(data); end
end

class Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
  def initialize(msg, data, sock, host, port); end
end

class Resolv::DNS::Resource
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::LOC
  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end
end

class Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.random(arg); end
end

module RestClient
  STATUSES = ::T.let(nil, ::T.untyped)
  STATUSES_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

module RestClient::Exceptions
  EXCEPTIONS_MAP = ::T.let(nil, ::T.untyped)
end

class RestClient::Payload::Multipart
  EOL = ::T.let(nil, ::T.untyped)
end

class RestClient::Request
  SSLOptionList = ::T.let(nil, ::T.untyped)
end

RestClient::RequestEntityTooLarge = RestClient::PayloadTooLarge

RestClient::RequestURITooLong = RestClient::URITooLong

RestClient::RequestedRangeNotSatisfiable = RestClient::RangeNotSatisfiable

RestClient::ResourceNotFound = RestClient::NotFound

class Ripper
  def column(); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*_); end

  def lineno(); end

  def parse(); end

  def state(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def lex(); end

  def tokenize(); end
end

class Ripper::Lexer::Elem
  def event(); end

  def event=(_); end

  def initialize(pos, event, tok, state); end

  def pos(); end

  def pos=(_); end

  def state(); end

  def state=(_); end

  def tok(); end

  def tok=(_); end
end

class Ripper::Lexer::Elem
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def to_int=(_); end

  def to_s=(_); end

  def |(i); end
end

class Ripper::Lexer::State
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_parse_error(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::SexpBuilder
end

class Ripper::SexpBuilderPP
end

class Ripper::SexpBuilderPP
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*_); end
end

class Ripper
  def self.dedent_string(_, _1); end

  def self.lex_state_name(_); end

  def self.token_match(src, pattern); end
end

class RuboCop::AST::Builder
  NODE_MAP = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Node
  ARGUMENT_TYPES = ::T.let(nil, ::T.untyped)
  ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  BASIC_CONDITIONALS = ::T.let(nil, ::T.untyped)
  BASIC_LITERALS = ::T.let(nil, ::T.untyped)
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  COMPOSITE_LITERALS = ::T.let(nil, ::T.untyped)
  CONDITIONALS = ::T.let(nil, ::T.untyped)
  EQUALS_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  FALSEY_LITERALS = ::T.let(nil, ::T.untyped)
  IMMUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  LITERALS = ::T.let(nil, ::T.untyped)
  LOOP_TYPES = ::T.let(nil, ::T.untyped)
  MUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  OPERATOR_KEYWORDS = ::T.let(nil, ::T.untyped)
  POST_CONDITION_LOOP_TYPES = ::T.let(nil, ::T.untyped)
  REFERENCES = ::T.let(nil, ::T.untyped)
  SHORTHAND_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYWORDS = ::T.let(nil, ::T.untyped)
  TRUTHY_LITERALS = ::T.let(nil, ::T.untyped)
  VARIABLES = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern
  VAR = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Compiler::Debug
  def comments(*args, &block); end

  def node_ids(); end

  def tokens(*args, &block); end
end

class RuboCop::AST::NodePattern::Compiler::Debug::Colorizer
  def compiler(); end

  def initialize(pattern, compiler: T.unsafe(nil)); end

  def node_pattern(); end

  def pattern(); end

  def test(ruby, trace: T.unsafe(nil)); end
  COLOR_SCHEME = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Compiler::Debug::Colorizer::Result
  def color_map(color_scheme=T.unsafe(nil)); end

  def colorize(color_scheme=T.unsafe(nil)); end

  def colorizer(); end

  def colorizer=(_); end

  def match_map(); end

  def matched?(node); end

  def returned(); end

  def returned=(_); end

  def ruby_ast(); end

  def ruby_ast=(_); end

  def trace(); end

  def trace=(_); end
end

class RuboCop::AST::NodePattern::Compiler::Debug::Colorizer::Result
  def self.[](*_); end

  def self.members(); end
end

class RuboCop::AST::NodePattern::Compiler::Debug::Colorizer
end

module RuboCop::AST::NodePattern::Compiler::Debug::InstrumentationSubcompiler
  def do_compile(); end
end

module RuboCop::AST::NodePattern::Compiler::Debug::InstrumentationSubcompiler
end

class RuboCop::AST::NodePattern::Compiler::Debug::NodePatternSubcompiler
  include ::RuboCop::AST::NodePattern::Compiler::Debug::InstrumentationSubcompiler
end

class RuboCop::AST::NodePattern::Compiler::Debug::NodePatternSubcompiler
end

class RuboCop::AST::NodePattern::Compiler::Debug::SequenceSubcompiler
  include ::RuboCop::AST::NodePattern::Compiler::Debug::InstrumentationSubcompiler
end

class RuboCop::AST::NodePattern::Compiler::Debug::SequenceSubcompiler
end

class RuboCop::AST::NodePattern::Compiler::Debug::Trace
  def enter(node_id); end

  def matched?(node_id); end

  def success(node_id); end
end

class RuboCop::AST::NodePattern::Compiler::Debug::Trace
end

class RuboCop::AST::NodePattern::Compiler::Debug
end

class RuboCop::AST::NodePattern::Compiler::SequenceSubcompiler
  DELTA = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::LexerRex
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  REGEXP = ::T.let(nil, ::T.untyped)
  REGEXP_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Node
  MAP = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Node::Repetition
  ARITIES = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern::Parser::WithMeta
  def comments(); end

  def tokens(); end
end

class RuboCop::AST::NodePattern::Parser::WithMeta::Builder
  def emit_atom(type, token); end

  def emit_call(type, selector_t, args=T.unsafe(nil)); end

  def emit_list(type, begin_t, children, end_t); end

  def emit_unary_op(type, operator_t=T.unsafe(nil), *children); end
end

class RuboCop::AST::NodePattern::Parser::WithMeta::Builder
end

class RuboCop::AST::NodePattern::Parser::WithMeta::Lexer
  def initialize(str_or_buffer); end

  def pos(); end
end

class RuboCop::AST::NodePattern::Parser::WithMeta::Lexer
end

class RuboCop::AST::NodePattern::Parser::WithMeta
end

module RuboCop::AST::NodePattern::Sets
  MAX = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
  SET_0_1 = ::T.let(nil, ::T.untyped)
  SET_10_10 = ::T.let(nil, ::T.untyped)
  SET_1_1 = ::T.let(nil, ::T.untyped)
  SET_ABSTRACT_OVERRIDE_OVERRIDABLE_ETC = ::T.let(nil, ::T.untyped)
  SET_ADD_DEPENDENCY_ADD_RUNTIME_DEPENDENCY_ADD_DEVELOPMENT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  SET_AFTER_ACTION_APPEND_AFTER_ACTION_APPEND_AROUND_ACTION_ETC = ::T.let(nil, ::T.untyped)
  SET_ANY_ALL_NORETURN_ETC = ::T.let(nil, ::T.untyped)
  SET_AP_P_PP_ETC = ::T.let(nil, ::T.untyped)
  SET_ATTR_READER_ATTR_WRITER_ATTR_ACCESSOR = ::T.let(nil, ::T.untyped)
  SET_ATTR_READER_ATTR_WRITER_ATTR_ACCESSOR_ATTR = ::T.let(nil, ::T.untyped)
  SET_BELONGS_TO_HAS_ONE_HAS_MANY_HAS_AND_BELONGS_TO_MANY = ::T.let(nil, ::T.untyped)
  SET_BINWRITE_SYSWRITE_WRITE_WRITE_NONBLOCK = ::T.let(nil, ::T.untyped)
  SET_CAPTURE2_CAPTURE2E_CAPTURE3_ETC = ::T.let(nil, ::T.untyped)
  SET_CIPHER_DIGEST = ::T.let(nil, ::T.untyped)
  SET_CLASS_EVAL_INSTANCE_EVAL = ::T.let(nil, ::T.untyped)
  SET_CLASS_EVAL_MODULE_EVAL = ::T.let(nil, ::T.untyped)
  SET_CLASS_MODULE = ::T.let(nil, ::T.untyped)
  SET_CLASS_MODULE_STRUCT = ::T.let(nil, ::T.untyped)
  SET_CONSTANTIZE_CONSTANTS_CONST_GET = ::T.let(nil, ::T.untyped)
  SET_COUNT_LENGTH_SIZE = ::T.let(nil, ::T.untyped)
  SET_CREATED_AT_UPDATED_AT = ::T.let(nil, ::T.untyped)
  SET_CREATED_AT_UPDATED_AT_2 = ::T.let(nil, ::T.untyped)
  SET_DEBUGGER_BYEBUG_REMOTE_BYEBUG = ::T.let(nil, ::T.untyped)
  SET_DEFINE_METHOD_DEFINE_SINGLETON_METHOD = ::T.let(nil, ::T.untyped)
  SET_EACH_WITH_INDEX_WITH_INDEX = ::T.let(nil, ::T.untyped)
  SET_EACH_WITH_OBJECT_WITH_OBJECT = ::T.let(nil, ::T.untyped)
  SET_ENUMERATOR_RATIONAL_COMPLEX_THREAD = ::T.let(nil, ::T.untyped)
  SET_ESCAPE_ENCODE_UNESCAPE_DECODE = ::T.let(nil, ::T.untyped)
  SET_EXECUTE_REMOVE_BELONGS_TO = ::T.let(nil, ::T.untyped)
  SET_FIRST_LAST__ETC = ::T.let(nil, ::T.untyped)
  SET_FIRST_TAKE = ::T.let(nil, ::T.untyped)
  SET_FIXNUM_BIGNUM = ::T.let(nil, ::T.untyped)
  SET_FORMAT_SPRINTF_PRINTF = ::T.let(nil, ::T.untyped)
  SET_GEMCUTTER_RUBYGEMS_RUBYFORGE = ::T.let(nil, ::T.untyped)
  SET_GET_POST_PUT_ETC = ::T.let(nil, ::T.untyped)
  SET_GSUB_GSUB = ::T.let(nil, ::T.untyped)
  SET_HAS_MANY_HAS_ONE = ::T.let(nil, ::T.untyped)
  SET_HAS_MANY_HAS_ONE_BELONGS_TO = ::T.let(nil, ::T.untyped)
  SET_INCLUDE_EXTEND_PREPEND = ::T.let(nil, ::T.untyped)
  SET_INSERT_INSERT = ::T.let(nil, ::T.untyped)
  SET_INSTANCE_EVAL_CLASS_EVAL_MODULE_EVAL = ::T.let(nil, ::T.untyped)
  SET_INSTANCE_EXEC_CLASS_EXEC_MODULE_EXEC = ::T.let(nil, ::T.untyped)
  SET_IS_A_KIND_OF = ::T.let(nil, ::T.untyped)
  SET_KEYS_VALUES = ::T.let(nil, ::T.untyped)
  SET_LAST_FIRST = ::T.let(nil, ::T.untyped)
  SET_LENGTH_SIZE = ::T.let(nil, ::T.untyped)
  SET_LOAD_RESTORE = ::T.let(nil, ::T.untyped)
  SET_MAP_COLLECT = ::T.let(nil, ::T.untyped)
  SET_NEW_OPEN = ::T.let(nil, ::T.untyped)
  SET_NIL_ = ::T.let(nil, ::T.untyped)
  SET_ONLY_EXCEPT = ::T.let(nil, ::T.untyped)
  SET_PIPELINE_PIPELINE_R_PIPELINE_RW_ETC = ::T.let(nil, ::T.untyped)
  SET_PRIVATE_PROTECTED = ::T.let(nil, ::T.untyped)
  SET_PRIVATE_PROTECTED_PUBLIC = ::T.let(nil, ::T.untyped)
  SET_PROP_CONST = ::T.let(nil, ::T.untyped)
  SET_PRY_REMOTE_PRY_PRY_REMOTE_CONSOLE = ::T.let(nil, ::T.untyped)
  SET_PUBLIC_CONSTANT_PRIVATE_CONSTANT = ::T.let(nil, ::T.untyped)
  SET_PUBLIC_PROTECTED_PRIVATE_MODULE_FUNCTION = ::T.let(nil, ::T.untyped)
  SET_RAISE_FAIL = ::T.let(nil, ::T.untyped)
  SET_RAISE_FAIL_THROW_ETC = ::T.let(nil, ::T.untyped)
  SET_REDUCE_INJECT = ::T.let(nil, ::T.untyped)
  SET_REFERER_REFERRER = ::T.let(nil, ::T.untyped)
  SET_RENDER_REDIRECT_TO = ::T.let(nil, ::T.untyped)
  SET_RETURNING_UNIQUE_BY = ::T.let(nil, ::T.untyped)
  SET_SAVE_AND_OPEN_PAGE_SAVE_AND_OPEN_SCREENSHOT_SAVE_SCREENSHOT = ::T.let(nil, ::T.untyped)
  SET_SEND_PUBLIC_SEND___SEND__ = ::T.let(nil, ::T.untyped)
  SET_SINCE_FROM_NOW_AFTER_ETC = ::T.let(nil, ::T.untyped)
  SET_SKIP_AFTER_ACTION_SKIP_AROUND_ACTION_SKIP_BEFORE_ACTION_SKIP_ACTION_CALLBACK = ::T.let(nil, ::T.untyped)
  SET_SORT_BY_SORT = ::T.let(nil, ::T.untyped)
  SET_SPAWN_SYSTEM = ::T.let(nil, ::T.untyped)
  SET_SPRINTF_FORMAT = ::T.let(nil, ::T.untyped)
  SET_STRUCT_CLASS = ::T.let(nil, ::T.untyped)
  SET_SUCC_PRED_NEXT = ::T.let(nil, ::T.untyped)
  SET_TEMPFILE_STRINGIO = ::T.let(nil, ::T.untyped)
  SET_TIME_DATETIME = ::T.let(nil, ::T.untyped)
  SET_TO_I_TO_F_TO_C = ::T.let(nil, ::T.untyped)
  SET_TRANSLATE_LOCALIZE = ::T.let(nil, ::T.untyped)
  SET_TRUE_FALSE = ::T.let(nil, ::T.untyped)
  SET_TRY_TRY = ::T.let(nil, ::T.untyped)
  SET_TYPE_TEMPLATE_TYPE_MEMBER = ::T.let(nil, ::T.untyped)
  SET_UNIQ_DISTINCT = ::T.let(nil, ::T.untyped)
  SET_ZERO_POSITIVE_NEGATIVE = ::T.let(nil, ::T.untyped)
  SET__ = ::T.let(nil, ::T.untyped)
  SET__AT_SLICE = ::T.let(nil, ::T.untyped)
  SET__GLOB = ::T.let(nil, ::T.untyped)
  SET___ = ::T.let(nil, ::T.untyped)
  SET___2 = ::T.let(nil, ::T.untyped)
  SET___3 = ::T.let(nil, ::T.untyped)
  SET___4 = ::T.let(nil, ::T.untyped)
  SET___5 = ::T.let(nil, ::T.untyped)
  SET___6 = ::T.let(nil, ::T.untyped)
  SET____ = ::T.let(nil, ::T.untyped)
  SET____ETC = ::T.let(nil, ::T.untyped)
  SET____ETC_2 = ::T.let(nil, ::T.untyped)
  SET____ETC_3 = ::T.let(nil, ::T.untyped)
  SET____ETC_4 = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::ProcessedSource
  STRING_SOURCE_NAME = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::RuboCopCompatibility
  INCOMPATIBLE_COPS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Traversal
  TYPE_TO_METHOD = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RuboCop::CLI::Command::AutoGenerateConfig
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ActiveRecordHelper
  WHERE_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ConstantResolution
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FormatParameterMismatch
  MSG_INVALID = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::Utils::CodeLengthCalculator
  CLASSISH_TYPES = ::T.let(nil, ::T.untyped)
  FOLDABLE_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Metrics::Utils::IteratingBlock
  KNOWN_ITERATING_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::AsciiIdentifiers
  CONSTANT_MSG = ::T.let(nil, ::T.untyped)
  IDENTIFIER_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::BinaryOperatorParameterName
  EXCLUDED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Offense
  NO_LOCATION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::ActiveRecordCallbacksOrder
  CALLBACKS_IN_ORDER = ::T.let(nil, ::T.untyped)
  CALLBACKS_ORDER_MAP = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::AfterCommitOverride
  AFTER_COMMIT_CALLBACKS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::ContentTag
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::DefaultScope
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::FindById
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::Inquiry
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::MailerName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::MatchRoute
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::NegateInclude
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::OrderById
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::Pick
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::Pluck
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::PluckId
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::PluckInWhere
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::RedundantForeignKey
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::RenderInline
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::RenderPlainText
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::ShortI18n
  MSG = ::T.let(nil, ::T.untyped)
  PREFERRED_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::SquishedSQLHeredocs
  MSG = ::T.let(nil, ::T.untyped)
  SQL = ::T.let(nil, ::T.untyped)
  SQUISH = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::WhereExists
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Rails::WhereNot
  IS_NOT_NULL_RE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NOT_EQ_ANONYMOUS_RE = ::T.let(nil, ::T.untyped)
  NOT_EQ_NAMED_RE = ::T.let(nil, ::T.untyped)
  NOT_IN_ANONYMOUS_RE = ::T.let(nil, ::T.untyped)
  NOT_IN_NAMED_RE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::CallbackConditionalsBinding
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::EnforceSigilOrder
  CODING_REGEX = ::T.let(nil, ::T.untyped)
  FROZEN_REGEX = ::T.let(nil, ::T.untyped)
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  MAGIC_REGEX = ::T.let(nil, ::T.untyped)
  PREFERRED_ORDER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidExtendTSigHelpersInShims
  MSG = ::T.let(nil, ::T.untyped)
  RESTRICT_ON_SEND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidIncludeConstLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidRBIOutsideOfSorbetDir
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidSuperclassConstLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidUntypedStructProps
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::OneAncestorPerLine
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::SignatureBuildOrder
  ORDER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::SingleLineRbiClassModuleDefinitions
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ValidSigil
  SIGIL_REGEX = ::T.let(nil, ::T.untyped)
  STRICTNESS_LEVELS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AccessorGrouping
  ACCESSOR_METHODS = ::T.let(nil, ::T.untyped)
  GROUPED_MSG = ::T.let(nil, ::T.untyped)
  SEPARATED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BisectedAttrAccessor
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantConditional
  COMPARISON_OPERATOR_MATCHER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantFetchBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSelf
  KEYWORDS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::NodePattern
end

RuboCop::NodePattern::Builder = RuboCop::AST::NodePattern::Builder

class RuboCop::AST::NodePattern::Compiler
end

RuboCop::NodePattern::Compiler::Debug = RuboCop::AST::NodePattern::Compiler::Debug

class RuboCop::AST::NodePattern::Compiler
end

class RuboCop::AST::NodePattern::Lexer
end

RuboCop::NodePattern::Lexer::Error = RuboCop::AST::NodePattern::LexerRex::ScanError

class RuboCop::AST::NodePattern::Lexer
end

class RuboCop::AST::NodePattern
end

RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

module RuboCop::Sorbet
  CONFIG = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

RuboCop::Token = RuboCop::AST::Token

class RubyVM::AbstractSyntaxTree::Node
  def pretty_print_children(q, names=T.unsafe(nil)); end
end

class RubyVM::DebugInspector
  VERSION = ::T.let(nil, ::T.untyped)
end

class RubyVM::InstructionSequence
  extend ::Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
end

module RubyVM::MJIT
end

module RubyVM::MJIT
  def self.enabled?(); end

  def self.pause(*_); end

  def self.resume(); end
end

class RubyVM
  def self.resolve_feature_path(_); end
end

class Sanitize
  REGEX_HTML_CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  REGEX_HTML_NON_CHARACTERS = ::T.let(nil, ::T.untyped)
  REGEX_PROTOCOL = ::T.let(nil, ::T.untyped)
  REGEX_UNSUITABLE_CHARS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sanitize::Config
  BASIC = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  RELAXED = ::T.let(nil, ::T.untyped)
  RESTRICTED = ::T.let(nil, ::T.untyped)
end

module Sanitize::Transformers
  CleanCDATA = ::T.let(nil, ::T.untyped)
  CleanComment = ::T.let(nil, ::T.untyped)
  CleanDoctype = ::T.let(nil, ::T.untyped)
end

class Sanitize::Transformers::CleanElement
  REGEX_DATA_ATTR = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ATTRS_A = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ATTRS_GLOBAL = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ESCAPE_CHARS = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

module Sass
  ROOT_DIR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sass::Engine
  COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  CONTENT_RE = ::T.let(nil, ::T.untyped)
  CSS_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  DIRECTIVE_CHAR = ::T.let(nil, ::T.untyped)
  ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
  FUNCTION_RE = ::T.let(nil, ::T.untyped)
  MIXIN_DEFINITION_CHAR = ::T.let(nil, ::T.untyped)
  MIXIN_DEF_RE = ::T.let(nil, ::T.untyped)
  MIXIN_INCLUDE_CHAR = ::T.let(nil, ::T.untyped)
  MIXIN_INCLUDE_RE = ::T.let(nil, ::T.untyped)
  PROPERTY_CHAR = ::T.let(nil, ::T.untyped)
  PROPERTY_OLD = ::T.let(nil, ::T.untyped)
  SASS_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  SASS_LOUD_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
end

module Sass::Features
  KNOWN_FEATURES = ::T.let(nil, ::T.untyped)
end

class Sass::Importers::Filesystem
  REDUNDANT_DIRECTORY = ::T.let(nil, ::T.untyped)
end

module Sass::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sass::Rails::SassImporter::Globbing
  GLOB = ::T.let(nil, ::T.untyped)
end

class Sass::SCSS::Parser
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  EXPR_NAMES = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PREFIXED_DIRECTIVES = ::T.let(nil, ::T.untyped)
  TOK_NAMES = ::T.let(nil, ::T.untyped)
end

module Sass::SCSS::RX
  ANY = ::T.let(nil, ::T.untyped)
  CDC = ::T.let(nil, ::T.untyped)
  CDO = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  DASHMATCH = ::T.let(nil, ::T.untyped)
  DOMAIN = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  GREATER = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  HASH = ::T.let(nil, ::T.untyped)
  HEXCOLOR = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_HYPHEN_INTERP = ::T.let(nil, ::T.untyped)
  IDENT_START = ::T.let(nil, ::T.untyped)
  IMPORTANT = ::T.let(nil, ::T.untyped)
  INCLUDES = ::T.let(nil, ::T.untyped)
  INTERP_START = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  NL = ::T.let(nil, ::T.untyped)
  NMCHAR = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  NOT = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  OPTIONAL = ::T.let(nil, ::T.untyped)
  PERCENTAGE = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  PREFIXMATCH = ::T.let(nil, ::T.untyped)
  RANGE = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  SINGLE_LINE_COMMENT = ::T.let(nil, ::T.untyped)
  STATIC_COMPONENT = ::T.let(nil, ::T.untyped)
  STATIC_SELECTOR = ::T.let(nil, ::T.untyped)
  STATIC_VALUE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRING1 = ::T.let(nil, ::T.untyped)
  STRING1_NOINTERP = ::T.let(nil, ::T.untyped)
  STRING2 = ::T.let(nil, ::T.untyped)
  STRING2_NOINTERP = ::T.let(nil, ::T.untyped)
  STRING_NOINTERP = ::T.let(nil, ::T.untyped)
  SUBSTRINGMATCH = ::T.let(nil, ::T.untyped)
  SUFFIXMATCH = ::T.let(nil, ::T.untyped)
  TILDE = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
  UNICODERANGE = ::T.let(nil, ::T.untyped)
  UNIT = ::T.let(nil, ::T.untyped)
  UNITLESS_NUMBER = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
  URL = ::T.let(nil, ::T.untyped)
  URLCHAR = ::T.let(nil, ::T.untyped)
  URL_PREFIX = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
  W = ::T.let(nil, ::T.untyped)
end

class Sass::SCSS::StaticParser
  PREFIXED_SELECTOR_PSEUDO_CLASSES = ::T.let(nil, ::T.untyped)
  SELECTOR_PSEUDO_CLASSES = ::T.let(nil, ::T.untyped)
end

module Sass::Script
  CONST_RENAMES = ::T.let(nil, ::T.untyped)
  MATCH = ::T.let(nil, ::T.untyped)
  VALIDATE = ::T.let(nil, ::T.untyped)
end

Sass::Script::ArgList = Sass::Script::Value::ArgList

Sass::Script::Bool = Sass::Script::Value::Bool

Sass::Script::Color = Sass::Script::Value::Color

Sass::Script::Funcall = Sass::Script::Tree::Funcall

class Sass::Script::Functions::EvaluationContext
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

Sass::Script::Interpolation = Sass::Script::Tree::Interpolation

class Sass::Script::Lexer
  IDENT_OP_NAMES = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  OPERATORS_REVERSE = ::T.let(nil, ::T.untyped)
  OP_NAMES = ::T.let(nil, ::T.untyped)
  PARSEABLE_NUMBER = ::T.let(nil, ::T.untyped)
  REGULAR_EXPRESSIONS = ::T.let(nil, ::T.untyped)
  STRING_REGULAR_EXPRESSIONS = ::T.let(nil, ::T.untyped)
  TOKEN_NAMES = ::T.let(nil, ::T.untyped)
end

Sass::Script::List = Sass::Script::Value::List

Sass::Script::Literal = Sass::Script::Value::Base

Sass::Script::Node = Sass::Script::Tree::Node

Sass::Script::Null = Sass::Script::Value::Null

Sass::Script::Number = Sass::Script::Value::Number

Sass::Script::Operation = Sass::Script::Tree::Operation

class Sass::Script::Parser
  ASSOCIATIVE = ::T.let(nil, ::T.untyped)
  EXPR_NAMES = ::T.let(nil, ::T.untyped)
  PRECEDENCE = ::T.let(nil, ::T.untyped)
  VALID_CSS_OPS = ::T.let(nil, ::T.untyped)
end

Sass::Script::String = Sass::Script::Value::String

Sass::Script::StringInterpolation = Sass::Script::Tree::StringInterpolation

Sass::Script::UnaryOperation = Sass::Script::Tree::UnaryOperation

class Sass::Script::Value::Base
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Color
  ALTERNATE_COLOR_NAMES = ::T.let(nil, ::T.untyped)
  COLOR_NAMES = ::T.let(nil, ::T.untyped)
  COLOR_NAMES_REVERSE = ::T.let(nil, ::T.untyped)
end

module Sass::Script::Value::Helpers
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Null
  NULL = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Number
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

Sass::Script::Variable = Sass::Script::Tree::Variable

module Sass::Selector
  SPECIFICITY_BASE = ::T.let(nil, ::T.untyped)
end

class Sass::Selector::Pseudo
  ACTUALLY_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::RuleNode
  PARENT = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::Visitors::CheckNesting
  CONTROL_NODES = ::T.let(nil, ::T.untyped)
  INVALID_IMPORT_PARENTS = ::T.let(nil, ::T.untyped)
  SCRIPT_NODES = ::T.let(nil, ::T.untyped)
  VALID_EXTEND_PARENTS = ::T.let(nil, ::T.untyped)
  VALID_FUNCTION_CHILDREN = ::T.let(nil, ::T.untyped)
  VALID_PROP_CHILDREN = ::T.let(nil, ::T.untyped)
  VALID_PROP_PARENTS = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::Visitors::ToCss
  NEWLINE = ::T.let(nil, ::T.untyped)
end

module Sass::Util
  ATOMIC_WRITE_MUTEX = ::T.let(nil, ::T.untyped)
  BASE64_DIGITS = ::T.let(nil, ::T.untyped)
  BASE64_DIGIT_MAP = ::T.let(nil, ::T.untyped)
  CHARSET_REGEXP = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
  URI_ESCAPE = ::T.let(nil, ::T.untyped)
  UTF_16BE_BOM = ::T.let(nil, ::T.untyped)
  UTF_16LE_BOM = ::T.let(nil, ::T.untyped)
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
  VLQ_BASE = ::T.let(nil, ::T.untyped)
  VLQ_BASE_MASK = ::T.let(nil, ::T.untyped)
  VLQ_BASE_SHIFT = ::T.let(nil, ::T.untyped)
  VLQ_CONTINUATION_BIT = ::T.let(nil, ::T.untyped)
end

module Sawyer
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sawyer::Agent
  NO_BODY = ::T.let(nil, ::T.untyped)
end

class Sawyer::LinkParsers::Simple
  LINK_REGEX = ::T.let(nil, ::T.untyped)
end

class Sawyer::Resource
  ATTR_PREDICATE = ::T.let(nil, ::T.untyped)
  ATTR_SETTER = ::T.let(nil, ::T.untyped)
  SPECIAL_METHODS = ::T.let(nil, ::T.untyped)
end

ScanError = StringScanner::Error

module Searchkick
  VERSION = ::T.let(nil, ::T.untyped)
end

class Searchkick::BulkReindexJob
  def perform(class_name:, record_ids: T.unsafe(nil), index_name: T.unsafe(nil), method_name: T.unsafe(nil), batch_id: T.unsafe(nil), min_id: T.unsafe(nil), max_id: T.unsafe(nil)); end
end

class Searchkick::BulkReindexJob
end

class Searchkick::Index
  include ::Searchkick::IndexWithInstrumentation
end

class Searchkick::Indexer
  include ::Searchkick::IndexerWithInstrumentation
end

class Searchkick::LogSubscriber
  def multi_search(event); end

  def request(event); end

  def search(event); end
end

class Searchkick::ProcessBatchJob
  def perform(class_name:, record_ids:, index_name: T.unsafe(nil)); end
end

class Searchkick::ProcessBatchJob
end

class Searchkick::ProcessQueueJob
  def perform(class_name:, index_name: T.unsafe(nil), inline: T.unsafe(nil)); end
end

class Searchkick::ProcessQueueJob
end

class Searchkick::Query
  include ::Searchkick::QueryWithInstrumentation
end

class Searchkick::RecordData
  TYPE_KEYS = ::T.let(nil, ::T.untyped)
end

class Searchkick::ReindexV2Job
  def perform(klass, id, method_name=T.unsafe(nil), routing: T.unsafe(nil)); end
  RECORD_NOT_FOUND_CLASSES = ::T.let(nil, ::T.untyped)
end

class Searchkick::ReindexV2Job
end

module Searchkick
  extend ::Searchkick::SearchkickWithInstrumentation
end

module SecureRandom
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver
  VERSION = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chrome::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chrome::Options
  KEY = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::DriverExtensions::Rotatable
  ORIENTATIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Error
  DEPRECATED_ERRORS = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox
  DEFAULT_ASSUME_UNTRUSTED_ISSUER = ::T.let(nil, ::T.untyped)
  DEFAULT_ENABLE_NATIVE_EVENTS = ::T.let(nil, ::T.untyped)
  DEFAULT_LOAD_NO_FOCUS_LIB = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_SECURE_SSL = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Binary
  NO_FOCUS_LIBRARIES = ::T.let(nil, ::T.untyped)
  NO_FOCUS_LIBRARY_NAME = ::T.let(nil, ::T.untyped)
  QUIT_TIMEOUT = ::T.let(nil, ::T.untyped)
  WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Extension
  NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Launcher
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  STABLE_CONNECTION_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox::Marionette::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Options
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Profile
  VALID_PREFERENCE_TYPES = ::T.let(nil, ::T.untyped)
  WEBDRIVER_EXTENSION_PATH = ::T.let(nil, ::T.untyped)
  WEBDRIVER_PREFS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::HTML5::SharedWebStorage
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Selenium::WebDriver::IE::Options
  CAPABILITIES = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
  SCROLL_BOTTOM = ::T.let(nil, ::T.untyped)
  SCROLL_TOP = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Interactions
  KEY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SOURCE_TYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::Interaction
  PAUSE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::KeyInput
  SUBTYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerInput
  KIND = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerMove
  ORIGINS = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  VIEWPORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerPress
  BUTTONS = ::T.let(nil, ::T.untyped)
  DIRECTIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Keyboard
  MODIFIERS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Keys
  KEYS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Manager
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::PortProber
  IGNORED_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Proxy
  ALLOWED = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Capabilities
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Common
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_HEADERS = ::T.let(nil, ::T.untyped)
  MAX_REDIRECTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Default
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::OSS::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Response
  STACKTRACE_KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
  ESCAPE_CSS_REGEXP = ::T.let(nil, ::T.untyped)
  QUIT_ERRORS = ::T.let(nil, ::T.untyped)
  UNICODE_CODE_POINT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Capabilities
  EXTENSION_CAPABILITY_PATTERN = ::T.let(nil, ::T.untyped)
  KNOWN = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Safari::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::SearchContext
  FINDERS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Service
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  START_TIMEOUT = ::T.let(nil, ::T.untyped)
  STOP_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::SocketPoller
  CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  NOT_CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Support::Color
  HEX3_PATTERN = ::T.let(nil, ::T.untyped)
  HEX_PATTERN = ::T.let(nil, ::T.untyped)
  HSLA_PATTERN = ::T.let(nil, ::T.untyped)
  HSL_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PCT_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PCT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::TouchScreen
  FLICK_SPEED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Wait
  DEFAULT_INTERVAL = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Zipper
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Set
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

module Shellany
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sidekiq::Extensions::DelayedClass
  def newrelic_trace_args(msg, queue); end
end

module Sidekiq::LoggingUtils
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Sidekiq::Web
  ASSETS = ::T.let(nil, ::T.untyped)
  DEFAULT_TABS = ::T.let(nil, ::T.untyped)
  LAYOUT = ::T.let(nil, ::T.untyped)
  LOCALES = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
  VIEWS = ::T.let(nil, ::T.untyped)
end

class Sidekiq::Web::CsrfProtection
  TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

class Sidekiq::WebAction
  RACK_SESSION = ::T.let(nil, ::T.untyped)
end

class Sidekiq::WebApplication
  CSP_HEADER = ::T.let(nil, ::T.untyped)
  QUEUE_NAME = ::T.let(nil, ::T.untyped)
  REDIS_KEYS = ::T.let(nil, ::T.untyped)
end

module Sidekiq::WebHelpers
  RETRY_JOB_KEYS = ::T.let(nil, ::T.untyped)
  SAFE_QPARAMS = ::T.let(nil, ::T.untyped)
end

class Sidekiq::WebRoute
  NAMED_SEGMENTS_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sidekiq::WebRouter
  DELETE = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  ROUTE_PARAMS = ::T.let(nil, ::T.untyped)
end

module SimpleCov
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov::Configuration
  DEFAULT_COVERAGE_CRITERION = ::T.let(nil, ::T.untyped)
  SUPPORTED_COVERAGE_CRITERIA = ::T.let(nil, ::T.untyped)
end

module SimpleCov::ExitCodes
  EXCEPTION = ::T.let(nil, ::T.untyped)
  MAXIMUM_COVERAGE_DROP = ::T.let(nil, ::T.untyped)
  MINIMUM_COVERAGE = ::T.let(nil, ::T.untyped)
  SUCCESS = ::T.let(nil, ::T.untyped)
end

class SimpleCov::ExitCodes::MaximumCoverageDropCheck
  MAX_DROP_ACCURACY = ::T.let(nil, ::T.untyped)
end

class SimpleCov::Formatter::HTMLFormatter
  VERSION = ::T.let(nil, ::T.untyped)
end

class SimpleCov::LinesClassifier
  COMMENT_LINE = ::T.let(nil, ::T.untyped)
  NOT_RELEVANT = ::T.let(nil, ::T.untyped)
  RELEVANT = ::T.let(nil, ::T.untyped)
  WHITESPACE_LINE = ::T.let(nil, ::T.untyped)
  WHITESPACE_OR_COMMENT_LINE = ::T.let(nil, ::T.untyped)
end

class SimpleCov::SourceFile
  RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  SHEBANG_REGEX = ::T.let(nil, ::T.untyped)
end

class SimpleCovJSONFormatter::ResultExporter
  FILENAME = ::T.let(nil, ::T.untyped)
end

class SimpleOAuth::Header
  ATTRIBUTE_KEYS = ::T.let(nil, ::T.untyped)
  IGNORED_KEYS = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

class SiteSetting
  include ::SiteSetting::GeneratedAssociationMethods
end

class SiteSetting::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::SiteSetting::GeneratedRelationMethods
end

class SiteSetting::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::SiteSetting::GeneratedRelationMethods
end

class SiteSetting::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::SiteSetting::GeneratedRelationMethods
end

module SiteSetting::GeneratedAssociationMethods
end

module SiteSetting::GeneratedAssociationMethods
end

module SiteSetting::GeneratedRelationMethods
end

module SiteSetting::GeneratedRelationMethods
end

class SiteSetting
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SiteSettingForm
  include ::Virtus::Model::Core
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods
  include ::Virtus::Model::Constructor
  include ::Virtus::InstanceMethods::Constructor
  include ::Virtus::Model::MassAssignment
  include ::Virtus::InstanceMethods::MassAssignment
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class SiteSettingForm
  extend ::ActiveModel::Callbacks
  extend ::Searchkick::Model
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::Virtus::ClassMethods
  extend ::Virtus::Extensions::Methods
  extend ::Virtus::ConstMissingExtensions
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Sitemap
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SitemapUrl
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Slack::Notifier::Util::Escape
  HTML_REGEXP = ::T.let(nil, ::T.untyped)
  HTML_REPLACE = ::T.let(nil, ::T.untyped)
end

class Slack::Notifier::Util::LinkFormatter
  HTML_PATTERN = ::T.let(nil, ::T.untyped)
  MARKDOWN_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_PATH_CHARS = ::T.let(nil, ::T.untyped)
end

class Socket
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

SorbetRails::JobRbiFormatter::Parameter = Parlour::RbiGenerator::Parameter

SorbetRails::MailerRbiFormatter::Parameter = Parlour::RbiGenerator::Parameter

SorbetRails::ModelPlugins::Base::Parameter = Parlour::RbiGenerator::Parameter

module SorbetRails::PluckToTStruct
  NILCLASS_STRING = ::T.let(nil, ::T.untyped)
end

module SorbetRails
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

module Sprockets
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::Autoload::Sass = Sass

Sprockets::Autoload::Uglifier = Uglifier

class Sprockets::Base
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Engines
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::Bower
  POSSIBLE_BOWER_JSONS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache
  PEEK_SIZE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::MemoryStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::NullStore
  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::NullStore
end

class Sprockets::ClosureCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Processing
  include ::Sprockets::Transformers
  include ::Sprockets::Engines
  include ::Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::DigestUtils
end

module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::DigestUtils
  DIGEST_SIZES = ::T.let(nil, ::T.untyped)
  HASH_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

class Sprockets::DirectiveProcessor
  DIRECTIVE_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::ERBTemplate
  def call(*args); end
end

class Sprockets::ERBTemplate
end

module Sprockets::EcoProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EjsProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EncodingUtils
  BOM = ::T.let(nil, ::T.untyped)
  CHARSET_DETECT = ::T.let(nil, ::T.untyped)
  CHARSET_SIZE = ::T.let(nil, ::T.untyped)
  CHARSET_START = ::T.let(nil, ::T.untyped)
end

Sprockets::Index = Sprockets::CachedEnvironment

module Sprockets::Loader
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
end

module Sprockets::ManifestUtils
  LEGACY_MANIFEST_RE = ::T.let(nil, ::T.untyped)
  MANIFEST_RE = ::T.let(nil, ::T.untyped)
end

module Sprockets::Mime
  include ::Sprockets::Utils
end

module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::PathUtils
  SEPARATOR_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sprockets::Paths
  include ::Sprockets::Utils
end

module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
end

module Sprockets::ProcessorUtils
  VALID_METADATA_COMPOUND_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_COMPOUND_TYPES_HASH = ::T.let(nil, ::T.untyped)
  VALID_METADATA_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES_HASH = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Helper
  VIEW_ACCESSORS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Railtie
  LOOSE_APP_ASSETS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
end

class Sprockets::SassCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

class Sprockets::SassProcessor::CacheStore
  def initialize(cache, version); end

  def path_to(key); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::SassProcessor::CacheStore
end

class Sprockets::SassTemplate
end

class Sprockets::SassTemplate
  def self.call(*args); end
end

class Sprockets::ScssTemplate
end

class Sprockets::ScssTemplate
  def self.call(*args); end
end

module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
end

class Sprockets::UglifierCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils
  UNBOUND_METHODS_BIND_TO_ANY_OBJECT = ::T.let(nil, ::T.untyped)
end

class Sprockets::Utils::Gzip
  COMPRESSABLE_MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Sprockets::YUICompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Processing
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::DigestUtils
end

class StandaloneSweeper
  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end
end

class StandaloneSweeper
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self._routes(); end

  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

class Stat
  include ::Stat::GeneratedAssociationMethods
  def _notify_stat_sweeper_for_after_save(&block); end
end

class Stat::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Stat::GeneratedRelationMethods
end

class Stat::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Stat::GeneratedRelationMethods
end

class Stat::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Stat::GeneratedRelationMethods
end

module Stat::GeneratedAssociationMethods
end

module Stat::GeneratedAssociationMethods
end

module Stat::GeneratedRelationMethods
end

module Stat::GeneratedRelationMethods
end

class Stat
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  def parse_csv(**options); end

  def shellescape(); end

  def shellsplit(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class StringScanner
  def bol?(); end

  def initialize(*_); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def filter(*_); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class Symbol
  def self.from_msgpack_ext(data); end
end

class SyncGithubIssueForAuthorityService
  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end
end

class SyncGithubIssueForAuthorityService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self._routes(); end

  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

module Sysexits
  EX_CANTCREAT = ::T.let(nil, ::T.untyped)
  EX_CONFIG = ::T.let(nil, ::T.untyped)
  EX_DATAERR = ::T.let(nil, ::T.untyped)
  EX_IOERR = ::T.let(nil, ::T.untyped)
  EX_NOHOST = ::T.let(nil, ::T.untyped)
  EX_NOINPUT = ::T.let(nil, ::T.untyped)
  EX_NOPERM = ::T.let(nil, ::T.untyped)
  EX_NOUSER = ::T.let(nil, ::T.untyped)
  EX_OK = ::T.let(nil, ::T.untyped)
  EX_OSERR = ::T.let(nil, ::T.untyped)
  EX_OSFILE = ::T.let(nil, ::T.untyped)
  EX_PROTOCOL = ::T.let(nil, ::T.untyped)
  EX_SOFTWARE = ::T.let(nil, ::T.untyped)
  EX_TEMPFAIL = ::T.let(nil, ::T.untyped)
  EX_UNAVAILABLE = ::T.let(nil, ::T.untyped)
  EX_USAGE = ::T.let(nil, ::T.untyped)
  EX__BASE = ::T.let(nil, ::T.untyped)
  EX__MAX = ::T.let(nil, ::T.untyped)
  REVISION = ::T.let(nil, ::T.untyped)
  STATUS_CODES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class TZInfo::JulianDayOfYearTransitionRule
  LEAP = ::T.let(nil, ::T.untyped)
  YEAR = ::T.let(nil, ::T.untyped)
end

class TZInfo::ZoneinfoTimezoneInfo
  GENERATE_UP_TO = ::T.let(nil, ::T.untyped)
end

class Tempfile
  def _close(); end

  def inspect(); end
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

module Temple
  VERSION = ::T.let(nil, ::T.untyped)
end

class Temple::ERB::Engine
end

class Temple::ERB::Engine
end

class Temple::ERB::Parser
  def call(input); end
  ERB_PATTERN = ::T.let(nil, ::T.untyped)
end

class Temple::ERB::Parser
end

class Temple::ERB::Template
end

class Temple::ERB::Template
end

class Temple::ERB::Trimming
end

class Temple::ERB::Trimming
end

class Temple::FilterError
end

class Temple::FilterError
end

class Temple::Filters::CodeMerger
end

class Temple::Filters::CodeMerger
end

class Temple::Filters::DynamicInliner
end

class Temple::Filters::DynamicInliner
end

class Temple::Filters::Encoding
  def call(s); end
end

class Temple::Filters::Encoding
end

class Temple::Filters::Eraser
  def do?(list, exp); end
end

class Temple::Filters::Eraser
end

class Temple::Filters::Escapable
  def on_dynamic(value); end

  def on_static(value); end
end

class Temple::Filters::Escapable
end

class Temple::Filters::RemoveBOM
  def call(s); end
end

class Temple::Filters::RemoveBOM
end

class Temple::Filters::StaticAnalyzer
  def on_dynamic(code); end
end

class Temple::Filters::StaticAnalyzer
end

class Temple::Filters::StringSplitter
  def on_dynamic(code); end
end

class Temple::Filters::StringSplitter::SyntaxChecker
end

class Temple::Filters::StringSplitter::SyntaxChecker::ParseError
end

class Temple::Filters::StringSplitter::SyntaxChecker::ParseError
end

class Temple::Filters::StringSplitter::SyntaxChecker
  def self.syntax_error?(code); end
end

class Temple::Filters::StringSplitter
  def self.compile(code); end
end

class Temple::Filters::Validator
end

class Temple::Filters::Validator
end

class Temple::Generator
  include ::Temple::Utils
  include ::Temple::Mixins::CompiledDispatcher
  include ::Temple::Mixins::Options
  def buffer(); end

  def capture_generator(); end

  def concat(str); end

  def create_buffer(); end

  def on(*exp); end

  def on_capture(name, exp); end

  def on_code(code); end

  def on_dynamic(code); end

  def on_multi(*exp); end

  def on_newline(); end

  def on_static(text); end

  def postamble(); end

  def preamble(); end

  def restore_buffer(); end

  def return_buffer(); end

  def save_buffer(); end
end

class Temple::Generator
  extend ::Temple::Mixins::ClassOptions
  extend ::Temple::Mixins::ThreadOptions
end

class Temple::Generators::Array
end

class Temple::Generators::Array
end

class Temple::Generators::ArrayBuffer
end

class Temple::Generators::ArrayBuffer
end

class Temple::Generators::ERB
end

class Temple::Generators::ERB
end

class Temple::Generators::RailsOutputBuffer
end

class Temple::Generators::RailsOutputBuffer
end

class Temple::Generators::StringBuffer
end

class Temple::Generators::StringBuffer
end

module Temple::Grammar
  Bool = ::T.let(nil, ::T.untyped)
  Case = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  EmptyExp = ::T.let(nil, ::T.untyped)
  Expression = ::T.let(nil, ::T.untyped)
  HTMLAttr = ::T.let(nil, ::T.untyped)
  HTMLIdentifier = ::T.let(nil, ::T.untyped)
end

module Temple::Grammar
  extend ::Temple::Mixins::GrammarDSL
end

class Temple::HTML::AttributeMerger
end

class Temple::HTML::AttributeMerger
end

class Temple::HTML::AttributeRemover
  def on_html_attr(name, value); end
end

class Temple::HTML::AttributeRemover
end

class Temple::HTML::AttributeSorter
end

class Temple::HTML::AttributeSorter
end

module Temple::HTML::Dispatcher
  def on_html_attr(name, content); end

  def on_html_attrs(*attrs); end

  def on_html_comment(content); end

  def on_html_condcomment(condition, content); end

  def on_html_js(content); end

  def on_html_tag(name, attrs, content=T.unsafe(nil)); end
end

module Temple::HTML::Dispatcher
end

class Temple::HTML::Fast
  def on_html_attr(name, value); end

  def on_html_doctype(type); end
  DOCTYPES = ::T.let(nil, ::T.untyped)
  HTML_VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Temple::HTML::Fast
end

class Temple::HTML::Filter
  include ::Temple::HTML::Dispatcher
  def contains_nonempty_static?(exp); end
end

class Temple::HTML::Filter
end

class Temple::HTML::Pretty
  def indent(); end

  def on_dynamic(code); end

  def on_static(content); end

  def preamble(); end

  def tag_indent(name); end
end

class Temple::HTML::Pretty
end

class Temple::InvalidExpression
end

class Temple::InvalidExpression
end

module Temple::Mixins::GrammarDSL
  def ===(exp); end

  def =~(exp); end

  def Rule(rule); end

  def Value(value); end

  def const_missing(name); end

  def extended(mod); end

  def match?(exp); end

  def validate!(exp); end
end

class Temple::Mixins::GrammarDSL::Element
  def initialize(grammar, rule); end
end

class Temple::Mixins::GrammarDSL::Element
end

class Temple::Mixins::GrammarDSL::Or
  def <<(rule); end

  def after_copy(source); end

  def initialize(grammar, *children); end

  def match(exp, unmatched); end
end

class Temple::Mixins::GrammarDSL::Or
end

class Temple::Mixins::GrammarDSL::Root
  def initialize(grammar, name); end

  def validate!(exp); end
end

class Temple::Mixins::GrammarDSL::Root
end

class Temple::Mixins::GrammarDSL::Rule
  def ===(exp); end

  def =~(exp); end

  def copy_to(grammar); end

  def initialize(grammar); end

  def match?(exp); end

  def |(rule); end
end

class Temple::Mixins::GrammarDSL::Rule
end

class Temple::Mixins::GrammarDSL::Value
  def initialize(grammar, value); end

  def match(exp, unmatched); end
end

class Temple::Mixins::GrammarDSL::Value
end

module Temple::Mixins::GrammarDSL
end

module Temple::Mixins::Template
  include ::Temple::Mixins::ClassOptions
  def compile(code, options); end

  def create(engine, options); end

  def register_as(*names); end
end

module Temple::Mixins::Template
end

class Temple::Parser
  include ::Temple::Utils
  include ::Temple::Mixins::Options
end

class Temple::Parser
  extend ::Temple::Mixins::ClassOptions
  extend ::Temple::Mixins::ThreadOptions
end

module Temple::StaticAnalyzer
  DYNAMIC_TOKENS = ::T.let(nil, ::T.untyped)
  STATIC_KEYWORDS = ::T.let(nil, ::T.untyped)
  STATIC_OPERATORS = ::T.let(nil, ::T.untyped)
  STATIC_TOKENS = ::T.let(nil, ::T.untyped)
end

module Temple::Templates
end

class Temple::Templates::Rails
  def call(template, source=T.unsafe(nil)); end

  def supports_streaming?(); end
end

class Temple::Templates::Rails
  extend ::Temple::Mixins::Template
  extend ::Temple::Mixins::ClassOptions
end

class Temple::Templates::Tilt
  def precompiled_template(locals=T.unsafe(nil)); end
end

class Temple::Templates::Tilt
  extend ::Temple::Mixins::Template
  extend ::Temple::Mixins::ClassOptions
  def self.default_mime_type=(mime_type); end
end

module Temple::Templates
  def self.method_missing(name, engine, options=T.unsafe(nil)); end
end

module ThemesOnRails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Thin
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  SERVER = ::T.let(nil, ::T.untyped)
end

class Thin::Backends::Base
  def close(); end

  def config(); end

  def connection_finished(connection); end

  def empty?(); end

  def initialize_connection(connection); end

  def maximum_connections(); end

  def maximum_connections=(maximum_connections); end

  def maximum_persistent_connections(); end

  def maximum_persistent_connections=(maximum_persistent_connections); end

  def no_epoll(); end

  def no_epoll=(no_epoll); end

  def persistent_connection_count(); end

  def persistent_connection_count=(persistent_connection_count); end

  def running?(); end

  def server(); end

  def server=(server); end

  def size(); end

  def ssl=(ssl); end

  def ssl?(); end

  def ssl_options=(ssl_options); end

  def start(); end

  def started_reactor?(); end

  def stop(); end

  def stop!(); end

  def threaded=(threaded); end

  def threaded?(); end

  def threadpool_size(); end

  def threadpool_size=(size); end

  def timeout(); end

  def timeout=(timeout); end
end

class Thin::Backends::Base
end

class Thin::Backends::SwiftiplyClient
  def connect(); end

  def disconnect(); end

  def host(); end

  def host=(host); end

  def initialize(host, port, options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def port(); end

  def port=(port); end
end

class Thin::Backends::SwiftiplyClient
end

class Thin::Backends::TcpServer
  def connect(); end

  def disconnect(); end

  def host(); end

  def host=(host); end

  def initialize(host, port); end

  def port(); end

  def port=(port); end
end

class Thin::Backends::TcpServer
end

class Thin::Backends::UnixServer
  def connect(); end

  def disconnect(); end

  def initialize(socket); end

  def remove_socket_file(); end

  def socket(); end

  def socket=(socket); end
end

class Thin::Backends::UnixServer
end

class Thin::Command
  include ::Thin::Logging
  def initialize(name, options=T.unsafe(nil)); end

  def run(); end

  def shellify(); end
end

class Thin::Command
  def self.run(*args); end

  def self.script(); end

  def self.script=(script); end
end

class Thin::Connection
  include ::Thin::Logging
  def app(); end

  def app=(app); end

  def backend(); end

  def backend=(backend); end

  def can_persist!(); end

  def can_persist?(); end

  def close_request_response(); end

  def idle?(); end

  def persistent?(); end

  def post_process(result); end

  def pre_process(); end

  def process(); end

  def remote_address(); end

  def request(); end

  def request=(request); end

  def response(); end

  def response=(response); end

  def socket_address(); end

  def terminate_request(); end

  def threaded=(threaded); end

  def threaded?(); end

  def unexpected_error(e); end
  AsyncResponse = ::T.let(nil, ::T.untyped)
end

class Thin::Connection
end

class Thin::Controllers::Cluster
  def address(); end

  def first_port(); end

  def log_file(); end

  def log_file_for(number); end

  def onebyone(); end

  def only(); end

  def pid_file(); end

  def pid_file_for(number); end

  def pid_for(number); end

  def server_id(number); end

  def size(); end

  def socket(); end

  def socket_for(number); end

  def start_server(number); end

  def stop_server(number); end

  def swiftiply?(); end

  def test_socket(number); end

  def wait(); end

  def wait_until_server_started(number); end
  CLUSTER_OPTIONS = ::T.let(nil, ::T.untyped)
  DEFAULT_WAIT_TIME = ::T.let(nil, ::T.untyped)
end

class Thin::Controllers::Cluster
end

class Thin::Controllers::Controller
  include ::Thin::Logging
  def config(); end

  def initialize(options); end

  def options(); end

  def options=(options); end

  def restart(); end

  def start(); end

  def stop(); end

  def tail(file); end

  def tail_log(log_file); end

  def wait_for_file(state, file); end
end

class Thin::Controllers::Controller
end

class Thin::Controllers::Service
  def config_path(); end

  def install(config_files_path=T.unsafe(nil)); end
  DEFAULT_CONFIG_PATH = ::T.let(nil, ::T.untyped)
  INITD_PATH = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Thin::Controllers::Service
end

class Thin::Headers
  def []=(key, value); end

  def has_key?(key); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
  CR_OR_LF = ::T.let(nil, ::T.untyped)
  HEADER_FORMAT = ::T.let(nil, ::T.untyped)
end

class Thin::Headers
end

class Thin::InvalidRequest
end

class Thin::InvalidRequest
end

class Thin::Request
  def async_callback=(callback); end

  def async_close(); end

  def body(); end

  def close(); end

  def content_length(); end

  def data(); end

  def env(); end

  def finished?(); end

  def head?(); end

  def parse(data); end

  def persistent?(); end

  def remote_address=(address); end

  def threaded=(value); end
  ASYNC_CALLBACK = ::T.let(nil, ::T.untyped)
  ASYNC_CLOSE = ::T.let(nil, ::T.untyped)
  BODY_TMPFILE = ::T.let(nil, ::T.untyped)
  CLOSE_REGEXP = ::T.let(nil, ::T.untyped)
  CONNECTION = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTP_1_0 = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  INITIAL_BODY = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE_REGEXP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RUN_ONCE = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
end

class Thin::Request
end

class Thin::Response
  def body(); end

  def body=(body); end

  def close(); end

  def each(&blk); end

  def head(); end

  def headers(); end

  def headers=(key_value_pairs); end

  def headers_output(); end

  def persistent!(); end

  def persistent?(); end

  def skip_body!(); end

  def status(); end

  def status=(status); end
  BAD_REQUEST = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  PERSISTENT_ERROR = ::T.let(nil, ::T.untyped)
  PERSISTENT_STATUSES = ::T.let(nil, ::T.untyped)
  SERVER = ::T.let(nil, ::T.untyped)
end

class Thin::Response
end

class Thin::Runner
  def arguments(); end

  def arguments=(arguments); end

  def cluster?(); end

  def command(); end

  def command=(command); end

  def initialize(argv); end

  def options(); end

  def options=(options); end

  def parse!(); end

  def parser(); end

  def run!(); end

  def run_command(); end

  def service?(); end
  COMMANDS = ::T.let(nil, ::T.untyped)
  CONFIGLESS_COMMANDS = ::T.let(nil, ::T.untyped)
  LINUX_ONLY_COMMANDS = ::T.let(nil, ::T.untyped)
end

class Thin::Runner
  def self.commands(); end
end

class Thin::Server
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  DEFAULT_MAXIMUM_CONNECTIONS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAXIMUM_PERSISTENT_CONNECTIONS = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Thin::Stats
end

class Thin::Stats::Adapter
  include ::ERB::Util
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end

  def log(env); end

  def serve(env); end
end

class Thin::Stats::Adapter
end

module Thin::Stats
end

module Thin::VERSION
  CODENAME = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  RACK = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Thor
  include ::Honeybadger::Plugins::Thor
  def invoke_command(*args); end

  def invoke_command_without_honeybadger(command, *args); end
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
end

module ThreadSafe
  NULL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

ThreadSafe::Array = Array

class ThreadSafe::AtomicReferenceCacheBackend
  def [](key); end

  def []=(key, value); end

  def clear(); end

  def compute(key); end

  def compute_if_absent(key); end

  def compute_if_present(key); end

  def delete(key); end

  def delete_pair(key, value); end

  def each_pair(); end

  def empty?(); end

  def get_and_set(key, value); end

  def get_or_default(key, else_value=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def key?(key); end

  def merge_pair(key, value); end

  def replace_if_exists(key, new_value); end

  def replace_pair(key, old_value, new_value); end

  def size(); end
  DEFAULT_CAPACITY = ::T.let(nil, ::T.untyped)
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAX_CAPACITY = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  NOW_RESIZING = ::T.let(nil, ::T.untyped)
  TRANSFER_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  include ::ThreadSafe::Util::CheapLockable
  def initialize(hash, key, value, next_node=T.unsafe(nil)); end

  def key(); end

  def key?(key); end

  def locked?(); end

  def matches?(key, hash); end

  def pure_hash(); end

  def try_await_lock(table, i); end

  def try_lock_via_hash(node_hash=T.unsafe(nil)); end

  def unlock_via_hash(locked_hash, node_hash); end
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  SPIN_LOCK_ATTEMPTS = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  extend ::ThreadSafe::Util::Volatile
  def self.locked_hash?(hash); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
  def cas_new_node(i, hash, key, value); end

  def delete_node_at(i, node, predecessor_node); end

  def try_lock_via_hash(i, node, node_hash); end

  def try_to_cas_in_computed(i, hash, key); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
end

class ThreadSafe::AtomicReferenceCacheBackend
  extend ::ThreadSafe::Util::Volatile
end

ThreadSafe::ConcurrentCacheBackend = ThreadSafe::MriCacheBackend

ThreadSafe::Hash = Hash

class ThreadSafe::MriCacheBackend
  WRITE_LOCK = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::SynchronizedCacheBackend
  include ::Mutex_m
  def lock(); end

  def locked?(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class ThreadSafe::SynchronizedCacheBackend
end

module ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Adder
  def add(x); end

  def decrement(); end

  def increment(); end

  def reset(); end

  def sum(); end
end

class ThreadSafe::Util::Adder
end

class ThreadSafe::Util::AtomicReference
  def compare_and_set(old_value, new_value); end

  def get(); end

  def initialize(value=T.unsafe(nil)); end

  def set(new_value); end

  def value(); end

  def value=(new_value); end
end

class ThreadSafe::Util::AtomicReference
end

module ThreadSafe::Util::CheapLockable
  def cas_mutex(old_value, new_value); end

  def compare_and_set_mutex(old_value, new_value); end

  def lazy_set_mutex(value); end

  def mutex(); end

  def mutex=(value); end
end

module ThreadSafe::Util::CheapLockable
  extend ::ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::PowerOfTwoTuple
  def hash_to_index(hash); end

  def next_in_size_table(); end

  def volatile_get_by_hash(hash); end

  def volatile_set_by_hash(hash, value); end
end

class ThreadSafe::Util::PowerOfTwoTuple
end

class ThreadSafe::Util::Striped64
  def busy?(); end

  def initialize(); end

  def retry_update(x, hash_code, was_uncontended); end
  THREAD_LOCAL_KEY = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Striped64::Cell
  def cas(old_value, new_value); end

  def cas_computed(); end

  def padding_(); end
end

class ThreadSafe::Util::Striped64::Cell
end

class ThreadSafe::Util::Striped64
  extend ::ThreadSafe::Util::Volatile
end

module ThreadSafe::Util::Volatile
  def attr_volatile(*attr_names); end
end

module ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::VolatileTuple
  include ::Enumerable
  def cas(i, old_value, new_value); end

  def compare_and_set(i, old_value, new_value); end

  def each(&blk); end

  def initialize(size); end

  def size(); end

  def volatile_get(i); end

  def volatile_set(i, value); end
end

class ThreadSafe::Util::VolatileTuple
end

module ThreadSafe::Util::XorShiftRandom
  def get(); end

  def xorshift(x); end
  MAX_XOR_SHIFTABLE_INT = ::T.let(nil, ::T.untyped)
end

module ThreadSafe::Util::XorShiftRandom
  extend ::ThreadSafe::Util::XorShiftRandom
end

module ThreadSafe::Util
end

class ThrottleCache
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ThrottleDailyByApiUser
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Tilt
  LOCK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tilt::BuilderTemplate
  def precompiled_postamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::BuilderTemplate
end

class Tilt::CSVTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::CSVTemplate
  def self.engine(); end
end

class Tilt::ERBTemplate
  def precompiled(locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  SUPPORTS_KVARGS = ::T.let(nil, ::T.untyped)
end

class Tilt::ERBTemplate
  def self.default_output_variable(); end

  def self.default_output_variable=(name); end
end

class Tilt::EtanniTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::EtanniTemplate
end

class Tilt::HamlTemplate
  def precompiled_template(locals); end
end

class Tilt::HamlTemplate
end

class Tilt::Mapping
  AUTOLOAD_IS_BROKEN = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
  def evaluate(scope, locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  DOCUMENT_HEADER = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
end

class Tilt::PlainTemplate
end

class Tilt::PlainTemplate
end

class Tilt::RDocTemplate
  def allows_script?(); end

  def markup(); end
end

class Tilt::RDocTemplate
end

class Tilt::RedcarpetTemplate
  def allows_script?(); end

  def generate_renderer(); end
end

class Tilt::RedcarpetTemplate
end

class Tilt::SassTemplate
  def allows_script?(); end
end

Tilt::SassTemplate::Sass = Sass

class Tilt::SassTemplate
end

class Tilt::ScssTemplate
end

class Tilt::ScssTemplate
end

class Tilt::SigilTemplate
  def allows_script?(); end
end

class Tilt::SigilTemplate
end

class Tilt::StringTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::StringTemplate
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Time
  def w3cdtf(); end
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Time
  def self.w3cdtf(date); end
end

class Timecop
  VERSION = ::T.let(nil, ::T.untyped)
end

class TopUsageApiUsersService::ApiKeyObjectRequests
  def self.inherited(s); end
end

class TopUsageApiUsersService::ApiKeyRequests
  def self.inherited(s); end
end

class TopUsageApiUsersService
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class TracePoint
  def __enable(_, _1); end

  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module Twitter::Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Twitter::Error
  ERRORS = ::T.let(nil, ::T.untyped)
  FORBIDDEN_MESSAGES = ::T.let(nil, ::T.untyped)
  MEDIA_ERRORS = ::T.let(nil, ::T.untyped)
end

module Twitter::Error::Code
  ALREADY_FAVORITED = ::T.let(nil, ::T.untyped)
  AUTHENTICATION_PROBLEM = ::T.let(nil, ::T.untyped)
  BAD_AUTHENTICATION_DATA = ::T.let(nil, ::T.untyped)
  CANNOT_MUTE = ::T.let(nil, ::T.untyped)
  CANNOT_UNMUTE = ::T.let(nil, ::T.untyped)
  CANNOT_WRITE = ::T.let(nil, ::T.untyped)
  DEPRECATED_CALL = ::T.let(nil, ::T.untyped)
  DUPLICATE_STATUS = ::T.let(nil, ::T.untyped)
  ENDPOINT_RETIRED = ::T.let(nil, ::T.untyped)
  FOLLOW_ALREADY_REQUESTED = ::T.let(nil, ::T.untyped)
  FOLLOW_LIMIT_EXCEEDED = ::T.let(nil, ::T.untyped)
  INTERNAL_ERROR = ::T.let(nil, ::T.untyped)
  INVALID_OR_EXPIRED_TOKEN = ::T.let(nil, ::T.untyped)
  LOGIN_VERIFICATION_NEEDED = ::T.let(nil, ::T.untyped)
  OAUTH_TIMESTAMP_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  OVER_CAPACITY = ::T.let(nil, ::T.untyped)
  OVER_UPDATE_LIMIT = ::T.let(nil, ::T.untyped)
  PROTECTED_STATUS = ::T.let(nil, ::T.untyped)
  RATE_LIMIT_EXCEEDED = ::T.let(nil, ::T.untyped)
  RESOURCE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  SPAM = ::T.let(nil, ::T.untyped)
  SSL_REQUIRED = ::T.let(nil, ::T.untyped)
  SUSPENDED_ACCOUNT = ::T.let(nil, ::T.untyped)
  UNABLE_TO_VERIFY_CREDENTIALS = ::T.let(nil, ::T.untyped)
end

class Twitter::Error
  extend ::Twitter::Utils
end

Twitter::NullObject::Conversions = Naught::Conversions

module Twitter::Profile
  PREDICATE_URI_METHOD_REGEX = ::T.let(nil, ::T.untyped)
  PROFILE_IMAGE_SUFFIX_REGEX = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Lists
  MAX_USERS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::PremiumSearch
  MAX_TWEETS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

class Twitter::REST::Request
  BASE_URL = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Search
  MAX_TWEETS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Timelines
  DEFAULT_TWEETS_PER_REQUEST = ::T.let(nil, ::T.untyped)
  MAX_TWEETS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Tweets
  MAX_TWEETS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Users
  MAX_USERS_PER_REQUEST = ::T.let(nil, ::T.untyped)
end

module Twitter::REST::Utils
  DEFAULT_CURSOR = ::T.let(nil, ::T.untyped)
end

class Twitter::Streaming::Event
  LIST_EVENTS = ::T.let(nil, ::T.untyped)
  TWEET_EVENTS = ::T.let(nil, ::T.untyped)
end

class TwitterFeed
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module TypeCoerce::Configuration
  extend ::T::Private::Methods::SingletonMethodHooks
end

class TypeCoerce::Converter
  PRIMITIVE_TYPES = ::T.let(nil, ::T.untyped)
end

module Typhoeus
  USER_AGENT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Typhoeus::EasyFactory
  CHANGED_OPTIONS = ::T.let(nil, ::T.untyped)
  REMOVED_OPTIONS = ::T.let(nil, ::T.untyped)
  RENAMED_OPTIONS = ::T.let(nil, ::T.untyped)
  SANITIZE_IGNORE = ::T.let(nil, ::T.untyped)
  SANITIZE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Typhoeus::Hydra
  include ::NewRelic::Agent::Instrumentation::Typhoeus::Prepend
  include ::NewRelic::Agent::Instrumentation::Typhoeus
end

class Typhoeus::Response::Header
end

module UNF
  VERSION = ::T.let(nil, ::T.untyped)
end

class UNF::Normalizer
  include ::Singleton
  def normalize(_, _1); end
end

class UNF::Normalizer
  extend ::Singleton::SingletonClassMethods
  def self.instance(); end

  def self.normalize(string, form); end
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def buffer_open(buf, proxy, options); end
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::File
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class URI::HTTP
  def buffer_open(buf, proxy, options); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  def self.get_encoding(label); end
end

class Uglifier
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ES5FallbackPath = ::T.let(nil, ::T.untyped)
  EXTRA_OPTIONS = ::T.let(nil, ::T.untyped)
  HarmonySourcePath = ::T.let(nil, ::T.untyped)
  MANGLE_PROPERTIES_DEFAULTS = ::T.let(nil, ::T.untyped)
  SOURCE_MAP_DEFAULTS = ::T.let(nil, ::T.untyped)
  SourceMapPath = ::T.let(nil, ::T.untyped)
  SourcePath = ::T.let(nil, ::T.untyped)
  SplitFallbackPath = ::T.let(nil, ::T.untyped)
  UglifyJSWrapperPath = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Unicode::DisplayWidth
  DATA_DIRECTORY = ::T.let(nil, ::T.untyped)
  DEPTHS = ::T.let(nil, ::T.untyped)
  INDEX = ::T.let(nil, ::T.untyped)
  INDEX_FILENAME = ::T.let(nil, ::T.untyped)
  NO_STRING_EXT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module UnicodeNormalize
end

module UnicodeNormalize
end

class User
  include ::Devise::Models::Authenticatable
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  include ::Devise::Models::DatabaseAuthenticatable
  include ::Devise::Models::Rememberable
  include ::Devise::Models::Recoverable
  include ::Devise::Models::Registerable
  include ::Devise::Models::Validatable
  include ::Devise::Models::Confirmable
  include ::Devise::Models::Trackable
  def after_add_for_api_keys(); end

  def after_add_for_api_keys=(val); end

  def after_add_for_api_keys?(); end

  def after_remove_for_api_keys(); end

  def after_remove_for_api_keys=(val); end

  def after_remove_for_api_keys?(); end

  def autosave_associated_records_for_api_keys(*args); end

  def before_add_for_api_keys(); end

  def before_add_for_api_keys=(val); end

  def before_add_for_api_keys?(); end

  def before_remove_for_api_keys(); end

  def before_remove_for_api_keys=(val); end

  def before_remove_for_api_keys?(); end

  def current_password(); end

  def devise_modules(); end

  def devise_modules?(); end

  def password(); end

  def password_confirmation(); end

  def password_confirmation=(password_confirmation); end

  def validate_associated_records_for_api_keys(*args); end
end

class User::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

class User::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

class User::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

module User::GeneratedAssociationMethods
  def api_key_ids=(ids); end

  def api_keys_attributes=(attributes); end
end

module User::GeneratedRelationMethods
end

module User::GeneratedRelationMethods
end

class User
  extend ::Devise::Models::Authenticatable::ClassMethods
  extend ::Devise::Models::DatabaseAuthenticatable::ClassMethods
  extend ::Devise::Models::Rememberable::ClassMethods
  extend ::Devise::Models::Recoverable::ClassMethods
  extend ::Devise::Models::Registerable::ClassMethods
  extend ::Devise::Models::Validatable::ClassMethods
  extend ::Devise::Models::Confirmable::ClassMethods
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_api_keys(); end

  def self.after_add_for_api_keys=(val); end

  def self.after_add_for_api_keys?(); end

  def self.after_remove_for_api_keys(); end

  def self.after_remove_for_api_keys=(val); end

  def self.after_remove_for_api_keys?(); end

  def self.before_add_for_api_keys(); end

  def self.before_add_for_api_keys=(val); end

  def self.before_add_for_api_keys?(); end

  def self.before_remove_for_api_keys(); end

  def self.before_remove_for_api_keys=(val); end

  def self.before_remove_for_api_keys?(); end

  def self.devise_modules(); end

  def self.devise_modules=(val); end

  def self.devise_modules?(); end
end

module VCR
  CassetteMutex = ::T.let(nil, ::T.untyped)
  MainThread = ::T.let(nil, ::T.untyped)
end

class VCR::Cassette
  VALID_RECORD_MODES = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Persisters::FileSystem
  def [](file_name); end

  def []=(file_name, content); end

  def absolute_path_to_file(file_name); end

  def storage_location(); end

  def storage_location=(dir); end
end

module VCR::Cassette::Persisters::FileSystem
  extend ::VCR::Cassette::Persisters::FileSystem
end

module VCR::Cassette::Serializers::Compressed
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
end

module VCR::Cassette::Serializers::Compressed
  extend ::VCR::Cassette::Serializers::Compressed
end

module VCR::Cassette::Serializers::JSON
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::JSON
  extend ::VCR::Cassette::Serializers::JSON
  extend ::VCR::Cassette::EncodingErrorHandling
end

module VCR::Cassette::Serializers::Psych
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::EncodingErrorHandling
end

module VCR::Cassette::Serializers::Syck
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::EncodingErrorHandling
end

module VCR::Cassette::Serializers::YAML
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::EncodingErrorHandling
end

class VCR::CucumberTags
  def initialize(main_object); end

  def tag(*tag_names); end

  def tags(*tag_names); end
end

class VCR::CucumberTags::ScenarioNameBuilder
  def cassette_name(); end

  def examples_table(*_); end

  def examples_table_row(row); end

  def feature(feature); end

  def initialize(test_case); end

  def scenario(*_); end

  def scenario_outline(feature); end
end

class VCR::CucumberTags::ScenarioNameBuilder
end

class VCR::CucumberTags
  def self.add_tag(tag); end

  def self.tags(); end
end

class VCR::Errors::UnhandledHTTPRequestError
  ALL_SUGGESTIONS = ::T.let(nil, ::T.untyped)
end

class VCR::HTTPInteraction::HookAware
end

module VCR::InternetConnection
  def available?(); end
  EXAMPLE_HOST = ::T.let(nil, ::T.untyped)
end

module VCR::InternetConnection
  extend ::VCR::InternetConnection
end

class VCR::Middleware::Faraday
  include ::VCR::Deprecations::Middleware::Faraday
  def call(env); end

  def close(); end

  def initialize(app); end
end

class VCR::Middleware::Faraday::RequestHandler
  def app(); end

  def env(); end

  def initialize(app, env); end
end

class VCR::Middleware::Faraday::RequestHandler
end

class VCR::Middleware::Faraday
end

class VCR::Middleware::Rack
  include ::VCR::VariableArgsBlockCaller
  def call(env); end

  def initialize(app, &block); end
end

class VCR::Middleware::Rack
end

module VCR::RSpec::Metadata
  def configure!(); end
end

module VCR::RSpec::Metadata
  extend ::VCR::RSpec::Metadata
end

class VCR::Request::FiberAware
end

class VCR::Request::Typed
end

class VCR::RequestHandler
  include ::VCR::Logger::Mixin
  def handle(); end
end

class VCR::RequestHandler
end

class VCR::RequestIgnorer
  LOCALHOST_ALIASES = ::T.let(nil, ::T.untyped)
end

class VCR::RequestMatcherRegistry
  DEFAULT_MATCHERS = ::T.let(nil, ::T.untyped)
end

class VCR::Response
  HAVE_ZLIB = ::T.let(nil, ::T.untyped)
end

module ValidatesEmailFormatOf
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  DEFAULT_MX_MESSAGE = ::T.let(nil, ::T.untyped)
  ERROR_MESSAGE_I18N_KEY = ::T.let(nil, ::T.untyped)
  ERROR_MX_MESSAGE_I18N_KEY = ::T.let(nil, ::T.untyped)
  LocalPartSpecialChars = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Vector
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def [](i); end

  def []=(i, v); end

  def collect!(&block); end

  def covector(); end

  def elements(); end

  def initialize(array); end

  def map!(&block); end
end

class Vector::ZeroVectorError
end

class Vector::ZeroVectorError
end

class Vector
  extend ::Exception2MessageMapper
  extend ::Matrix::ConversionHelper
  def self.included(mod); end
end

module Virtus
  EXTRA_CONST_ARGS = ::T.let(nil, ::T.untyped)
  Undefined = ::T.let(nil, ::T.untyped)
end

class Virtus::Attribute::DefaultValue::FromClonable
  SINGLETON_CLASSES = ::T.let(nil, ::T.untyped)
end

class Virtus::Attribute::EmbeddedValue
  TYPES = ::T.let(nil, ::T.untyped)
end

class Virtus::Attribute
  extend ::Virtus::TypeLookup
  extend ::Virtus::Options
end

module Virtus::Extensions
  INVALID_WRITER_METHODS = ::T.let(nil, ::T.untyped)
  RESERVED_NAMES = ::T.let(nil, ::T.untyped)
  WRITER_METHOD_REGEXP = ::T.let(nil, ::T.untyped)
end

module Virtus::TypeLookup
  TYPE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Warden::Proxy
  ENV_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  ENV_WARDEN_ERRORS = ::T.let(nil, ::T.untyped)
end

class Warden::SessionSerializer
  def user_deserialize(args); end

  def user_serialize(record); end
end

module Warden::Test::Helpers
  def login_as(user, opts=T.unsafe(nil)); end

  def logout(*scopes); end
end

module Warden::Test::Helpers
  def self.included(_base); end
end

module Warden::Test::Mock
  def warden(); end
end

class Warden::Test::Mock::Session
  def app(); end

  def app=(app); end

  def call(e); end

  def initialize(app, _configs=T.unsafe(nil)); end
end

class Warden::Test::Mock::Session
end

module Warden::Test::Mock
  def self.included(_base); end
end

module Warden::Test::WardenHelpers
  def _on_next_request(); end

  def asset_paths(); end

  def asset_paths=(*vals); end

  def on_next_request(&blk); end

  def test_reset!(); end
end

module Warden::Test::WardenHelpers
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
end

module WebMock
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebMock::BodyPattern
  BODY_FORMATS = ::T.let(nil, ::T.untyped)
end

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetBufferedIO = Net::BufferedIO

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetHTTP = Net::HTTP

class WebMock::HttpLibAdapters::TyphoeusAdapter
  AFTER_REQUEST_CALLBACK = ::T.let(nil, ::T.untyped)
  BEFORE_CALLBACK = ::T.let(nil, ::T.untyped)
end

class WebMock::Util::URI
  ADDRESSABLE_URIS = ::T.let(nil, ::T.untyped)
  NORMALIZED_URIS = ::T.let(nil, ::T.untyped)
end

module WebMock::Util::URI::CharacterClasses
  USERINFO = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
  PORTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Extensions
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

module Webdrivers
  DEFAULT_CACHE_TIME = ::T.let(nil, ::T.untyped)
  DEFAULT_INSTALL_DIR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WillPaginate::PageNumber
  BIGINT = ::T.let(nil, ::T.untyped)
end

module XPath::DSL
  AXES = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTERS = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTERS = ::T.let(nil, ::T.untyped)
end

module Zip
  CDIR_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  CENTRAL_DIRECTORY_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHODS = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_AES = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_BZIP2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE_64 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_CMPSC = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_LZ77 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_TERSE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IMPLODE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_JPEG = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_LZMA = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PKWARE_DCLI = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PPMD = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_1 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_3 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_4 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_SHRINK = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_STORE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_WAVPACK = ::T.let(nil, ::T.untyped)
  FILE_TYPE_DIR = ::T.let(nil, ::T.untyped)
  FILE_TYPE_FILE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_SYMLINK = ::T.let(nil, ::T.untyped)
  FSTYPES = ::T.let(nil, ::T.untyped)
  FSTYPE_ACORN = ::T.let(nil, ::T.untyped)
  FSTYPE_AMIGA = ::T.let(nil, ::T.untyped)
  FSTYPE_ATARI = ::T.let(nil, ::T.untyped)
  FSTYPE_ATHEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_BEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_CPM = ::T.let(nil, ::T.untyped)
  FSTYPE_FAT = ::T.let(nil, ::T.untyped)
  FSTYPE_HPFS = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC_OSX = ::T.let(nil, ::T.untyped)
  FSTYPE_MVS = ::T.let(nil, ::T.untyped)
  FSTYPE_NTFS = ::T.let(nil, ::T.untyped)
  FSTYPE_QDOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TANDEM = ::T.let(nil, ::T.untyped)
  FSTYPE_THEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TOPS20 = ::T.let(nil, ::T.untyped)
  FSTYPE_UNIX = ::T.let(nil, ::T.untyped)
  FSTYPE_VFAT = ::T.let(nil, ::T.untyped)
  FSTYPE_VMS = ::T.let(nil, ::T.untyped)
  FSTYPE_VM_CMS = ::T.let(nil, ::T.untyped)
  FSTYPE_Z_SYSTEM = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = ::T.let(nil, ::T.untyped)
  RUNNING_ON_WINDOWS = ::T.let(nil, ::T.untyped)
  VERSION_MADE_BY = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT_ZIP64 = ::T.let(nil, ::T.untyped)
end

class Zip::CentralDirectory
  END_OF_CDS = ::T.let(nil, ::T.untyped)
  MAX_END_OF_CDS_SIZE = ::T.let(nil, ::T.untyped)
  STATIC_EOCD_SIZE = ::T.let(nil, ::T.untyped)
  ZIP64_END_OF_CDS = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_LOCATOR = ::T.let(nil, ::T.untyped)
end

class Zip::Decompressor
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::DecryptedIo
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::Entry
  DEFLATED = ::T.let(nil, ::T.untyped)
  EFS = ::T.let(nil, ::T.untyped)
  STORED = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField
  ID_MAP = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::IUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::NTFS
  HEADER_ID = ::T.let(nil, ::T.untyped)
  SEC_TO_UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  WINDOWS_TICK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::OldUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::UniversalTime
  ATIME_MASK = ::T.let(nil, ::T.untyped)
  CTIME_MASK = ::T.let(nil, ::T.untyped)
  HEADER_ID = ::T.let(nil, ::T.untyped)
  MTIME_MASK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64Placeholder
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::File
  CREATE = ::T.let(nil, ::T.untyped)
  DATA_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  IO_METHODS = ::T.let(nil, ::T.untyped)
  MAX_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  MIN_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  SPLIT_SIGNATURE = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras::AbstractInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Zip::InputStream
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

module Zip::NullInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Zip::StreamableStream
end

Zip::ZipCompressionMethodError = Zip::CompressionMethodError

Zip::ZipDestinationFileExistsError = Zip::DestinationFileExistsError

Zip::ZipEntryExistsError = Zip::EntryExistsError

Zip::ZipEntryNameError = Zip::EntryNameError

Zip::ZipError = Zip::Error

Zip::ZipInternalError = Zip::InternalError

class Zlib::Deflate
  def initialize(*_); end
end

class Zlib::GzipReader
  def initialize(*_); end
end

class Zlib::GzipWriter
  def initialize(*_); end
end

class Zlib::Inflate
  def initialize(*_); end
end
