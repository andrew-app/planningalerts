# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `compass-core` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Compass
  extend(::Compass::HasDeprecatedConstantsFromCore)
  extend(::Compass::Version)
  extend(::QuickCache)
  extend(::Compass::Configuration::Helpers)


  private

  def base_directory; end
  def lib_directory; end
  def shared_extension_paths; end

  class << self
    def add_configuration(data, filename = T.unsafe(nil)); end
    def base_directory; end
    def configuration; end
    def const_missing(const_name); end
    def default_configuration; end
    def deprojectize(path, project_path = T.unsafe(nil)); end
    def discover_extensions!; end
    def discover_gem_extensions!; end
    def lib_directory; end
    def projectize(path, project_path = T.unsafe(nil)); end
    def reset_configuration!; end
    def shared_extension_paths; end
  end
end

module Compass::BrowserSupport
  extend(::Compass::BrowserSupport)

  def add_support(function, *aspects); end
  def has_aspect?(function); end
  def remove_support(function, *aspects); end
  def supports?(function, aspect); end
end

Compass::BrowserSupport::ASPECTS = T.let(T.unsafe(nil), Array)

Compass::BrowserSupport::SIMPLE_FUNCTIONS = T.let(T.unsafe(nil), Hash)

module Compass::Configuration
  class << self
    def add_configuration_property(name, comment = T.unsafe(nil), &default); end
    def attributes_for_directory(dir_name, http_dir_name = T.unsafe(nil)); end
    def remove_configuration_property(name); end
  end
end

Compass::Configuration::ARRAY_ATTRIBUTES = T.let(T.unsafe(nil), Array)

Compass::Configuration::ARRAY_ATTRIBUTE_OPTIONS = T.let(T.unsafe(nil), Hash)

Compass::Configuration::ATTRIBUTES = T.let(T.unsafe(nil), Array)

module Compass::Configuration::Adapters
  def absolute_path?(path); end
  def resolve_additional_import_paths; end
  def sass_3_4?; end
  def sass_load_paths; end
  def to_compiler_arguments(additional_options = T.unsafe(nil)); end
  def to_sass_engine_options; end
  def to_sass_plugin_options; end
end

class Compass::Configuration::Data
  include(::Sass::Callbacks::InstanceMethods)
  include(::Compass::Configuration::Inheritance)
  include(::Compass::Configuration::Inheritance::InstanceMethods)
  include(::Compass::Configuration::Adapters)
  include(::Compass::Configuration::Comments)
  include(::Compass::Configuration::Serialization)
  extend(::Sass::Callbacks)
  extend(::Compass::Configuration::Inheritance::ClassMethods)
  extend(::Compass::Configuration::Paths)

  def initialize(name, attr_hash = T.unsafe(nil)); end

  def add_import_path(*paths); end
  def add_to_additional_import_paths(v); end
  def add_to_framework_path(v); end
  def add_to_loaded_frameworks(v); end
  def add_to_required_libraries(v); end
  def add_to_sprite_load_path(v); end
  def additional_import_paths; end
  def additional_import_paths=(value); end
  def additional_import_paths_set?; end
  def additional_import_paths_without_default; end
  def asset_cache_buster(simple = T.unsafe(nil), &block); end
  def asset_cache_buster=(value); end
  def asset_cache_buster_set?; end
  def asset_cache_buster_without_default; end
  def asset_host(&block); end
  def asset_host=(value); end
  def asset_host_set?; end
  def asset_host_without_default; end
  def cache; end
  def cache=(value); end
  def cache_dir; end
  def cache_dir=(value); end
  def cache_dir_set?; end
  def cache_dir_with_trailing_separator; end
  def cache_dir_without_default; end
  def cache_path; end
  def cache_path=(value); end
  def cache_path_set?; end
  def cache_path_with_trailing_separator; end
  def cache_path_without_default; end
  def cache_set?; end
  def cache_without_default; end
  def chunky_png_options; end
  def chunky_png_options=(value); end
  def chunky_png_options_set?; end
  def chunky_png_options_without_default; end
  def color_output; end
  def color_output=(value); end
  def color_output_set?; end
  def color_output_without_default; end
  def css_dir; end
  def css_dir=(value); end
  def css_dir_set?; end
  def css_dir_with_trailing_separator; end
  def css_dir_without_default; end
  def css_path; end
  def css_path=(value); end
  def css_path_set?; end
  def css_path_with_trailing_separator; end
  def css_path_without_default; end
  def disable_warnings; end
  def disable_warnings=(value); end
  def disable_warnings_set?; end
  def disable_warnings_without_default; end
  def discover(frameworks_dir); end
  def environment; end
  def environment=(value); end
  def environment_set?; end
  def environment_without_default; end
  def extensions_dir; end
  def extensions_dir=(value); end
  def extensions_dir_set?; end
  def extensions_dir_with_trailing_separator; end
  def extensions_dir_without_default; end
  def extensions_path; end
  def extensions_path=(value); end
  def extensions_path_set?; end
  def extensions_path_with_trailing_separator; end
  def extensions_path_without_default; end
  def fonts_dir; end
  def fonts_dir=(value); end
  def fonts_dir_set?; end
  def fonts_dir_with_trailing_separator; end
  def fonts_dir_without_default; end
  def fonts_path; end
  def fonts_path=(value); end
  def fonts_path_set?; end
  def fonts_path_with_trailing_separator; end
  def fonts_path_without_default; end
  def framework_path; end
  def framework_path=(value); end
  def framework_path_set?; end
  def framework_path_without_default; end
  def generated_images_dir; end
  def generated_images_dir=(value); end
  def generated_images_dir_set?; end
  def generated_images_dir_with_trailing_separator; end
  def generated_images_dir_without_default; end
  def generated_images_path; end
  def generated_images_path=(value); end
  def generated_images_path_set?; end
  def generated_images_path_with_trailing_separator; end
  def generated_images_path_without_default; end
  def http_fonts_dir; end
  def http_fonts_dir=(value); end
  def http_fonts_dir_set?; end
  def http_fonts_dir_with_trailing_separator; end
  def http_fonts_dir_without_default; end
  def http_fonts_path; end
  def http_fonts_path=(value); end
  def http_fonts_path_set?; end
  def http_fonts_path_with_trailing_separator; end
  def http_fonts_path_without_default; end
  def http_generated_images_dir; end
  def http_generated_images_dir=(value); end
  def http_generated_images_dir_set?; end
  def http_generated_images_dir_with_trailing_separator; end
  def http_generated_images_dir_without_default; end
  def http_generated_images_path; end
  def http_generated_images_path=(value); end
  def http_generated_images_path_set?; end
  def http_generated_images_path_with_trailing_separator; end
  def http_generated_images_path_without_default; end
  def http_images_dir; end
  def http_images_dir=(value); end
  def http_images_dir_set?; end
  def http_images_dir_with_trailing_separator; end
  def http_images_dir_without_default; end
  def http_images_path; end
  def http_images_path=(value); end
  def http_images_path_set?; end
  def http_images_path_with_trailing_separator; end
  def http_images_path_without_default; end
  def http_javascripts_dir; end
  def http_javascripts_dir=(value); end
  def http_javascripts_dir_set?; end
  def http_javascripts_dir_with_trailing_separator; end
  def http_javascripts_dir_without_default; end
  def http_javascripts_path; end
  def http_javascripts_path=(value); end
  def http_javascripts_path_set?; end
  def http_javascripts_path_with_trailing_separator; end
  def http_javascripts_path_without_default; end
  def http_path; end
  def http_path=(value); end
  def http_path_set?; end
  def http_path_with_trailing_separator; end
  def http_path_without_default; end
  def http_stylesheets_dir; end
  def http_stylesheets_dir=(value); end
  def http_stylesheets_dir_set?; end
  def http_stylesheets_dir_with_trailing_separator; end
  def http_stylesheets_dir_without_default; end
  def http_stylesheets_path; end
  def http_stylesheets_path=(value); end
  def http_stylesheets_path_set?; end
  def http_stylesheets_path_with_trailing_separator; end
  def http_stylesheets_path_without_default; end
  def images_dir; end
  def images_dir=(value); end
  def images_dir_set?; end
  def images_dir_with_trailing_separator; end
  def images_dir_without_default; end
  def images_path; end
  def images_path=(value); end
  def images_path_set?; end
  def images_path_with_trailing_separator; end
  def images_path_without_default; end
  def inherited_data; end
  def inherited_data=(_arg0); end
  def javascripts_dir; end
  def javascripts_dir=(value); end
  def javascripts_dir_set?; end
  def javascripts_dir_with_trailing_separator; end
  def javascripts_dir_without_default; end
  def javascripts_path; end
  def javascripts_path=(value); end
  def javascripts_path_set?; end
  def javascripts_path_with_trailing_separator; end
  def javascripts_path_without_default; end
  def line_comments; end
  def line_comments=(value); end
  def line_comments_set?; end
  def line_comments_without_default; end
  def load(framework_dir); end
  def loaded_frameworks; end
  def loaded_frameworks=(value); end
  def loaded_frameworks_set?; end
  def loaded_frameworks_without_default; end
  def name; end
  def on_sourcemap_removed(&block); end
  def on_sourcemap_saved(&block); end
  def on_sprite_generated(&block); end
  def on_sprite_removed(&block); end
  def on_sprite_saved(&block); end
  def on_stylesheet_error(&block); end
  def on_stylesheet_removed(&block); end
  def on_stylesheet_saved(&block); end
  def output_style; end
  def output_style=(value); end
  def output_style_set?; end
  def output_style_without_default; end
  def preferred_syntax; end
  def preferred_syntax=(value); end
  def preferred_syntax_set?; end
  def preferred_syntax_without_default; end
  def project_path; end
  def project_path=(value); end
  def project_path_set?; end
  def project_path_with_trailing_separator; end
  def project_path_without_default; end
  def project_type; end
  def project_type=(value); end
  def project_type_set?; end
  def project_type_without_default; end
  def raw_additional_import_paths; end
  def raw_asset_cache_buster; end
  def raw_asset_host; end
  def raw_cache; end
  def raw_cache_dir; end
  def raw_cache_path; end
  def raw_chunky_png_options; end
  def raw_color_output; end
  def raw_css_dir; end
  def raw_css_path; end
  def raw_disable_warnings; end
  def raw_environment; end
  def raw_extensions_dir; end
  def raw_extensions_path; end
  def raw_fonts_dir; end
  def raw_fonts_path; end
  def raw_framework_path; end
  def raw_generated_images_dir; end
  def raw_generated_images_path; end
  def raw_http_fonts_dir; end
  def raw_http_fonts_path; end
  def raw_http_generated_images_dir; end
  def raw_http_generated_images_path; end
  def raw_http_images_dir; end
  def raw_http_images_path; end
  def raw_http_javascripts_dir; end
  def raw_http_javascripts_path; end
  def raw_http_path; end
  def raw_http_stylesheets_dir; end
  def raw_http_stylesheets_path; end
  def raw_images_dir; end
  def raw_images_path; end
  def raw_javascripts_dir; end
  def raw_javascripts_path; end
  def raw_line_comments; end
  def raw_loaded_frameworks; end
  def raw_output_style; end
  def raw_preferred_syntax; end
  def raw_project_path; end
  def raw_project_type; end
  def raw_relative_assets; end
  def raw_required_libraries; end
  def raw_sass_dir; end
  def raw_sass_options; end
  def raw_sass_path; end
  def raw_sourcemap; end
  def raw_sprite_engine; end
  def raw_sprite_load_path; end
  def read_inherited_additional_import_paths_array; end
  def read_inherited_framework_path_array; end
  def read_inherited_loaded_frameworks_array; end
  def read_inherited_required_libraries_array; end
  def read_inherited_sprite_load_path_array; end
  def relative_assets; end
  def relative_assets=(value); end
  def relative_assets?; end
  def relative_assets_set?; end
  def relative_assets_without_default; end
  def remove_from_additional_import_paths(v); end
  def remove_from_framework_path(v); end
  def remove_from_loaded_frameworks(v); end
  def remove_from_required_libraries(v); end
  def remove_from_sprite_load_path(v); end
  def require(lib); end
  def required_libraries; end
  def required_libraries=(value); end
  def required_libraries_set?; end
  def required_libraries_without_default; end
  def run_sourcemap_removed(*args, &block); end
  def run_sourcemap_saved(*args, &block); end
  def run_sprite_generated(*args, &block); end
  def run_sprite_removed(*args, &block); end
  def run_sprite_saved(*args, &block); end
  def run_stylesheet_error(*args, &block); end
  def run_stylesheet_removed(*args, &block); end
  def run_stylesheet_saved(*args, &block); end
  def sass_dir; end
  def sass_dir=(value); end
  def sass_dir_set?; end
  def sass_dir_with_trailing_separator; end
  def sass_dir_without_default; end
  def sass_options; end
  def sass_options=(value); end
  def sass_options_set?; end
  def sass_options_without_default; end
  def sass_path; end
  def sass_path=(value); end
  def sass_path_set?; end
  def sass_path_with_trailing_separator; end
  def sass_path_without_default; end
  def set_all(attr_hash); end
  def set_attributes; end
  def set_attributes=(_arg0); end
  def sourcemap; end
  def sourcemap=(value); end
  def sourcemap_set?; end
  def sourcemap_without_default; end
  def sprite_engine; end
  def sprite_engine=(value); end
  def sprite_engine_set?; end
  def sprite_engine_without_default; end
  def sprite_load_path; end
  def sprite_load_path=(value); end
  def sprite_load_path_set?; end
  def sprite_load_path_without_default; end
  def top_level; end
  def top_level=(_arg0); end
  def unset_additional_import_paths!; end
  def unset_asset_cache_buster!; end
  def unset_asset_host!; end
  def unset_cache!; end
  def unset_cache_dir!; end
  def unset_cache_path!; end
  def unset_chunky_png_options!; end
  def unset_color_output!; end
  def unset_css_dir!; end
  def unset_css_path!; end
  def unset_disable_warnings!; end
  def unset_environment!; end
  def unset_extensions_dir!; end
  def unset_extensions_path!; end
  def unset_fonts_dir!; end
  def unset_fonts_path!; end
  def unset_framework_path!; end
  def unset_generated_images_dir!; end
  def unset_generated_images_path!; end
  def unset_http_fonts_dir!; end
  def unset_http_fonts_path!; end
  def unset_http_generated_images_dir!; end
  def unset_http_generated_images_path!; end
  def unset_http_images_dir!; end
  def unset_http_images_path!; end
  def unset_http_javascripts_dir!; end
  def unset_http_javascripts_path!; end
  def unset_http_path!; end
  def unset_http_stylesheets_dir!; end
  def unset_http_stylesheets_path!; end
  def unset_images_dir!; end
  def unset_images_path!; end
  def unset_javascripts_dir!; end
  def unset_javascripts_path!; end
  def unset_line_comments!; end
  def unset_loaded_frameworks!; end
  def unset_output_style!; end
  def unset_preferred_syntax!; end
  def unset_project_path!; end
  def unset_project_type!; end
  def unset_relative_assets!; end
  def unset_required_libraries!; end
  def unset_sass_dir!; end
  def unset_sass_options!; end
  def unset_sass_path!; end
  def unset_sourcemap!; end
  def unset_sprite_engine!; end
  def unset_sprite_load_path!; end
  def watch(glob, &block); end
  def watches; end

  private

  def _chained_run_sourcemap_removed(*args); end
  def _chained_run_sourcemap_saved(*args); end
  def _chained_run_sprite_generated(*args); end
  def _chained_run_sprite_removed(*args); end
  def _chained_run_sprite_saved(*args); end
  def _chained_run_stylesheet_error(*args); end
  def _chained_run_stylesheet_removed(*args); end
  def _chained_run_stylesheet_saved(*args); end
end

module Compass::Configuration::Defaults
  def default_cache; end
  def default_cache_dir; end
  def default_cache_path; end
  def default_chunky_png_options; end
  def default_color_output; end
  def default_css_dir; end
  def default_css_path; end
  def default_environment; end
  def default_extensions_dir; end
  def default_extensions_path; end
  def default_fonts_dir; end
  def default_fonts_path; end
  def default_generated_images_dir; end
  def default_generated_images_path; end
  def default_http_fonts_dir; end
  def default_http_fonts_path; end
  def default_http_generated_images_dir; end
  def default_http_generated_images_path; end
  def default_http_images_dir; end
  def default_http_images_path; end
  def default_http_javascripts_dir; end
  def default_http_javascripts_path; end
  def default_http_path; end
  def default_http_stylesheets_dir; end
  def default_http_stylesheets_path; end
  def default_images_dir; end
  def default_images_path; end
  def default_javascripts_path; end
  def default_line_comments; end
  def default_output_style; end
  def default_preferred_syntax; end
  def default_project_path; end
  def default_project_type; end
  def default_sass_dir; end
  def default_sass_path; end
  def default_sprite_engine; end
  def default_sprite_load_path; end
  def http_join(*segments); end
  def http_pathify(path); end
  def http_root_relative(path); end
end

module Compass::Configuration::Inheritance
  include(::Compass::Configuration::Inheritance::InstanceMethods)

  mixes_in_class_methods(::Compass::Configuration::Inheritance::ClassMethods)

  class << self
    def included(base); end
  end
end

module Compass::Configuration::Inheritance::ClassMethods
  def chained_method(method); end
  def inherited_accessor(*attributes); end
  def inherited_array(*attributes); end
  def inherited_reader(*attributes); end
  def inherited_writer(*attributes); end
end

class Compass::Configuration::Inheritance::ClassMethods::ArrayProxy
  def initialize(data, attr); end

  def <<(v); end
  def >>(v); end
  def method_missing(m, *args, &block); end
  def serialize_to_config(prop); end
  def to_a; end
  def to_ary; end
end

module Compass::Configuration::Inheritance::InstanceMethods
  def any_attributes_set?; end
  def chain; end
  def debug; end
  def default_for(attribute); end
  def inherit_from!(data); end
  def method_missing(meth, *args, &block); end
  def on_top!; end
  def raw(attribute); end
  def read(attribute); end
  def read_without_default(attribute); end
  def reset_inheritance!; end
  def respond_to?(meth); end
  def set?(attribute); end
  def set_top_level(new_top); end
  def unset!(attribute); end
  def with_defaults(data); end
end

module Compass::Configuration::Paths
  def strip_trailing_separator(*attributes); end
end

Compass::Configuration::Paths::TRAILING_SEPARATOR = T.let(T.unsafe(nil), Regexp)

Compass::Configuration::RUNTIME_READONLY_ATTRIBUTES = T.let(T.unsafe(nil), Array)

class Compass::Configuration::Watch
  def initialize(glob, &block); end

  def callback; end
  def full_glob; end
  def glob; end
  def match?(changed_path); end
  def run_callback(base, relative, action); end
  def run_once_per_changeset?; end
end

module Compass::Core

  private

  def base_directory(*subdirs); end
  def lib_directory(*subdirs); end

  class << self
    def base_directory(*subdirs); end
    def lib_directory(*subdirs); end
    def module_deprecation_warning_issued; end
    def module_deprecation_warning_issued=(_arg0); end
    def scope(file); end
  end
end

class Compass::Core::CanIUse
  include(::Singleton)
  extend(::Singleton::SingletonClassMethods)

  def initialize; end

  def all_prefixes(browser); end
  def assert_valid_browser(browser); end
  def assert_valid_capability(capability); end
  def assert_valid_prefix(prefix); end
  def assert_valid_version(browser, *versions); end
  def browser_data(browser); end
  def browser_ranges(capability, prefix = T.unsafe(nil), include_unprefixed_versions = T.unsafe(nil)); end
  def browser_support(browser, version, capability); end
  def browsers; end
  def browsers_with_prefix(prefix); end
  def caniuse_version(browser, version); end
  def capabilities; end
  def capability_data(capability); end
  def capability_matches(support, capability_options_list); end
  def find_first_prefixed_version(browser, versions, capability, prefix); end
  def inspect; end
  def next_version(browser, version); end
  def omitted_usage(browser, min_version, max_version = T.unsafe(nil)); end
  def prefix(browser, version = T.unsafe(nil)); end
  def prefixed_usage(prefix, capability, capability_options_list); end
  def prefixes(browsers = T.unsafe(nil)); end
  def previous_version(browser, version); end
  def requires_prefix(browser, min_version, capability, capability_options_list); end
  def usage(browser, version); end
  def versions(browser, min_usage = T.unsafe(nil)); end

  class << self
    def instance; end
  end
end

Compass::Core::CanIUse::ALTERNATE_VERSIONS = T.let(T.unsafe(nil), Hash)

Compass::Core::CanIUse::CAN_I_USE_NAMES = T.let(T.unsafe(nil), Hash)

Compass::Core::CanIUse::CAPABILITY_MATCHERS = T.let(T.unsafe(nil), Hash)

Compass::Core::CanIUse::DATA_FEATURE_FILES = T.let(T.unsafe(nil), Array)

Compass::Core::CanIUse::DATA_FILE_NAME = T.let(T.unsafe(nil), String)

Compass::Core::CanIUse::PUBLIC_BROWSER_NAMES = T.let(T.unsafe(nil), Hash)

Compass::Core::CanIUse::SPEC_VERSION_MATCHERS = T.let(T.unsafe(nil), Hash)

module Compass::Core::SassExtensions
end

module Compass::Core::SassExtensions::Functions
end

module Compass::Core::SassExtensions::Functions::Colors
  def adjust_lightness(color, amount); end
  def adjust_saturation(color, amount); end
  def ie_hex_str(color); end
  def scale_lightness(color, amount); end
  def scale_saturation(color, amount); end
  def shade(color, percentage); end
  def tint(color, percentage); end

  private

  def scale_color_value(value, amount); end
end

module Compass::Core::SassExtensions::Functions::Configuration
  extend(::Compass::Core::SassExtensions::Functions::SassDeclarationHelper)

  def absolute_path(relative_path); end
  def add_configuration(options); end
  def add_sass_configuration(project_path); end
  def join_file_segments(*segments); end
  def reset_configuration; end
  def split_filename(path); end
  def using_compass_compiler; end

  private

  def common_parent_directory(directory1, directory2); end
  def relative_path_from(directory1, directory2); end
  def runtime_writable_attributes; end
  def update_sass_options!; end
end

Compass::Core::SassExtensions::Functions::Configuration::OPTION_TRANSFORMER = T.let(T.unsafe(nil), Hash)

module Compass::Core::SassExtensions::Functions::Constants
  def is_position(position); end
  def is_position_list(position_list); end
  def is_url(string); end
  def opposite_position(position); end
end

Compass::Core::SassExtensions::Functions::Constants::POSITIONS = T.let(T.unsafe(nil), Regexp)

module Compass::Core::SassExtensions::Functions::CrossBrowserSupport
  extend(::Compass::Core::SassExtensions::Functions::SassDeclarationHelper)

  def _css2(*args); end
  def _moz(*args); end
  def _ms(*args); end
  def _o(*args); end
  def _owg(*args); end
  def _svg(*args); end
  def _webkit(*args); end
  def browser_capabilities; end
  def browser_prefix(browser, version = T.unsafe(nil)); end
  def browser_prefixes(browsers); end
  def browser_ranges(capability, prefix = T.unsafe(nil), include_unprefixed_versions = T.unsafe(nil)); end
  def browser_requires_prefix(browser, version, capability, capability_options); end
  def browser_versions(browser); end
  def browsers(prefix = T.unsafe(nil)); end
  def compare_browser_versions(browser, version1, version2); end
  def css2_fallback(value, css2_value); end
  def next_version(browser, version); end
  def omitted_usage(browser, min_version, max_version = T.unsafe(nil)); end
  def prefix(prefix, *objects); end
  def prefix_usage(prefix, capability, capability_options); end
  def prefixed(prefix, *args); end
  def previous_version(browser, version); end

  private

  def unbox_capability_options(capability_options); end
  def unbox_capability_options_list(capability_options_list); end
end

Compass::Core::SassExtensions::Functions::CrossBrowserSupport::CAPABILITY_OPTION_KEYS = T.let(T.unsafe(nil), Hash)

Compass::Core::SassExtensions::Functions::CrossBrowserSupport::CAPABILITY_OPTION_UNBOXER = T.let(T.unsafe(nil), Hash)

class Compass::Core::SassExtensions::Functions::CrossBrowserSupport::CSS2FallbackValue < ::Sass::Script::Value::Base
  def initialize(value, css2_value); end

  def children; end
  def css2_value; end
  def css2_value=(_arg0); end
  def has_aspect?; end
  def inspect; end
  def supports?(aspect); end
  def to_css2(options = T.unsafe(nil)); end
  def to_s(options = T.unsafe(nil)); end
  def value; end
  def value=(_arg0); end
end

module Compass::Core::SassExtensions::Functions::Display
  def elements_of_type(display); end
end

Compass::Core::SassExtensions::Functions::Display::DEFAULT_DISPLAY = T.let(T.unsafe(nil), Hash)

module Compass::Core::SassExtensions::Functions::Enumerate
  def enumerate(prefix, from, through, separator = T.unsafe(nil)); end
end

module Compass::Core::SassExtensions::Functions::Env
  extend(::Compass::Core::SassExtensions::Functions::SassDeclarationHelper)
  extend(::Sass::Script::Value::Helpers)

  def at_stylesheet_root; end
  def compass_env; end
  def compass_extensions; end
  def current_date(format = T.unsafe(nil)); end
  def current_output_file(absolute = T.unsafe(nil)); end
  def current_source_file(absolute = T.unsafe(nil)); end
  def current_time(format = T.unsafe(nil)); end
end

Compass::Core::SassExtensions::Functions::Env::DEFAULT_DATE = T.let(T.unsafe(nil), Sass::Script::Value::String)

Compass::Core::SassExtensions::Functions::Env::DEFAULT_TIME = T.let(T.unsafe(nil), Sass::Script::Value::String)

Compass::Core::SassExtensions::Functions::Env::NOT_ABSOLUTE = T.let(T.unsafe(nil), Sass::Script::Value::Bool)

module Compass::Core::SassExtensions::Functions::Files
  extend(::Compass::Core::SassExtensions::Functions::SassDeclarationHelper)
  extend(::Sass::Script::Value::Helpers)

  def md5sum(file, format = T.unsafe(nil)); end
end

module Compass::Core::SassExtensions::Functions::FontFiles
  def font_files(*args); end
  def font_formats(*args); end

  protected

  def with_each_font_file(*args); end
end

Compass::Core::SassExtensions::Functions::FontFiles::FONT_TYPES = T.let(T.unsafe(nil), Hash)

module Compass::Core::SassExtensions::Functions::GradientSupport
end

module Compass::Core::SassExtensions::Functions::GradientSupport::Assertions
  def assert_type(value, type, name = T.unsafe(nil)); end
end

class Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter
  include(::Math)

  def initialize(angle); end

  def handle_keywords(angle); end
  def in_radians(angle); end
  def result(v); end
  def round6(v); end
  def scale(p); end
  def sin2(a); end
  def x; end
  def x1; end
  def x2; end
  def y; end
  def y1; end
  def y2; end
end

Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter::BOTTOM = T.let(T.unsafe(nil), Integer)

Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter::DIR_KEYWORDS_TO_ANGLE = T.let(T.unsafe(nil), Hash)

Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter::LEFT = T.let(T.unsafe(nil), Integer)

Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter::RIGHT = T.let(T.unsafe(nil), Integer)

Compass::Core::SassExtensions::Functions::GradientSupport::CSS3AngleToSVGConverter::TOP = T.let(T.unsafe(nil), Integer)

class Compass::Core::SassExtensions::Functions::GradientSupport::ColorStop < ::Sass::Script::Value::Base
  include(::Sass::Script::Value::Helpers)

  def initialize(color, stop = T.unsafe(nil)); end

  def assert_legal_color!(color); end
  def assert_legal_color_stop!(stop); end
  def children; end
  def color; end
  def color=(_arg0); end
  def inspect; end
  def stop; end
  def stop=(_arg0); end
  def to_s(options = T.unsafe(nil)); end
  def to_sass(options = T.unsafe(nil)); end

  class << self
    def color_to_s(c); end
    def color_to_svg_alpha(c); end
    def color_to_svg_s(c); end
  end
end

module Compass::Core::SassExtensions::Functions::GradientSupport::Functions
  include(::Sass::Script::Value::Helpers)

  def _build_linear_gradient(position_or_angle, *color_stops); end
  def _linear_gradient(position_or_angle, *color_stops); end
  def _linear_gradient_legacy(position_or_angle, *color_stops); end
  def color_stops(*args); end
  def color_stops_in_percentages(color_list); end
  def convert_angle_from_offical(deg); end
  def grad_color_stops(color_list); end
  def grad_end_position(color_list, radial = T.unsafe(nil)); end
  def grad_point(position); end
  def grad_position(color_list, index, default, radial = T.unsafe(nil)); end
  def linear_end_position(position_or_angle, start_point, end_target); end
  def linear_svg_gradient(color_stops, start); end
  def radial_gradient(position_or_angle, shape_and_size, *color_stops); end
  def radial_svg_gradient(color_stops, center); end
  def reverse_side_or_corner(position); end

  private

  def _center_position; end
  def color_stop?(arg); end
  def color_stops_svg(color_stops); end
  def linear_svg(color_stops, x1, y1, x2, y2); end
  def list_of_color_stops?(arg); end
  def normalize_stops(color_list); end
  def opts(v); end
  def parse_color_stop(arg); end
  def radial_svg(color_stops, cx, cy, r); end
  def svg(gradient); end
end

Compass::Core::SassExtensions::Functions::GradientSupport::GRADIENT_ASPECTS = T.let(T.unsafe(nil), Array)

module Compass::Core::SassExtensions::Functions::GradientSupport::Gradient
  include(::Sass::Script::Value::Helpers)

  mixes_in_class_methods(::Compass::Core::SassExtensions::Functions::GradientSupport::Gradient::ClassMethods)

  def angle?(value); end
  def has_aspect?; end
  def inspect; end
  def is_position(pos); end
  def supports?(aspect); end

  class << self
    def included(base); end
  end
end

module Compass::Core::SassExtensions::Functions::GradientSupport::Gradient::ClassMethods
  def standardized_prefix(prefix); end
end

class Compass::Core::SassExtensions::Functions::GradientSupport::LinearGradient < ::Sass::Script::Value::Base
  include(::Sass::Script::Value::Helpers)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Gradient)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Assertions)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Functions)
  include(::Compass::Core::SassExtensions::Functions::Constants)
  include(::Compass::Core::SassExtensions::Functions::InlineImage)
  extend(::Compass::Core::SassExtensions::Functions::GradientSupport::Gradient::ClassMethods)

  def initialize(position_or_angle, color_stops, legacy = T.unsafe(nil)); end

  def children; end
  def color_stops; end
  def color_stops=(_arg0); end
  def convert_to_or_from_legacy(position_or_angle, options = T.unsafe(nil)); end
  def legacy; end
  def legacy=(_arg0); end
  def position_or_angle; end
  def position_or_angle=(_arg0); end
  def supports?(aspect); end
  def to_css2(options = T.unsafe(nil)); end
  def to_moz(options = T.unsafe(nil)); end
  def to_o(options = T.unsafe(nil)); end
  def to_owg(options = T.unsafe(nil)); end
  def to_s(options = T.unsafe(nil)); end
  def to_s_prefixed(options = T.unsafe(nil)); end
  def to_svg(options = T.unsafe(nil)); end
  def to_webkit(options = T.unsafe(nil)); end
end

class Compass::Core::SassExtensions::Functions::GradientSupport::RadialGradient < ::Sass::Script::Value::Base
  include(::Sass::Script::Value::Helpers)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Gradient)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Assertions)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Functions)
  include(::Compass::Core::SassExtensions::Functions::Constants)
  include(::Compass::Core::SassExtensions::Functions::InlineImage)
  extend(::Compass::Core::SassExtensions::Functions::GradientSupport::Gradient::ClassMethods)

  def initialize(position, shape_and_size, color_stops); end

  def array_to_s(array, opts); end
  def children; end
  def color_stops; end
  def color_stops=(_arg0); end
  def new_standard_arguments(options = T.unsafe(nil)); end
  def old_standard_arguments(options = T.unsafe(nil)); end
  def position; end
  def position=(_arg0); end
  def shape_and_size; end
  def shape_and_size=(_arg0); end
  def supports?(aspect); end
  def to_css2(options = T.unsafe(nil)); end
  def to_moz(options = T.unsafe(nil)); end
  def to_official; end
  def to_s(options = T.unsafe(nil)); end
  def to_s_prefixed(options = T.unsafe(nil)); end
  def to_svg(options = T.unsafe(nil)); end
  def to_webkit(options = T.unsafe(nil)); end
end

module Compass::Core::SassExtensions::Functions::ImageSize
  def image_height(image_file); end
  def image_width(image_file); end

  private

  def image_dimensions(image_file); end
  def image_path_for_size(image_file); end
  def real_path(image_file); end
end

class Compass::Core::SassExtensions::Functions::ImageSize::ImageProperties
  def initialize(file); end

  def size; end

  private

  def get_size_for_gif; end
  def get_size_for_jpeg; end
  def get_size_for_jpg; end
  def get_size_for_png; end
end

class Compass::Core::SassExtensions::Functions::ImageSize::JPEG
  def initialize(file); end

  def bits; end
  def height; end
  def width; end

  private

  def examine(io); end
end

Compass::Core::SassExtensions::Functions::ImageSize::KNOWN_TYPES = T.let(T.unsafe(nil), Array)

module Compass::Core::SassExtensions::Functions::InlineImage
  def inline_font_files(*args); end
  def inline_image(path, mime_type = T.unsafe(nil)); end

  protected

  def inline_image_string(data, mime_type); end

  private

  def compute_mime_type(path, mime_type = T.unsafe(nil)); end
  def data(real_path); end
end

module Compass::Core::SassExtensions::Functions::Lists
  def _compass_list(arg); end
  def _compass_list_size(list); end
  def _compass_nth(list, place); end
  def _compass_slice(list, start_index, end_index = T.unsafe(nil)); end
  def _compass_space_list(list); end
  def blank(obj); end
  def compact(*args); end
  def first_value_of(list); end
  def reject(list, *values); end

  protected

  def assert_list(value); end
end

module Compass::Core::SassExtensions::Functions::Math
  extend(::Compass::Core::SassExtensions::Functions::SassDeclarationHelper)
  extend(::Sass::Script::Value::Helpers)

  def acos(number); end
  def asin(number); end
  def atan(number); end
  def cos(number); end
  def deprecated_random(*args); end
  def e; end
  def logarithm(number, base = T.unsafe(nil)); end
  def pi; end
  def pow(number, exponent); end
  def sin(number); end
  def sqrt(number); end
  def square_root(number); end
  def tan(number); end

  private

  def trig(operation, number); end

  class << self
    def included(base); end
  end
end

Compass::Core::SassExtensions::Functions::Math::E = T.let(T.unsafe(nil), Sass::Script::Value::Number)

Compass::Core::SassExtensions::Functions::Math::PI = T.let(T.unsafe(nil), Sass::Script::Value::Number)

module Compass::Core::SassExtensions::Functions::SassDeclarationHelper
  def declare(*args); end
end

module Compass::Core::SassExtensions::Functions::Selectors
  def append_selector(selector, to_append); end
  def headers(from = T.unsafe(nil), to = T.unsafe(nil)); end
  def headings(from = T.unsafe(nil), to = T.unsafe(nil)); end
  def nest(*arguments); end
end

Compass::Core::SassExtensions::Functions::Selectors::COMMA_SEPARATOR = T.let(T.unsafe(nil), Regexp)

module Compass::Core::SassExtensions::Functions::Urls
  include(::Compass::Core::SassExtensions::Functions::Urls::StylesheetUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::FontUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::ImageUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::GeneratedImageUrl)


  private

  def absolute_path?(path); end
  def cache_busted_path(path, real_path); end
  def clean_path(url); end
  def clean_url(url); end
  def compute_cache_buster(path, real_path); end
  def compute_relative_path(path); end
  def default_cache_buster(path, real_path); end
  def relative?; end

  class << self
    def has?(base, instance_method); end
    def included(base); end
  end
end

module Compass::Core::SassExtensions::Functions::Urls::FontUrl
  def font_url(path, only_path = T.unsafe(nil), cache_buster = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module Compass::Core::SassExtensions::Functions::Urls::GeneratedImageUrl
  def generated_image_url(path, cache_buster = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module Compass::Core::SassExtensions::Functions::Urls::ImageUrl
  def image_url(path, only_path = T.unsafe(nil), cache_buster = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module Compass::Core::SassExtensions::Functions::Urls::StylesheetUrl
  def stylesheet_url(path, only_path = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

Compass::Core::VERSION = T.let(T.unsafe(nil), String)

class Compass::Error < ::Sass::SyntaxError
end

module Compass::Frameworks
  extend(::Compass::Frameworks)

  def [](name); end
  def detect_registration; end
  def discover(frameworks_directory); end
  def guess_gem_version(line_reference); end
  def pretty_print(skip_patterns = T.unsafe(nil)); end
  def register(name, *arguments); end
  def register_directory(directory); end
  def template_exists?(template); end
  def template_usage(template); end
end

Compass::Frameworks::ALL = T.let(T.unsafe(nil), Array)

class Compass::Frameworks::Framework
  def initialize(name, *arguments); end

  def manifest(pattern, options = T.unsafe(nil)); end
  def manifest_file(pattern); end
  def name; end
  def name=(_arg0); end
  def path; end
  def path=(_arg0); end
  def stylesheets_directory; end
  def stylesheets_directory=(_arg0); end
  def template_directories; end
  def templates_directory; end
  def templates_directory=(_arg0); end
  def version; end
  def version=(_arg0); end
end

module Compass::HasDeprecatedConstantsFromCore
  class << self
    def extended(base); end
  end
end

module Compass::SassExtensions
  extend(::Compass::HasDeprecatedConstantsFromCore)

  class << self
    def const_missing(const_name); end
  end
end

module Compass::SassExtensions::Functions
  extend(::Compass::HasDeprecatedConstantsFromCore)

  class << self
    def const_missing(const_name); end
  end
end

module Compass::Util
  extend(::Compass::Util)

  def blank?(value); end
  def compass_warn(*args); end
end

Compass::VERSION = T.let(T.unsafe(nil), String)

Compass::VERSION_DETAILS = T.let(T.unsafe(nil), Hash)

Compass::VERSION_NAME = T.let(T.unsafe(nil), String)

module Sass
  extend(::Sass::Version)
  extend(::Sass::Features)

  class << self
    def compile(contents, options = T.unsafe(nil)); end
    def compile_file(filename, *args); end
    def load_paths; end
    def logger; end
    def logger=(l); end
    def tests_running; end
    def tests_running=(_arg0); end
  end
end

class Sass::Callable < ::Struct
  def args; end
  def args=(_); end
  def environment; end
  def environment=(_); end
  def has_content; end
  def has_content=(_); end
  def name; end
  def name=(_); end
  def splat; end
  def splat=(_); end
  def tree; end
  def tree=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Sass::ROOT_DIR = T.let(T.unsafe(nil), String)

module Sass::Script
  class << self
    def const_missing(name); end
    def parse(value, line, offset, options = T.unsafe(nil)); end
  end
end

Sass::Script::ArgList = Sass::Script::Value::ArgList

Sass::Script::Bool = Sass::Script::Value::Bool

Sass::Script::CONST_RENAMES = T.let(T.unsafe(nil), Hash)

Sass::Script::Color = Sass::Script::Value::Color

class Sass::Script::CrossBrowserFunctionCall < ::Sass::Script::Value::Base
  include(::Sass::Script::HasSimpleCrossBrowserFunctionSupport)
  include(::Sass::Script::Value::Helpers)

  def initialize(name, args); end

  def args; end
  def args=(_arg0); end
  def children; end
  def inspect; end
  def name; end
  def name=(_arg0); end
  def to_css2(options = T.unsafe(nil)); end
  def to_moz(options = T.unsafe(nil)); end
  def to_ms(options = T.unsafe(nil)); end
  def to_o(options = T.unsafe(nil)); end
  def to_owg(options = T.unsafe(nil)); end
  def to_s(options = T.unsafe(nil)); end
  def to_svg(options = T.unsafe(nil)); end
  def to_webkit(options = T.unsafe(nil)); end
end

Sass::Script::Funcall = Sass::Script::Tree::Funcall

module Sass::Script::Functions
  include(::Compass::Core::SassExtensions::Functions::Configuration)
  include(::Compass::Core::SassExtensions::Functions::Selectors)
  include(::Compass::Core::SassExtensions::Functions::Enumerate)
  include(::Compass::Core::SassExtensions::Functions::Urls)
  include(::Compass::Core::SassExtensions::Functions::Urls::StylesheetUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::FontUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::ImageUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::GeneratedImageUrl)
  include(::Compass::Core::SassExtensions::Functions::Display)
  include(::Compass::Core::SassExtensions::Functions::InlineImage)
  include(::Compass::Core::SassExtensions::Functions::ImageSize)
  include(::Sass::Script::Value::Helpers)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Functions)
  include(::Compass::Core::SassExtensions::Functions::FontFiles)
  include(::Compass::Core::SassExtensions::Functions::Files)
  include(::Compass::Core::SassExtensions::Functions::Constants)
  include(::Compass::Core::SassExtensions::Functions::Lists)
  include(::Compass::Core::SassExtensions::Functions::Colors)
  include(::Compass::Core::SassExtensions::Functions::Math)
  include(::Compass::Core::SassExtensions::Functions::CrossBrowserSupport)
  include(::Compass::Core::SassExtensions::Functions::Env)
  include(::Compass::SassExtensions::Functions::Sprites)
  include(::Sprockets::SassProcessor::Functions)

  def abs(number); end
  def adjust_color(color, kwargs); end
  def adjust_hue(color, degrees); end
  def alpha(*args); end
  def append(list, val, separator = T.unsafe(nil)); end
  def blue(color); end
  def call(name, *args); end
  def ceil(number); end
  def change_color(color, kwargs); end
  def comparable(number1, number2); end
  def complement(color); end
  def counter(*args); end
  def counters(*args); end
  def darken(color, amount); end
  def desaturate(color, amount); end
  def fade_in(color, amount); end
  def fade_out(color, amount); end
  def feature_exists(feature); end
  def floor(number); end
  def function_exists(name); end
  def global_variable_exists(name); end
  def grayscale(color); end
  def green(color); end
  def hsl(hue, saturation, lightness); end
  def hsla(hue, saturation, lightness, alpha); end
  def hue(color); end
  def ie_hex_str(color); end
  def if(condition, if_true, if_false); end
  def index(list, value); end
  def inspect(value); end
  def invert(color); end
  def is_superselector(sup, sub); end
  def join(list1, list2, separator = T.unsafe(nil)); end
  def keywords(args); end
  def length(list); end
  def lighten(color, amount); end
  def lightness(color); end
  def list_separator(list); end
  def map_get(map, key); end
  def map_has_key(map, key); end
  def map_keys(map); end
  def map_merge(map1, map2); end
  def map_remove(map, *keys); end
  def map_values(map); end
  def max(*values); end
  def min(*numbers); end
  def mix(color1, color2, weight = T.unsafe(nil)); end
  def mixin_exists(name); end
  def nth(list, n); end
  def opacify(color, amount); end
  def opacity(color); end
  def percentage(number); end
  def quote(string); end
  def random(*args); end
  def red(color); end
  def rgb(red, green, blue); end
  def rgba(*args); end
  def round(number); end
  def sass_random(limit = T.unsafe(nil)); end
  def saturate(color, amount = T.unsafe(nil)); end
  def saturation(color); end
  def scale_color(color, kwargs); end
  def selector_append(*selectors); end
  def selector_extend(selector, extendee, extender); end
  def selector_nest(*selectors); end
  def selector_parse(selector); end
  def selector_replace(selector, original, replacement); end
  def selector_unify(selector1, selector2); end
  def set_nth(list, n, value); end
  def simple_selectors(selector); end
  def str_index(string, substring); end
  def str_insert(original, insert, index); end
  def str_length(string); end
  def str_slice(string, start_at, end_at = T.unsafe(nil)); end
  def to_lower_case(string); end
  def to_upper_case(string); end
  def transparentize(color, amount); end
  def type_of(value); end
  def unique_id; end
  def unit(number); end
  def unitless(number); end
  def unquote(string); end
  def variable_exists(name); end
  def zip(*lists); end

  private

  def _adjust(color, amount, attr, range, op, units = T.unsafe(nil)); end
  def check_alpha_unit(alpha, function); end
  def numeric_transformation(value); end

  class << self
    def callable?(*_arg0); end
    def declare(method_name, args, options = T.unsafe(nil)); end
    def random_number_generator; end
    def random_seed=(seed); end
    def signature(method_name, arg_arity, kwarg_arity); end

    private

    def include(*args); end
  end
end

class Sass::Script::Functions::EvaluationContext
  include(::Compass::Core::SassExtensions::Functions::Configuration)
  include(::Compass::Core::SassExtensions::Functions::Selectors)
  include(::Compass::Core::SassExtensions::Functions::Enumerate)
  include(::Compass::Core::SassExtensions::Functions::Urls)
  include(::Compass::Core::SassExtensions::Functions::Urls::StylesheetUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::FontUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::ImageUrl)
  include(::Compass::Core::SassExtensions::Functions::Urls::GeneratedImageUrl)
  include(::Compass::Core::SassExtensions::Functions::Display)
  include(::Compass::Core::SassExtensions::Functions::InlineImage)
  include(::Compass::Core::SassExtensions::Functions::ImageSize)
  include(::Compass::Core::SassExtensions::Functions::GradientSupport::Functions)
  include(::Compass::Core::SassExtensions::Functions::FontFiles)
  include(::Compass::Core::SassExtensions::Functions::Files)
  include(::Compass::Core::SassExtensions::Functions::Constants)
  include(::Compass::Core::SassExtensions::Functions::Lists)
  include(::Compass::Core::SassExtensions::Functions::Colors)
  include(::Compass::Core::SassExtensions::Functions::Math)
  include(::Compass::Core::SassExtensions::Functions::CrossBrowserSupport)
  include(::Compass::Core::SassExtensions::Functions::Env)
  include(::Compass::SassExtensions::Functions::Sprites)
  include(::Sprockets::SassProcessor::Functions)
  include(::Sass::Script::Functions)
  include(::Sass::Script::Value::Helpers)

  def initialize(environment); end

  def assert_integer(number, name = T.unsafe(nil)); end
  def assert_type(value, type, name = T.unsafe(nil)); end
  def assert_unit(number, unit, name = T.unsafe(nil)); end
  def environment; end
  def options; end
  def perform(node, env = T.unsafe(nil)); end
end

Sass::Script::Functions::EvaluationContext::TYPE_NAMES = T.let(T.unsafe(nil), Hash)

class Sass::Script::Functions::Signature < ::Struct
  def args; end
  def args=(_); end
  def delayed_args; end
  def delayed_args=(_); end
  def deprecated; end
  def deprecated=(_); end
  def var_args; end
  def var_args=(_); end
  def var_kwargs; end
  def var_kwargs=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Sass::Script::HasSimpleCrossBrowserFunctionSupport
  def has_aspect?(children = T.unsafe(nil)); end
  def supports?(aspect); end
end

Sass::Script::Interpolation = Sass::Script::Tree::Interpolation

Sass::Script::List = Sass::Script::Value::List

Sass::Script::Literal = Sass::Script::Value::Base

Sass::Script::MATCH = T.let(T.unsafe(nil), Regexp)

Sass::Script::Node = Sass::Script::Tree::Node

Sass::Script::Null = Sass::Script::Value::Null

Sass::Script::Number = Sass::Script::Value::Number

Sass::Script::Operation = Sass::Script::Tree::Operation

Sass::Script::String = Sass::Script::Value::String

Sass::Script::StringInterpolation = Sass::Script::Tree::StringInterpolation

Sass::Script::UnaryOperation = Sass::Script::Tree::UnaryOperation

Sass::Script::VALIDATE = T.let(T.unsafe(nil), Regexp)

module Sass::Script::Value
end

class Sass::Script::Value::ArgList < ::Sass::Script::Value::List
  def initialize(value, keywords, separator); end

  def children; end
  def keywords; end
  def keywords_accessed; end
  def keywords_accessed=(_arg0); end
end

class Sass::Script::Value::Base
  def initialize(value = T.unsafe(nil)); end

  def ==(other); end
  def assert_int!; end
  def children; end
  def div(other); end
  def eq(other); end
  def eql?(other); end
  def hash; end
  def inspect; end
  def minus(other); end
  def neq(other); end
  def null?; end
  def options; end
  def options=(_arg0); end
  def opts(value); end
  def plus(other); end
  def separator; end
  def single_eq(other); end
  def source_range; end
  def source_range=(_arg0); end
  def to_a; end
  def to_bool; end
  def to_h; end
  def to_i; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def unary_div; end
  def unary_minus; end
  def unary_not; end
  def unary_plus; end
  def value; end

  protected

  def _perform(environment); end
end

Sass::Script::Value::Base::NO_CHILDREN = T.let(T.unsafe(nil), Array)

class Sass::Script::Value::List < ::Sass::Script::Value::Base
  def initialize(value, separator); end

  def children; end
  def eq(other); end
  def has_aspect?; end
  def hash; end
  def inspect; end
  def options=(options); end
  def separator; end
  def supports?(aspect); end
  def to_a; end
  def to_h; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end

  private

  def element_needs_parens?(element); end
  def sep_str(opts = T.unsafe(nil)); end

  class << self
    def assert_valid_index(list, n); end
  end
end

class Sass::Script::Value::Map < ::Sass::Script::Value::Base
  def initialize(hash); end

  def children; end
  def eq(other); end
  def hash; end
  def inspect(opts = T.unsafe(nil)); end
  def options=(options); end
  def separator; end
  def to_a; end
  def to_h; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end
end

Sass::Script::Variable = Sass::Script::Tree::Variable

module Sass::Tree
end

class Sass::Tree::Node
  include(::Enumerable)

  def initialize; end

  def <<(child); end
  def ==(other); end
  def bubbles?; end
  def children; end
  def children=(children); end
  def css; end
  def css_with_sourcemap; end
  def deep_copy; end
  def each; end
  def filename; end
  def filename=(_arg0); end
  def has_children; end
  def has_children=(_arg0); end
  def inspect; end
  def invisible?; end
  def line; end
  def line=(_arg0); end
  def options; end
  def options=(options); end
  def source_range; end
  def source_range=(_arg0); end
  def style; end
  def to_sass(options = T.unsafe(nil)); end
  def to_scss(options = T.unsafe(nil)); end
  def visit_depth_first(visitor); end

  protected

  def balance(*args); end

  class << self
    def inherited(base); end
  end
end

Sass::VERSION = T.let(T.unsafe(nil), String)
