# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `memoizable` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Memoizable
  include ::Memoizable::InstanceMethods

  mixes_in_class_methods ::Memoizable::ModuleMethods

  class << self
    private

    def included(descendant); end
  end
end

Memoizable::Freezer = T.let(T.unsafe(nil), Proc)

module Memoizable::InstanceMethods
  def freeze; end
  def memoize(data); end

  private

  def memoized_method_cache; end
end

class Memoizable::Memory
  def initialize; end

  def [](name); end
  def []=(name, value); end
  def fetch(name); end
  def key?(name); end
  def marshal_dump; end
  def marshal_load(hash); end
end

class Memoizable::MethodBuilder
  def initialize(descendant, method_name, freezer); end

  def call; end
  def original_method; end

  private

  def assert_arity(arity); end
  def create_memoized_method; end
  def remove_original_method; end
  def set_method_visibility; end
  def visibility; end
end

class Memoizable::MethodBuilder::BlockNotAllowedError < ::ArgumentError
  def initialize(descendant, method); end
end

class Memoizable::MethodBuilder::InvalidArityError < ::ArgumentError
  def initialize(descendant, method, arity); end
end

module Memoizable::ModuleMethods
  def freezer; end
  def memoize(*methods); end
  def memoized?(name); end
  def unmemoized_instance_method(name); end

  private

  def included(descendant); end
  def memoize_method(method_name); end
  def memoized_methods; end
end

Memoizable::VERSION = T.let(T.unsafe(nil), String)
