# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/vanity/all/vanity.rbi
#
# vanity-3.0.0

module Vanity
  def self.configuration(set_if_needed = nil); end
  def self.configuration=(arg0); end
  def self.configure!; end
  def self.configure; end
  def self.connect!(spec_or_nil = nil); end
  def self.connection(connect_if_needed = nil); end
  def self.connection=(arg0); end
  def self.context; end
  def self.context=(context); end
  def self.disconnect!; end
  def self.load!; end
  def self.logger; end
  def self.playground(load_if_needed = nil); end
  def self.playground=(arg0); end
  def self.reconnect!; end
  def self.reload!; end
  def self.reset!; end
  def self.template(name); end
  def self.unload!; end
  def self.update_configuration_from_connection_params(spec_or_nil); end
  extend Vanity::Helpers
end
module Vanity::Version
end
class Vanity::Metric
  def bounds; end
  def call_hooks(timestamp, identity, values); end
  def connection; end
  def description(text = nil); end
  def description=(arg0); end
  def destroy!; end
  def google_analytics(web_property_id, *args); end
  def hook(&block); end
  def initialize(playground, name, id = nil); end
  def key(*args); end
  def last_update_at; end
  def model(class_or_scope, options = nil); end
  def name; end
  def remote(url = nil); end
  def self.bounds(metric); end
  def self.data(metric, *args); end
  def self.description(metric); end
  def self.load(playground, stack, file); end
  def to_s; end
  def track!(args = nil); end
  def track_args(args); end
  def values(from, to); end
end
module Vanity::Metric::Definition
  def metric(name, &block); end
  def new_binding(playground, id); end
  def playground; end
end
module Vanity::Metric::ActiveRecord
  def after_create(record); end
  def last_update_at; end
  def track!(args = nil); end
  def values(sdate, edate); end
end
module Vanity::Metric::GoogleAnalytics
  def hook; end
  def last_update_at; end
  def report; end
  def track!(args = nil); end
  def values(from, to); end
end
class Vanity::Metric::GoogleAnalytics::Resource
  def initialize(web_property_id, metric); end
  def profile; end
  def results(start_date, end_date); end
end
module Vanity::Metric::Remote
  def track!(args = nil); end
end
module Vanity::Experiment
end
module Vanity::Experiment::Definition
  def ab_test(name, &block); end
  def define(name, type, options = nil, &block); end
  def new_binding(playground, id); end
  def playground; end
end
class Vanity::Experiment::Base
  def active?; end
  def check_completion!; end
  def complete!(outcome = nil); end
  def complete_if(&block); end
  def completed_at; end
  def connection; end
  def created_at; end
  def default_identify(context); end
  def description(text = nil); end
  def destroy; end
  def id; end
  def identify(&block); end
  def identity; end
  def initialize(playground, id, name, options = nil); end
  def key(name = nil); end
  def name; end
  def on_assignment(&block); end
  def playground; end
  def reject(&block); end
  def save; end
  def self.load(playground, stack, file); end
  def self.type; end
  def to_s; end
  def type; end
end
class Vanity::NoExperimentError < NameError
end
class Vanity::Experiment::Alternative
  def <=>(other); end
  def ==(other); end
  def conversion_rate; end
  def conversions; end
  def converted; end
  def default?; end
  def difference; end
  def difference=(arg0); end
  def experiment; end
  def id; end
  def initialize(experiment, id, value); end
  def inspect; end
  def load_counts; end
  def measure; end
  def name; end
  def participants; end
  def probability; end
  def probability=(arg0); end
  def to_s; end
  def value; end
  def z_score; end
  def z_score=(arg0); end
end
class Vanity::Experiment::Score
  def alts; end
  def alts=(arg0); end
  def base; end
  def base=(arg0); end
  def best; end
  def best=(arg0); end
  def choice; end
  def choice=(arg0); end
  def least; end
  def least=(arg0); end
  def method; end
  def method=(arg0); end
end
class Vanity::Experiment::BayesianBanditScore < Vanity::Experiment::Score
  def assign_alternatives_bayesian_probability(alternatives); end
  def assign_alternatives_difference(alternatives); end
  def calculate!(probability = nil); end
  def calculate_alternative_posteriors(alternatives); end
  def initialize(alternatives, outcome); end
  def outcome_or_best_probability(alternatives, outcome, best, probability); end
  def pdf_alternative_is_best(z, alternative_being_examined, all_alternatives); end
  def probability_alternative_is_best(alternative_being_examined, all_alternatives); end
end
class Vanity::Experiment::AbTest < Vanity::Experiment::Base
  def alternative(value); end
  def alternative_for(identity); end
  def alternatives(*args); end
  def assignment_for_identity(request); end
  def bayes_bandit_score(probability = nil); end
  def build_alternatives(args); end
  def build_alternatives_with_weights(args); end
  def calculate_score; end
  def call_on_assignment_if_available(identity, index); end
  def choose(request = nil); end
  def chooses(value, request = nil); end
  def complete!(outcome = nil); end
  def conclusion(score = nil); end
  def default(value); end
  def destroy; end
  def enabled=(bool); end
  def enabled?; end
  def fake(values); end
  def false_true; end
  def filter_visitor?(request, identity); end
  def fingerprint(alternative); end
  def has_alternative_weights?(args); end
  def initialize(*args); end
  def metrics(*args); end
  def outcome; end
  def outcome_is(&block); end
  def rebalance!; end
  def rebalance_frequency(rf = nil); end
  def rebalance_if_necessary!; end
  def reset; end
  def save; end
  def save_assignment(identity, index, request); end
  def score(probability = nil); end
  def score_method(method = nil); end
  def self.friendly_name; end
  def self.probability(score); end
  def set_alternative_probabilities(alternative_probabilities); end
  def showing?(alternative); end
  def track!(metric_id, timestamp, count, *args); end
  def true_false; end
end
module Vanity::Adapters
  def self.active_record_connection(spec); end
  def self.establish_connection(spec); end
  def self.mock_connection(spec); end
end
class Vanity::Adapters::AbstractAdapter
  def ab_add_conversion(experiment, alternative, identity, count = nil, implicit = nil); end
  def ab_add_participant(experiment, alternative, identity); end
  def ab_assigned(experiment, identity); end
  def ab_counts(experiment, alternative); end
  def ab_get_outcome(experiment); end
  def ab_not_showing(experiment, identity); end
  def ab_seen(experiment, identity, assignment); end
  def ab_set_outcome(experiment, alternative = nil); end
  def ab_show(experiment, identity, alternative); end
  def ab_showing(experiment, identity); end
  def active?; end
  def destroy_experiment(experiment); end
  def destroy_metric(metric); end
  def disconnect!; end
  def experiment_persisted?(experiment); end
  def flushdb; end
  def get_experiment_created_at(experiment); end
  def get_metric_last_update_at(metric); end
  def is_experiment_completed?(experiment); end
  def is_experiment_enabled?(experiment); end
  def metric_track(metric, timestamp, identity, values); end
  def metric_values(metric, from, to); end
  def reconnect!; end
  def set_experiment_created_at(experiment, time); end
  def set_experiment_enabled(experiment, enabled); end
  def with_ab_seen_deprecation(experiment, identity, alternative); end
end
class Vanity::Adapters::MockAdapter < Vanity::Adapters::AbstractAdapter
  def ab_add_conversion(experiment, alternative, identity, count = nil, implicit = nil); end
  def ab_add_participant(experiment, alternative, identity); end
  def ab_assigned(experiment, identity); end
  def ab_counts(experiment, alternative); end
  def ab_get_outcome(experiment); end
  def ab_not_showing(experiment, identity); end
  def ab_seen(experiment, identity, alternative_or_id); end
  def ab_set_outcome(experiment, alternative = nil); end
  def ab_show(experiment, identity, alternative); end
  def ab_showing(experiment, identity); end
  def active?; end
  def alternative(experiment, alternative); end
  def alternatives_for(experiment); end
  def destroy_experiment(experiment); end
  def destroy_metric(metric); end
  def disconnect!; end
  def experiment_persisted?(experiment); end
  def flushdb; end
  def get_experiment_completed_at(experiment); end
  def get_experiment_created_at(experiment); end
  def get_metric_last_update_at(metric); end
  def initialize(options); end
  def is_experiment_completed?(experiment); end
  def is_experiment_enabled?(experiment); end
  def metric_track(metric, timestamp, identity, values); end
  def metric_values(metric, from, to); end
  def reconnect!; end
  def set_experiment_completed_at(experiment, time); end
  def set_experiment_created_at(experiment, time); end
  def set_experiment_enabled(experiment, enabled); end
  def to_s; end
end
class Vanity::Playground
  def add_participant_path; end
  def add_participant_path=(path); end
  def collecting=(enabled); end
  def collecting?; end
  def connected?; end
  def connection; end
  def custom_templates_path; end
  def custom_templates_path=(path); end
  def disconnect!; end
  def establish_connection(spec = nil); end
  def experiment(name); end
  def experiments; end
  def experiments_persisted?; end
  def failover_on_datastore_error!; end
  def failover_on_datastore_error?; end
  def initialize; end
  def load!; end
  def load_path; end
  def load_path=(path); end
  def logger; end
  def logger=(logger); end
  def metric(id); end
  def metrics; end
  def on_datastore_error; end
  def on_datastore_error=(closure); end
  def participant_info(participant_id); end
  def reconnect!; end
  def reload!; end
  def request_filter; end
  def request_filter=(filter); end
  def set_experiments; end
  def set_metrics; end
  def track!(id, count = nil); end
  def use_js!; end
  def using_js?; end
end
class Vanity::Configuration
  def [](arg); end
  def add_participant_route; end
  def add_participant_route=(arg0); end
  def collecting; end
  def collecting=(arg0); end
  def config_file; end
  def config_file=(arg0); end
  def config_path; end
  def config_path=(arg0); end
  def connection_params(file_name = nil); end
  def connection_url; end
  def cookie_domain; end
  def cookie_domain=(arg0); end
  def cookie_expires; end
  def cookie_expires=(arg0); end
  def cookie_httponly; end
  def cookie_httponly=(arg0); end
  def cookie_name; end
  def cookie_name=(arg0); end
  def cookie_path; end
  def cookie_path=(arg0); end
  def cookie_secure; end
  def cookie_secure=(arg0); end
  def environment; end
  def environment=(arg0); end
  def experiments_path; end
  def experiments_path=(arg0); end
  def experiments_start_enabled; end
  def experiments_start_enabled=(arg0); end
  def failover_on_datastore_error; end
  def failover_on_datastore_error=(arg0); end
  def locales_path; end
  def locales_path=(arg0); end
  def logger; end
  def logger=(arg0); end
  def on_datastore_error; end
  def on_datastore_error=(arg0); end
  def redis_url_from_file; end
  def request_filter; end
  def request_filter=(arg0); end
  def self.default_logger; end
  def self.default_on_datastore_error(error, klass, method, arguments); end
  def self.default_request_filter(request); end
  def setup_locales; end
  def templates_path; end
  def templates_path=(arg0); end
  def use_js; end
  def use_js=(arg0); end
end
class Vanity::Configuration::MissingEnvironment < StandardError
end
class Vanity::Connection
  def adapter; end
  def connected?; end
  def disconnect!; end
  def establish_connection(spec); end
  def initialize(specification = nil); end
  def setup_connection(specification); end
  def specification; end
end
class Vanity::Connection::InvalidSpecification < StandardError
end
class Vanity::Connection::Specification
  def build_specification_hash_from_url(connection_url); end
  def initialize(spec); end
  def to_h; end
  def validate_specification_hash(spec); end
end
module Vanity::Autoconnect
  def self.current_rake_tasks; end
  def self.environment_disabled?; end
  def self.in_blacklisted_rake_task?; end
  def self.playground_should_autoconnect?; end
  def self.schema_relevant?; end
  def self.should_connect?; end
end
class Vanity::Templates
  def custom_template_path_valid?; end
  def determine_template_directory; end
  def gem_templates_path; end
  def initialize; end
  def path(name); end
end
module Vanity::Helpers
  def ab_test(name, request = nil, &block); end
  def track!(name, count_or_options = nil); end
end
class Plugin < Rails::Railtie
end
module Vanity::Rails
  def self.load!; end
end
module Vanity::Rails::UseVanity
  def use_vanity(method_name = nil, &block); end
end
module Vanity::Rails::Identity
  def build_vanity_cookie(identity); end
  def vanity_identity; end
  def vanity_identity_from_method(method_name); end
end
module Vanity::Rails::UseVanityMailer
  def use_vanity_mailer(symbol = nil); end
end
module Vanity::Rails::Filters
  def vanity_context_filter; end
  def vanity_query_parameter_filter; end
  def vanity_reload_filter; end
  def vanity_track_filter; end
end
module Vanity::Rails::Helpers
  def ab_test(name, &block); end
  def vanity_experiments; end
  def vanity_h(text); end
  def vanity_html_safe(text); end
  def vanity_js; end
  def vanity_simple_format(text, html_options = nil); end
  def vanity_track_url_for(identity, metric, options = nil); end
  def vanity_tracking_image(identity, metric, options = nil); end
end
module Vanity::Rails::AddParticipant
  def add_participant; end
end
module Vanity::Rails::Dashboard
  def chooses; end
  def complete; end
  def disable; end
  def enable; end
  def index; end
  def participant; end
  def reset; end
  include Vanity::Rails::AddParticipant
end
module Vanity::Rails::TrackingImage
  def image; end
end
class ActionController::Base < ActionController::Metal
  extend Vanity::Rails::UseVanity
  include Vanity::Rails::Filters
  include Vanity::Rails::Identity
end
class Vanity::Adapters::ActiveRecordAdapter < Vanity::Adapters::AbstractAdapter
  def ab_add_conversion(experiment, alternative, identity, count = nil, implicit = nil); end
  def ab_add_participant(experiment, alternative, identity); end
  def ab_assigned(experiment, identity); end
  def ab_counts(experiment, alternative); end
  def ab_get_outcome(experiment); end
  def ab_not_showing(experiment, identity); end
  def ab_seen(experiment, identity, alternative_or_id); end
  def ab_set_outcome(experiment, alternative = nil); end
  def ab_show(experiment, identity, alternative); end
  def ab_showing(experiment, identity); end
  def active?; end
  def destroy_experiment(experiment); end
  def destroy_metric(metric); end
  def disconnect!; end
  def experiment_persisted?(experiment); end
  def flushdb; end
  def get_experiment_completed_at(experiment); end
  def get_experiment_created_at(experiment); end
  def get_metric_last_update_at(metric); end
  def initialize(options); end
  def is_experiment_completed?(experiment); end
  def is_experiment_enabled?(experiment); end
  def metric_track(metric, timestamp, identity, values); end
  def metric_values(metric, from, to); end
  def reconnect!; end
  def set_experiment_completed_at(experiment, time); end
  def set_experiment_created_at(experiment, time); end
  def set_experiment_enabled(experiment, enabled); end
  def to_s; end
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_26
end
class Vanity::Adapters::ActiveRecordAdapter::VanityRecord < ActiveRecord::Base
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.needs_attr_accessible?; end
  def self.page(num = nil); end
  def self.rails_agnostic_find_or_create_by(method, value); end
  extend Kaminari::ConfigurationMethods::ClassMethods
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_26
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
  include Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedAssociationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityRecord::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityRecord::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityRecord::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityRecord::GeneratedRelationMethods
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_27
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetric < Vanity::Adapters::ActiveRecordAdapter::VanityRecord
  def after_add_for_vanity_metric_values; end
  def after_add_for_vanity_metric_values=(val); end
  def after_add_for_vanity_metric_values?; end
  def after_remove_for_vanity_metric_values; end
  def after_remove_for_vanity_metric_values=(val); end
  def after_remove_for_vanity_metric_values?; end
  def autosave_associated_records_for_vanity_metric_values(*args); end
  def before_add_for_vanity_metric_values; end
  def before_add_for_vanity_metric_values=(val); end
  def before_add_for_vanity_metric_values?; end
  def before_remove_for_vanity_metric_values; end
  def before_remove_for_vanity_metric_values=(val); end
  def before_remove_for_vanity_metric_values?; end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.after_add_for_vanity_metric_values; end
  def self.after_add_for_vanity_metric_values=(val); end
  def self.after_add_for_vanity_metric_values?; end
  def self.after_remove_for_vanity_metric_values; end
  def self.after_remove_for_vanity_metric_values=(val); end
  def self.after_remove_for_vanity_metric_values?; end
  def self.attribute_type_decorations; end
  def self.before_add_for_vanity_metric_values; end
  def self.before_add_for_vanity_metric_values=(val); end
  def self.before_add_for_vanity_metric_values?; end
  def self.before_remove_for_vanity_metric_values; end
  def self.before_remove_for_vanity_metric_values=(val); end
  def self.before_remove_for_vanity_metric_values?; end
  def self.defined_enums; end
  def self.retrieve(metric); end
  def touch_with_grace_period; end
  def updated_before_grace_period?(now); end
  def validate_associated_records_for_vanity_metric_values(*args); end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_27
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedAssociationMethods
  def vanity_metric_value_ids; end
  def vanity_metric_value_ids=(ids); end
  def vanity_metric_values; end
  def vanity_metric_values=(value); end
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetric::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetric::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetric::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetric::GeneratedRelationMethods
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_28
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue < Vanity::Adapters::ActiveRecordAdapter::VanityRecord
  def autosave_associated_records_for_vanity_metric(*args); end
  def belongs_to_counter_cache_after_update(reflection); end
  def counter_cache_target(reflection, model, foreign_key); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_28
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedAssociationMethods
  def build_vanity_metric(*args, &block); end
  def create_vanity_metric!(*args, &block); end
  def create_vanity_metric(*args, &block); end
  def reload_vanity_metric; end
  def vanity_metric; end
  def vanity_metric=(value); end
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityMetricValue::GeneratedRelationMethods
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_29
end
class Vanity::Adapters::ActiveRecordAdapter::VanityExperiment < Vanity::Adapters::ActiveRecordAdapter::VanityRecord
  def after_add_for_vanity_conversions; end
  def after_add_for_vanity_conversions=(val); end
  def after_add_for_vanity_conversions?; end
  def after_remove_for_vanity_conversions; end
  def after_remove_for_vanity_conversions=(val); end
  def after_remove_for_vanity_conversions?; end
  def autosave_associated_records_for_vanity_conversions(*args); end
  def before_add_for_vanity_conversions; end
  def before_add_for_vanity_conversions=(val); end
  def before_add_for_vanity_conversions?; end
  def before_remove_for_vanity_conversions; end
  def before_remove_for_vanity_conversions=(val); end
  def before_remove_for_vanity_conversions?; end
  def increment_conversion(alternative, count = nil); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.after_add_for_vanity_conversions; end
  def self.after_add_for_vanity_conversions=(val); end
  def self.after_add_for_vanity_conversions?; end
  def self.after_remove_for_vanity_conversions; end
  def self.after_remove_for_vanity_conversions=(val); end
  def self.after_remove_for_vanity_conversions?; end
  def self.attribute_type_decorations; end
  def self.before_add_for_vanity_conversions; end
  def self.before_add_for_vanity_conversions=(val); end
  def self.before_add_for_vanity_conversions?; end
  def self.before_remove_for_vanity_conversions; end
  def self.before_remove_for_vanity_conversions=(val); end
  def self.before_remove_for_vanity_conversions?; end
  def self.defined_enums; end
  def self.retrieve(experiment); end
  def validate_associated_records_for_vanity_conversions(*args); end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_29
  include Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedAssociationMethods
  def vanity_conversion_ids; end
  def vanity_conversion_ids=(ids); end
  def vanity_conversions; end
  def vanity_conversions=(value); end
end
class Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityExperiment::GeneratedRelationMethods
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_30
end
class Vanity::Adapters::ActiveRecordAdapter::VanityConversion < Vanity::Adapters::ActiveRecordAdapter::VanityRecord
  def autosave_associated_records_for_vanity_experiment(*args); end
  def belongs_to_counter_cache_after_update(reflection); end
  def counter_cache_target(reflection, model, foreign_key); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_30
  include Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedAssociationMethods
  def build_vanity_experiment(*args, &block); end
  def create_vanity_experiment!(*args, &block); end
  def create_vanity_experiment(*args, &block); end
  def reload_vanity_experiment; end
  def vanity_experiment; end
  def vanity_experiment=(value); end
end
class Vanity::Adapters::ActiveRecordAdapter::VanityConversion::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityConversion::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityConversion::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityConversion::GeneratedRelationMethods
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_31
end
class Vanity::Adapters::ActiveRecordAdapter::VanityParticipant < Vanity::Adapters::ActiveRecordAdapter::VanityRecord
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.retrieve(experiment, identity, create = nil, update_with = nil); end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_31
  include Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedAssociationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedAssociationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedRelationMethods
end
module Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedRelationMethods
end
class Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Vanity::Adapters::ActiveRecordAdapter::VanityParticipant::GeneratedRelationMethods
end
