# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GithubIssue`.
# Please instead update this file by running `bin/tapioca dsl GithubIssue`.

# typed: true
class GithubIssue
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Authority)) }
    def authority; end

    sig { params(value: T.nilable(::Authority)).void }
    def authority=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Authority) }
    def build_authority(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Authority) }
    def create_authority(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Authority) }
    def create_authority!(*args, &blk); end

    sig { returns(T.nilable(::Authority)) }
    def reload_authority; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def authority_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def authority_id=(value); end

    sig { returns(T::Boolean) }
    def authority_id?; end

    sig { returns(T.nilable(::Integer)) }
    def authority_id_before_last_save; end

    sig { returns(T.untyped) }
    def authority_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def authority_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def authority_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def authority_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def authority_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def authority_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def authority_id_previous_change; end

    sig { returns(T::Boolean) }
    def authority_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def authority_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def authority_id_was; end

    sig { void }
    def authority_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def github_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def github_number=(value); end

    sig { returns(T::Boolean) }
    def github_number?; end

    sig { returns(T.nilable(::Integer)) }
    def github_number_before_last_save; end

    sig { returns(T.untyped) }
    def github_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def github_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def github_number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def github_number_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def github_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def github_number_previous_change; end

    sig { returns(T::Boolean) }
    def github_number_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def github_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def github_number_was; end

    sig { void }
    def github_number_will_change!; end

    sig { returns(::String) }
    def github_repo; end

    sig { params(value: ::String).returns(::String) }
    def github_repo=(value); end

    sig { returns(T::Boolean) }
    def github_repo?; end

    sig { returns(T.nilable(::String)) }
    def github_repo_before_last_save; end

    sig { returns(T.untyped) }
    def github_repo_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_repo_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_repo_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_repo_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def github_repo_changed?; end

    sig { returns(T.nilable(::String)) }
    def github_repo_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_repo_previous_change; end

    sig { returns(T::Boolean) }
    def github_repo_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def github_repo_previously_was; end

    sig { returns(T.nilable(::String)) }
    def github_repo_was; end

    sig { void }
    def github_repo_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { void }
    def restore_authority_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_github_number!; end

    sig { void }
    def restore_github_repo!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_authority_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_authority_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_github_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_number?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_github_repo; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_repo?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authority_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_repo?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end
end