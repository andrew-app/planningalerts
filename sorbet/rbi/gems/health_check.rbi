# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/health_check/all/health_check.rbi
#
# health_check-3.1.0

module HealthCheck
  def accept_proxied_requests; end
  def accept_proxied_requests=(obj); end
  def basic_auth_password; end
  def basic_auth_password=(obj); end
  def basic_auth_username; end
  def basic_auth_username=(obj); end
  def buckets; end
  def buckets=(obj); end
  def custom_checks; end
  def custom_checks=(obj); end
  def failure; end
  def failure=(obj); end
  def failure_callbacks; end
  def failure_callbacks=(obj); end
  def full_checks; end
  def full_checks=(obj); end
  def http_status_for_error_object; end
  def http_status_for_error_object=(obj); end
  def http_status_for_error_text; end
  def http_status_for_error_text=(obj); end
  def http_status_for_ip_whitelist_error; end
  def http_status_for_ip_whitelist_error=(obj); end
  def include_error_in_response_body; end
  def include_error_in_response_body=(obj); end
  def installed_as_middleware; end
  def installed_as_middleware=(obj); end
  def log_level; end
  def log_level=(obj); end
  def max_age; end
  def max_age=(obj); end
  def middleware_checks; end
  def middleware_checks=(obj); end
  def origin_ip_whitelist; end
  def origin_ip_whitelist=(obj); end
  def rabbitmq_config; end
  def rabbitmq_config=(obj); end
  def redis_password; end
  def redis_password=(obj); end
  def redis_url; end
  def redis_url=(obj); end
  def self.accept_proxied_requests; end
  def self.accept_proxied_requests=(obj); end
  def self.add_custom_check(name = nil, &block); end
  def self.basic_auth_password; end
  def self.basic_auth_password=(obj); end
  def self.basic_auth_username; end
  def self.basic_auth_username=(obj); end
  def self.buckets; end
  def self.buckets=(obj); end
  def self.custom_checks; end
  def self.custom_checks=(obj); end
  def self.failure; end
  def self.failure=(obj); end
  def self.failure_callbacks; end
  def self.failure_callbacks=(obj); end
  def self.full_checks; end
  def self.full_checks=(obj); end
  def self.http_status_for_error_object; end
  def self.http_status_for_error_object=(obj); end
  def self.http_status_for_error_text; end
  def self.http_status_for_error_text=(obj); end
  def self.http_status_for_ip_whitelist_error; end
  def self.http_status_for_ip_whitelist_error=(obj); end
  def self.include_error_in_response_body; end
  def self.include_error_in_response_body=(obj); end
  def self.installed_as_middleware; end
  def self.installed_as_middleware=(obj); end
  def self.log_level; end
  def self.log_level=(obj); end
  def self.max_age; end
  def self.max_age=(obj); end
  def self.middleware_checks; end
  def self.middleware_checks=(obj); end
  def self.on_failure(&block); end
  def self.on_success(&block); end
  def self.origin_ip_whitelist; end
  def self.origin_ip_whitelist=(obj); end
  def self.rabbitmq_config; end
  def self.rabbitmq_config=(obj); end
  def self.redis_password; end
  def self.redis_password=(obj); end
  def self.redis_url; end
  def self.redis_url=(obj); end
  def self.setup; end
  def self.smtp_timeout; end
  def self.smtp_timeout=(obj); end
  def self.standard_checks; end
  def self.standard_checks=(obj); end
  def self.success; end
  def self.success=(obj); end
  def self.success_callbacks; end
  def self.success_callbacks=(obj); end
  def self.uri; end
  def self.uri=(obj); end
  def smtp_timeout; end
  def smtp_timeout=(obj); end
  def standard_checks; end
  def standard_checks=(obj); end
  def success; end
  def success=(obj); end
  def success_callbacks; end
  def success_callbacks=(obj); end
  def uri; end
  def uri=(obj); end
end
module BaseHealthCheck
  def create_error(check_type, error_message); end
end
class HealthCheck::ResqueHealthCheck
  def self.check; end
  extend BaseHealthCheck
end
class HealthCheck::S3HealthCheck
  def self.D(bucket); end
  def self.R(bucket); end
  def self.W(bucket); end
  def self.aws_s3_client; end
  def self.check; end
  def self.configure_client; end
  extend BaseHealthCheck
end
class HealthCheck::RedisHealthCheck
  def self.check; end
  def self.client; end
  extend BaseHealthCheck
end
class HealthCheck::ElasticsearchHealthCheck
  def self.check; end
  extend BaseHealthCheck
end
class HealthCheck::SidekiqHealthCheck
  def self.check; end
  extend BaseHealthCheck
end
class HealthCheck::Utils
  def default_smtp_settings; end
  def default_smtp_settings=(obj); end
  def self.check_cache; end
  def self.check_email; end
  def self.check_sendmail(settings); end
  def self.check_smtp(settings, timeout); end
  def self.db_migrate_path; end
  def self.db_migrate_path=(value); end
  def self.default_smtp_settings; end
  def self.default_smtp_settings=(obj); end
  def self.get_database_version; end
  def self.get_migration_version(dir = nil); end
  def self.mailer_configured?; end
  def self.process_checks(checks, called_from_middleware = nil); end
end
class HealthCheck::HealthCheckController < ActionController::Base
  def _layout(lookup_context, formats); end
  def authenticate; end
  def check_origin_ip; end
  def index; end
  def protect_against_forgery?; end
  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self.middleware_stack; end
  def send_response(healthy, msg, text_status, obj_status); end
end
module ActionDispatch::Routing
end
class ActionDispatch::Routing::Mapper
  def add_health_check_routes(prefix = nil); end
  def health_check_routes(prefix = nil); end
end
class HealthCheck::MiddlewareHealthcheck
  def call(env); end
  def initialize(app); end
  def ip_blocked(env); end
  def not_authenticated(env); end
  def parse_env(env); end
end
class HealthCheck::MiddlewareHealthcheck::Request < Rack::Auth::AbstractRequest
  def basic?; end
  def credentials; end
  def password; end
  def username; end
end
class HealthCheck::RabbitMQHealthCheck
  def self.check; end
  extend BaseHealthCheck
end
class HealthCheck::Engine < Rails::Engine
  def routes_explicitly_defined; end
  def routes_explicitly_defined=(obj); end
  def self.routes_explicitly_defined; end
  def self.routes_explicitly_defined=(obj); end
end
