# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails-observers/all/rails-observers.rbi
#
# rails-observers-0.1.5

module Rails
end
module Rails::Observers
end
class Rails::Observers::Railtie < Rails::Railtie
end
module ActiveModel
end
class ActiveModel::ObserverArray < Array
  def disable(*observers, &block); end
  def disabled_for?(observer); end
  def disabled_observer_stack; end
  def disabled_observers; end
  def each_subclass_array; end
  def enable(*observers, &block); end
  def end_transaction; end
  def initialize(model_class, *args); end
  def model_class; end
  def observer_class_for(observer); end
  def set_enablement(enabled, observers); end
  def start_transaction; end
  def transaction; end
end
module ActiveModel::Observing
  def notify_observers(method, *extra_args); end
  extend ActiveSupport::Concern
end
module ActiveModel::Observing::ClassMethods
  def add_observer(observer); end
  def count_observers; end
  def inherited(subclass); end
  def instantiate_observer(observer); end
  def instantiate_observers; end
  def notify_observers(*args); end
  def observer_instances; end
  def observers; end
  def observers=(*values); end
  def observers_count; end
end
class ActiveModel::Observer
  def add_observer!(klass); end
  def disabled_for?(object); end
  def initialize; end
  def observed_class_inherited(subclass); end
  def observed_classes; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def self.observe(*models); end
  def self.observed_class; end
  def self.observed_classes; end
  def update(observed_method, object, *extra_args, &block); end
  extend ActiveSupport::DescendantsTracker
  extend Singleton::SingletonClassMethods
  include Singleton
end
module ActiveRecord
end
class ActiveRecord::Base
  extend ActiveModel::Observing::ClassMethods
  extend ActiveModel::Observing::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveModel::Observing
end
class ActiveRecord::Observer < ActiveModel::Observer
  def add_observer!(klass); end
  def define_callbacks(klass); end
  def observed_classes; end
  def self.instance; end
end
module ActionController
end
module ActionController::Caching
  extend ActiveSupport::Autoload
end
class ActionController::Caching::Sweeper < ActiveRecord::Observer
  def action_path_for(options); end
  def after(controller); end
  def around(controller); end
  def assigns(key); end
  def before(controller); end
  def callback(timing); end
  def clean_up; end
  def controller; end
  def controller=(arg0); end
  def initialize(*args); end
  def method_missing(method, *arguments, &block); end
  def self.instance; end
end
module ActionController::Caching::Sweeping
end
module ActionController::Caching::Sweeping::ClassMethods
  def cache_sweeper(*sweepers); end
end
class ActionController::Base < ActionController::Metal
  extend ActionController::Caching::Sweeping::ClassMethods
end
