# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/everypolitician-popolo/all/everypolitician-popolo.rbi
#
# everypolitician-popolo-fc3515339ceb

module Everypolitician
end
module Everypolitician::Popolo
  def self.parse(popolo_string); end
  def self.read(popolo_file); end
end
class Everypolitician::Popolo::Collection
  def -(other); end
  def class_for_entity(_document); end
  def documents; end
  def each(&block); end
  def empty?; end
  def find_by(attributes = nil); end
  def index_for(attr); end
  def initialize(documents, popolo = nil); end
  def new_collection(entities, klass = nil); end
  def of_collection(collection); end
  def popolo; end
  def self.entity_class(entity = nil); end
  def where(attributes = nil); end
  include Enumerable
end
class Everypolitician::Popolo::Entity
  def ==(other); end
  def [](key); end
  def document; end
  def eql?(other); end
  def id; end
  def identifier(scheme); end
  def identifiers; end
  def initialize(document, popolo = nil); end
  def key?(key); end
  def popolo; end
  def self.classification(classification = nil); end
  def self.inherited(subclass); end
  def self.subclasses; end
  def wikidata; end
end
class Everypolitician::Popolo::Area < Everypolitician::Popolo::Entity
  def identifiers; end
  def name; end
  def other_names; end
  def type; end
end
class Everypolitician::Popolo::Areas < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Event < Everypolitician::Popolo::Entity
  def classification; end
  def end_date; end
  def name; end
  def organization_id; end
  def start_date; end
end
class Everypolitician::Popolo::Events < Everypolitician::Popolo::Collection
  def class_for_entity(document); end
  def elections; end
  def legislative_periods; end
end
class Everypolitician::Popolo::Election < Everypolitician::Popolo::Event
end
class Everypolitician::Popolo::Elections < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::LegislativePeriod < Everypolitician::Popolo::Event
  def memberships; end
end
class Everypolitician::Popolo::LegislativePeriods < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Membership < Everypolitician::Popolo::Entity
  def ==(other); end
  def area; end
  def area_id; end
  def end_date; end
  def eql?(other); end
  def legislative_period; end
  def legislative_period_id; end
  def on_behalf_of; end
  def on_behalf_of_id; end
  def organization; end
  def organization_id; end
  def party; end
  def person; end
  def person_id; end
  def post; end
  def post_id; end
  def role; end
  def sources; end
  def start_date; end
  def term; end
end
class Everypolitician::Popolo::Memberships < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Organization < Everypolitician::Popolo::Entity
  def associated_color; end
  def associated_colour; end
  def classification; end
  def identifiers; end
  def image; end
  def links; end
  def name; end
  def other_names; end
  def seats; end
  def srgb; end
end
class Everypolitician::Popolo::Organizations < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Person < Everypolitician::Popolo::Entity
  def birth_date; end
  def contact(type); end
  def contact_details; end
  def death_date; end
  def email; end
  def facebook; end
  def family_name; end
  def fax; end
  def gender; end
  def given_name; end
  def honorific_prefix; end
  def honorific_suffix; end
  def image; end
  def images; end
  def link(type); end
  def links; end
  def memberships; end
  def name; end
  def name_at(date); end
  def national_identity; end
  def other_names; end
  def patronymic_name; end
  def phone; end
  def sort_name; end
  def sources; end
  def summary; end
  def twitter; end
end
class Everypolitician::Popolo::Person::Error < StandardError
end
class Everypolitician::Popolo::People < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Post < Everypolitician::Popolo::Entity
  def label; end
  def organization; end
  def organization_id; end
end
class Everypolitician::Popolo::Posts < Everypolitician::Popolo::Collection
end
class Everypolitician::Popolo::Error < StandardError
end
class Everypolitician::Popolo::JSON
  def areas; end
  def current_legislative_period; end
  def current_term; end
  def elections; end
  def events; end
  def initialize(popolo); end
  def latest_legislative_period; end
  def latest_term; end
  def legislative_periods; end
  def memberships; end
  def organizations; end
  def persons; end
  def popolo; end
  def posts; end
  def terms; end
end
