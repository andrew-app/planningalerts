# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `em-websocket` gem.
# Please instead update this file by running `bin/tapioca gem em-websocket`.

# typed: true

module EventMachine
  private

  def add_oneshot_timer(_arg0); end
  def attach_fd(_arg0, _arg1); end
  def attach_sd(_arg0); end
  def bind_connect_server(_arg0, _arg1, _arg2, _arg3); end
  def close_connection(_arg0, _arg1); end
  def connect_server(_arg0, _arg1); end
  def connect_unix_server(_arg0); end
  def connection_paused?(_arg0); end
  def current_time; end
  def detach_fd(_arg0); end
  def epoll; end
  def epoll=(_arg0); end
  def epoll?; end
  def get_cipher_bits(_arg0); end
  def get_cipher_name(_arg0); end
  def get_cipher_protocol(_arg0); end
  def get_comm_inactivity_timeout(_arg0); end
  def get_connection_count; end
  def get_file_descriptor(_arg0); end
  def get_heartbeat_interval; end
  def get_idle_time(_arg0); end
  def get_max_timer_count; end
  def get_peer_cert(_arg0); end
  def get_peername(_arg0); end
  def get_pending_connect_timeout(_arg0); end
  def get_proxied_bytes(_arg0); end
  def get_simultaneous_accept_count; end
  def get_sni_hostname(_arg0); end
  def get_sock_opt(_arg0, _arg1, _arg2); end
  def get_sockname(_arg0); end
  def get_subprocess_pid(_arg0); end
  def get_subprocess_status(_arg0); end
  def initialize_event_machine; end
  def invoke_popen(_arg0); end
  def is_notify_readable(_arg0); end
  def is_notify_writable(_arg0); end
  def kqueue; end
  def kqueue=(_arg0); end
  def kqueue?; end
  def library_type; end
  def num_close_scheduled; end
  def open_udp_socket(_arg0, _arg1); end
  def pause_connection(_arg0); end
  def read_keyboard; end
  def release_machine; end
  def report_connection_error_status(_arg0); end
  def resume_connection(_arg0); end
  def run_machine; end
  def run_machine_once; end
  def run_machine_without_threads; end
  def send_data(_arg0, _arg1, _arg2); end
  def send_datagram(_arg0, _arg1, _arg2, _arg3, _arg4); end
  def send_file_data(_arg0, _arg1); end
  def set_comm_inactivity_timeout(_arg0, _arg1); end
  def set_heartbeat_interval(_arg0); end
  def set_max_timer_count(_arg0); end
  def set_notify_readable(_arg0, _arg1); end
  def set_notify_writable(_arg0, _arg1); end
  def set_pending_connect_timeout(_arg0, _arg1); end
  def set_rlimit_nofile(_arg0); end
  def set_simultaneous_accept_count(_arg0); end
  def set_sock_opt(_arg0, _arg1, _arg2, _arg3); end
  def set_timer_quantum(_arg0); end
  def set_tls_parms(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9); end
  def setuid_string(_arg0); end
  def signal_loopbreak; end
  def ssl?; end
  def start_proxy(_arg0, _arg1, _arg2, _arg3); end
  def start_tcp_server(_arg0, _arg1); end
  def start_tls(_arg0); end
  def start_unix_server(_arg0); end
  def stop; end
  def stop_proxy(_arg0); end
  def stop_tcp_server(_arg0); end
  def stopping?; end
  def unwatch_filename(_arg0); end
  def unwatch_pid(_arg0); end
  def watch_filename(_arg0); end
  def watch_pid(_arg0); end

  class << self
    def Callback(object = T.unsafe(nil), method = T.unsafe(nil), &blk); end
    def _open_file_for_writing(filename, handler = T.unsafe(nil)); end
    def add_oneshot_timer(_arg0); end
    def add_periodic_timer(*args, &block); end
    def add_shutdown_hook(&block); end
    def add_timer(*args, &block); end
    def attach(io, handler = T.unsafe(nil), *args, &blk); end
    def attach_fd(_arg0, _arg1); end
    def attach_io(io, watch_mode, handler = T.unsafe(nil), *args); end
    def attach_sd(_arg0); end
    def attach_server(sock, handler = T.unsafe(nil), *args, &block); end
    def bind_connect(bind_addr, bind_port, server, port = T.unsafe(nil), handler = T.unsafe(nil), *args); end
    def bind_connect_server(_arg0, _arg1, _arg2, _arg3); end
    def cancel_timer(timer_or_sig); end
    def cleanup_machine; end
    def close_connection(_arg0, _arg1); end
    def connect(server, port = T.unsafe(nil), handler = T.unsafe(nil), *args, &blk); end
    def connect_server(_arg0, _arg1); end
    def connect_unix_domain(socketname, *args, &blk); end
    def connect_unix_server(_arg0); end
    def connection_count; end
    def connection_paused?(_arg0); end
    def current_time; end
    def defer(op = T.unsafe(nil), callback = T.unsafe(nil), errback = T.unsafe(nil), &blk); end
    def defers_finished?; end
    def detach_fd(_arg0); end
    def disable_proxy(from); end
    def enable_proxy(from, to, bufsize = T.unsafe(nil), length = T.unsafe(nil)); end
    def epoll; end
    def epoll=(_arg0); end
    def epoll?; end
    def error_handler(cb = T.unsafe(nil), &blk); end
    def event_callback(conn_binding, opcode, data); end
    def fork_reactor(&block); end
    def get_cipher_bits(_arg0); end
    def get_cipher_name(_arg0); end
    def get_cipher_protocol(_arg0); end
    def get_comm_inactivity_timeout(_arg0); end
    def get_connection_count; end
    def get_file_descriptor(_arg0); end
    def get_heartbeat_interval; end
    def get_idle_time(_arg0); end
    def get_max_timer_count; end
    def get_max_timers; end
    def get_peer_cert(_arg0); end
    def get_peername(_arg0); end
    def get_pending_connect_timeout(_arg0); end
    def get_proxied_bytes(_arg0); end
    def get_simultaneous_accept_count; end
    def get_sni_hostname(_arg0); end
    def get_sock_opt(_arg0, _arg1, _arg2); end
    def get_sockname(_arg0); end
    def get_subprocess_pid(_arg0); end
    def get_subprocess_status(_arg0); end
    def heartbeat_interval; end
    def heartbeat_interval=(time); end
    def initialize_event_machine; end
    def invoke_popen(_arg0); end
    def is_notify_readable(_arg0); end
    def is_notify_writable(_arg0); end
    def klass_from_handler(klass = T.unsafe(nil), handler = T.unsafe(nil), *args); end
    def kqueue; end
    def kqueue=(_arg0); end
    def kqueue?; end
    def library_type; end
    def next_tick(pr = T.unsafe(nil), &block); end
    def num_close_scheduled; end
    def open_datagram_socket(address, port, handler = T.unsafe(nil), *args); end
    def open_keyboard(handler = T.unsafe(nil), *args); end
    def open_udp_socket(_arg0, _arg1); end
    def pause_connection(_arg0); end
    def popen(cmd, handler = T.unsafe(nil), *args); end
    def reactor_running?; end
    def reactor_thread; end
    def reactor_thread?; end
    def read_keyboard; end
    def reconnect(server, port, handler); end
    def release_machine; end
    def report_connection_error_status(_arg0); end
    def resume_connection(_arg0); end
    def run(blk = T.unsafe(nil), tail = T.unsafe(nil), &block); end
    def run_block(&block); end
    def run_deferred_callbacks; end
    def run_machine; end
    def run_machine_once; end
    def run_machine_without_threads; end
    def schedule(*a, &b); end
    def send_data(_arg0, _arg1, _arg2); end
    def send_datagram(_arg0, _arg1, _arg2, _arg3, _arg4); end
    def send_file_data(_arg0, _arg1); end
    def set_comm_inactivity_timeout(_arg0, _arg1); end
    def set_descriptor_table_size(n_descriptors = T.unsafe(nil)); end
    def set_effective_user(username); end
    def set_heartbeat_interval(_arg0); end
    def set_max_timer_count(_arg0); end
    def set_max_timers(ct); end
    def set_notify_readable(_arg0, _arg1); end
    def set_notify_writable(_arg0, _arg1); end
    def set_pending_connect_timeout(_arg0, _arg1); end
    def set_quantum(mills); end
    def set_rlimit_nofile(_arg0); end
    def set_simultaneous_accept_count(_arg0); end
    def set_sock_opt(_arg0, _arg1, _arg2, _arg3); end
    def set_timer_quantum(_arg0); end
    def set_tls_parms(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9); end
    def setuid_string(_arg0); end
    def signal_loopbreak; end
    def spawn(&block); end
    def spawn_threadpool; end
    def ssl?; end
    def start_proxy(_arg0, _arg1, _arg2, _arg3); end
    def start_server(server, port = T.unsafe(nil), handler = T.unsafe(nil), *args, &block); end
    def start_tcp_server(_arg0, _arg1); end
    def start_tls(_arg0); end
    def start_unix_domain_server(filename, *args, &block); end
    def start_unix_server(_arg0); end
    def stop; end
    def stop_event_loop; end
    def stop_proxy(_arg0); end
    def stop_server(signature); end
    def stop_tcp_server(_arg0); end
    def stopping?; end
    def system(cmd, *args, &cb); end
    def threadpool; end
    def threadpool_size; end
    def threadpool_size=(_arg0); end
    def tick_loop(*a, &b); end
    def unwatch_filename(_arg0); end
    def unwatch_pid(_arg0); end
    def watch(io, handler = T.unsafe(nil), *args, &blk); end
    def watch_file(filename, handler = T.unsafe(nil), *args); end
    def watch_filename(_arg0); end
    def watch_pid(_arg0); end
    def watch_process(pid, handler = T.unsafe(nil), *args); end
    def yield(&block); end
    def yield_and_notify(&block); end
  end
end

EventMachine::ConnectionAccepted = T.let(T.unsafe(nil), Integer)
EventMachine::ConnectionCompleted = T.let(T.unsafe(nil), Integer)
EventMachine::ConnectionData = T.let(T.unsafe(nil), Integer)
class EventMachine::ConnectionError < ::RuntimeError; end
class EventMachine::ConnectionNotBound < ::RuntimeError; end
EventMachine::ConnectionNotifyReadable = T.let(T.unsafe(nil), Integer)
EventMachine::ConnectionNotifyWritable = T.let(T.unsafe(nil), Integer)
EventMachine::ConnectionUnbound = T.let(T.unsafe(nil), Integer)
EventMachine::EM_PROTO_SSLv2 = T.let(T.unsafe(nil), Integer)
EventMachine::EM_PROTO_SSLv3 = T.let(T.unsafe(nil), Integer)
EventMachine::EM_PROTO_TLSv1 = T.let(T.unsafe(nil), Integer)
EventMachine::EM_PROTO_TLSv1_1 = T.let(T.unsafe(nil), Integer)
EventMachine::EM_PROTO_TLSv1_2 = T.let(T.unsafe(nil), Integer)
EventMachine::ERRNOS = T.let(T.unsafe(nil), Hash)
class EventMachine::InvalidSignature < ::RuntimeError; end
EventMachine::LoopbreakSignalled = T.let(T.unsafe(nil), Integer)
class EventMachine::NoHandlerForAcceptedConnection < ::RuntimeError; end
EventMachine::P = EventMachine::Protocols
EventMachine::SslHandshakeCompleted = T.let(T.unsafe(nil), Integer)
EventMachine::SslVerify = T.let(T.unsafe(nil), Integer)
EventMachine::TimerFired = T.let(T.unsafe(nil), Integer)
class EventMachine::UnknownTimerFired < ::RuntimeError; end
class EventMachine::Unsupported < ::RuntimeError; end
EventMachine::VERSION = T.let(T.unsafe(nil), String)

module EventMachine::WebSocket
  class << self
    def close_timeout; end
    def close_timeout=(_arg0); end
    def max_frame_size; end
    def max_frame_size=(_arg0); end
    def run(options); end
    def start(options, &blk); end
    def stop; end
  end
end

module EventMachine::WebSocket::Close03
  def close_websocket(code, body); end
  def supports_close_codes?; end
end

module EventMachine::WebSocket::Close05
  def close_websocket(code, body); end
  def supports_close_codes?; end
end

module EventMachine::WebSocket::Close06
  def close_websocket(code, body); end
  def supports_close_codes?; end
end

module EventMachine::WebSocket::Close75
  def close_websocket(code, body); end
  def supports_close_codes?; end
end

class EventMachine::WebSocket::Connection < ::EventMachine::Connection
  include ::EventMachine::WebSocket::Debugger

  def initialize(options); end

  def close(code = T.unsafe(nil), body = T.unsafe(nil)); end
  def close_timeout; end
  def close_websocket(code = T.unsafe(nil), body = T.unsafe(nil)); end
  def dispatch(data); end
  def max_frame_size; end
  def max_frame_size=(_arg0); end
  def onbinary(&blk); end
  def onclose(&blk); end
  def onerror(&blk); end
  def onmessage(&blk); end
  def onopen(&blk); end
  def onping(&blk); end
  def onpong(&blk); end
  def ping(body = T.unsafe(nil)); end
  def pingable?; end
  def pong(body = T.unsafe(nil)); end
  def post_init; end
  def receive_data(data); end
  def remote_ip; end
  def send(data); end
  def send_binary(data); end
  def send_data(data); end
  def send_flash_cross_domain_file; end
  def send_healthcheck_response; end
  def send_text(data); end
  def state; end
  def supports_close_codes?; end
  def trigger_on_binary(msg); end
  def trigger_on_close(event = T.unsafe(nil)); end
  def trigger_on_error(reason); end
  def trigger_on_message(msg); end
  def trigger_on_open(handshake); end
  def trigger_on_ping(data); end
  def trigger_on_pong(data); end
  def unbind; end

  private

  def abort(reason); end
  def acceptable_close_code?(code); end
  def close_websocket_private(code, body); end
end

EventMachine::WebSocket::Connection::BINARY = T.let(T.unsafe(nil), Encoding)
EventMachine::WebSocket::Connection::ENCODING_SUPPORTED = T.let(T.unsafe(nil), TrueClass)
EventMachine::WebSocket::Connection::UTF8 = T.let(T.unsafe(nil), Encoding)

module EventMachine::WebSocket::Debugger
  private

  def debug(*data); end
end

module EventMachine::WebSocket::Framing03
  def initialize_framing; end
  def process_data; end
  def send_frame(frame_type, application_data); end
  def send_text_frame(data); end

  private

  def data_frame?(type); end
  def fin; end
  def opcode_to_type(opcode); end
  def type_to_opcode(frame_type); end
end

EventMachine::WebSocket::Framing03::DATA_FRAMES = T.let(T.unsafe(nil), Array)
EventMachine::WebSocket::Framing03::FRAME_TYPES = T.let(T.unsafe(nil), Hash)
EventMachine::WebSocket::Framing03::FRAME_TYPES_INVERSE = T.let(T.unsafe(nil), Hash)

module EventMachine::WebSocket::Framing04
  include ::EventMachine::WebSocket::Framing03

  private

  def fin; end
end

module EventMachine::WebSocket::Framing05
  def initialize_framing; end
  def process_data; end
  def send_frame(frame_type, application_data); end
  def send_text_frame(data); end

  private

  def data_frame?(type); end
  def opcode_to_type(opcode); end
  def type_to_opcode(frame_type); end
end

EventMachine::WebSocket::Framing05::DATA_FRAMES = T.let(T.unsafe(nil), Array)
EventMachine::WebSocket::Framing05::FRAME_TYPES = T.let(T.unsafe(nil), Hash)
EventMachine::WebSocket::Framing05::FRAME_TYPES_INVERSE = T.let(T.unsafe(nil), Hash)

module EventMachine::WebSocket::Framing07
  def initialize_framing; end
  def process_data; end
  def send_frame(frame_type, application_data); end
  def send_text_frame(data); end

  private

  def data_frame?(type); end
  def opcode_to_type(opcode); end
  def type_to_opcode(frame_type); end
end

EventMachine::WebSocket::Framing07::DATA_FRAMES = T.let(T.unsafe(nil), Array)
EventMachine::WebSocket::Framing07::FRAME_TYPES = T.let(T.unsafe(nil), Hash)
EventMachine::WebSocket::Framing07::FRAME_TYPES_INVERSE = T.let(T.unsafe(nil), Hash)

module EventMachine::WebSocket::Framing76
  def initialize_framing; end
  def process_data; end
  def send_text_frame(data); end
end

class EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Debugger

  def initialize(connection, debug = T.unsafe(nil)); end

  def close_websocket(code, body); end
  def fail_websocket(e); end
  def ping; end
  def pingable?; end
  def receive_data(data); end
  def request; end
  def start_close_timeout; end
  def state; end
  def unbind; end

  class << self
    def klass_factory(version); end
  end
end

class EventMachine::WebSocket::Handler03 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing03
  include ::EventMachine::WebSocket::MessageProcessor03
  include ::EventMachine::WebSocket::Close03
end

class EventMachine::WebSocket::Handler05 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing05
  include ::EventMachine::WebSocket::MessageProcessor03
  include ::EventMachine::WebSocket::Close05
end

class EventMachine::WebSocket::Handler06 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing05
  include ::EventMachine::WebSocket::MessageProcessor06
  include ::EventMachine::WebSocket::Close06
end

class EventMachine::WebSocket::Handler07 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing07
  include ::EventMachine::WebSocket::MessageProcessor06
  include ::EventMachine::WebSocket::Close06
end

class EventMachine::WebSocket::Handler08 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing07
  include ::EventMachine::WebSocket::MessageProcessor06
  include ::EventMachine::WebSocket::Close06
end

class EventMachine::WebSocket::Handler13 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Framing07
  include ::EventMachine::WebSocket::MessageProcessor06
  include ::EventMachine::WebSocket::Close06
end

class EventMachine::WebSocket::Handler75 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Handshake75
  include ::EventMachine::WebSocket::Framing76
  include ::EventMachine::WebSocket::Close75
end

class EventMachine::WebSocket::Handler76 < ::EventMachine::WebSocket::Handler
  include ::EventMachine::WebSocket::Handshake76
  include ::EventMachine::WebSocket::Framing76
  include ::EventMachine::WebSocket::Close75
end

EventMachine::WebSocket::Handler76::TERMINATE_STRING = T.let(T.unsafe(nil), String)

class EventMachine::WebSocket::Handshake
  include ::EventMachine::Deferrable

  def initialize(secure); end

  def headers; end
  def headers_downcased; end
  def origin; end
  def parser; end
  def path; end
  def protocol_version; end
  def query; end
  def query_string; end
  def receive_data(data); end
  def secure?; end

  private

  def process(headers, remains); end
end

module EventMachine::WebSocket::Handshake04
  class << self
    def handshake(headers, _, __); end
    def validate_protocol!(protocol); end
  end
end

module EventMachine::WebSocket::Handshake75
  class << self
    def handshake(headers, path, secure); end
    def validate_protocol!(protocol); end
  end
end

module EventMachine::WebSocket::Handshake76
  class << self
    def handshake(headers, path, secure); end

    private

    def numbers_over_spaces(string); end
    def solve_challenge(first, second, third); end
    def validate_protocol!(protocol); end
  end
end

class EventMachine::WebSocket::HandshakeError < ::EventMachine::WebSocket::WebSocketError; end

class EventMachine::WebSocket::InvalidDataError < ::EventMachine::WebSocket::WSProtocolError
  def code; end
end

class EventMachine::WebSocket::MaskedString < ::String
  def getbyte(index); end
  def getbytes(start_index, count); end
  def read_mask; end
  def unset_mask; end
end

module EventMachine::WebSocket::MessageProcessor03
  def message(message_type, extension_data, application_data); end
  def pingable?; end
end

module EventMachine::WebSocket::MessageProcessor06
  def message(message_type, extension_data, application_data); end
  def pingable?; end
end

class EventMachine::WebSocket::WSMessageTooBigError < ::EventMachine::WebSocket::WSProtocolError
  def code; end
end

class EventMachine::WebSocket::WSProtocolError < ::EventMachine::WebSocket::WebSocketError
  def code; end
end

class EventMachine::WebSocket::WebSocketError < ::RuntimeError; end
