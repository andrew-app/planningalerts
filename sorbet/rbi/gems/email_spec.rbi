# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/email_spec/all/email_spec.rbi
#
# email_spec-2.2.0

module EmailSpec
end
module EmailSpec::MailerDeliveries
  def all_emails; end
  def deliveries; end
  def last_email_sent; end
  def mailbox_for(address); end
  def reset_mailer; end
end
module EmailSpec::ARMailerDeliveries
  def all_emails; end
  def last_email_sent; end
  def mailbox_for(address); end
  def parse_to_mail(email); end
  def reset_mailer; end
end
module EmailSpec::Deliveries
  def mailer; end
  include EmailSpec::MailerDeliveries
end
class EmailSpec::AddressConverter
  def conversion(&block); end
  def convert(input); end
  def converter; end
  def converter=(arg0); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class EmailSpec::EmailViewer
  def self.open_in_browser(filename); end
  def self.open_in_text_editor(filename); end
  def self.save_and_open_all_html_emails; end
  def self.save_and_open_all_raw_emails; end
  def self.save_and_open_all_text_emails; end
  def self.save_and_open_email(mail); end
  def self.save_and_open_email_attachments_list(mail); end
  def self.tmp_email_filename(extension = nil); end
  extend EmailSpec::Deliveries
end
module EmailSpec::Helpers
  def click_email_link_matching(regex, email = nil); end
  def click_first_link_in_email(email = nil); end
  def convert_address(address); end
  def current_email(address = nil); end
  def current_email_address; end
  def current_email_attachments(address = nil); end
  def email_spec_deprecate(text); end
  def email_spec_hash; end
  def find_email!(address, opts = nil); end
  def find_email(address, opts = nil); end
  def last_email_address; end
  def links_in_email(email); end
  def mailbox_for(address); end
  def open_email(address, opts = nil); end
  def open_email_for(address, opts = nil); end
  def open_last_email; end
  def open_last_email_for(address); end
  def parse_email_count(amount); end
  def parse_email_for_anchor_text_link(email, link_text); end
  def parse_email_for_explicit_link(email, regex); end
  def parse_email_for_link(email, text_or_regex); end
  def read_emails_for(address); end
  def request_uri(link); end
  def set_current_email(email); end
  def textify_images(email_body); end
  def unread_emails_for(address); end
  def visit_in_email(link_text, address = nil); end
  include EmailSpec::Deliveries
end
module EmailSpec::Matchers
  def bcc_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def be_delivered_from(email); end
  def be_delivered_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def cc_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def deliver_from(email); end
  def deliver_to(*expected_email_addresses_or_objects_that_respond_to_email); end
  def have_body_text(text); end
  def have_header(name, value); end
  def have_reply_to(email); end
  def have_subject(subject); end
  def include_email_with_subject(*emails); end
  def reply_to(email); end
  def self.included(base); end
end
class EmailSpec::Matchers::EmailMatcher
  def address_array; end
end
class EmailSpec::Matchers::ReplyTo
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(email); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::DeliverTo < EmailSpec::Matchers::EmailMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::DeliverFrom < EmailSpec::Matchers::EmailMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(email); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::BccTo < EmailSpec::Matchers::EmailMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::CcTo < EmailSpec::Matchers::EmailMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(expected_email_addresses_or_objects_that_respond_to_email); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::HaveSubject
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(subject); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::IncludeEmailWithSubject
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(subject); end
  def matches?(emails); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::HaveBodyText
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(text); end
  def matches?(email); end
  def negative_failure_message; end
end
class EmailSpec::Matchers::HaveHeader
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(name, value); end
  def mail_headers_hash(email_headers); end
  def matches?(email); end
  def negative_failure_message; end
end
module EmailSpec::MailExt
  def default_part; end
  def default_part_body; end
  def html; end
end
class Mail::Message
  include EmailSpec::MailExt
end
class EmailSpec::TestObserver
  def self.delivered_email(message); end
end
class EmailSpec::CouldNotFindEmailError < StandardError
end
class EmailSpec::NoEmailAddressProvided < StandardError
end
