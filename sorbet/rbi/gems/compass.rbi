# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/compass/all/compass.rbi
#
# compass-1.0.3

module Compass
  def base_directory; end
  def lib_directory; end
  def self.base_directory; end
  def self.lib_directory; end
  extend Compass::Configuration::Helpers
  extend Compass::Version
  extend QuickCache
end
module Compass::Deprecation
  def self.deprecated!(identifier, message); end
  def self.issued_deprecations; end
  def self.issued_deprecations=(arg0); end
  def self.mark_as_issued(identifier); end
end
module Compass::SassExtensions::Functions::Sprites
  def convert_sprite_name(sprite); end
  def get_sprite_file(map, sprite = nil); end
  def inline_sprite(map); end
  def missing_image!(map, sprite); end
  def missing_sprite!(function_name); end
  def reversed_color_names; end
  def sprite(map, sprite, offset_x = nil, offset_y = nil, use_percentages = nil); end
  def sprite_does_not_have_parent(map, sprite); end
  def sprite_file(map, sprite); end
  def sprite_has_selector(map, sprite, selector); end
  def sprite_has_valid_selector(selector); end
  def sprite_height(map, sprite = nil); end
  def sprite_map(glob, kwargs = nil); end
  def sprite_map_name(map); end
  def sprite_names(map); end
  def sprite_path(map); end
  def sprite_position(map, sprite = nil, offset_x = nil, offset_y = nil, use_percentages = nil); end
  def sprite_selector_file(map, sprite, selector); end
  def sprite_url(map); end
  def sprite_width(map, sprite = nil); end
  def verify_map(map, error = nil); end
  def verify_sprite(sprite); end
  extend Compass::SassExtensions::Functions::SassDeclarationHelper
  extend Sass::Script::Value::Helpers
  include Sass::Script::Value::Helpers
end
module Compass::SassExtensions::Functions::Sprites::VariableReader
  def get_var(variable_name); end
end
module Compass::SassExtensions::Functions
end
module Compass::SassExtensions::Functions::SassDeclarationHelper
  def declare(*args); end
end
module Sass::Script::Functions
  include Compass::SassExtensions::Functions::Sprites
end
class Sass::Script::Functions::EvaluationContext
  include Sass::Script::Functions
end
module Compass::Sprites
end
class Compass::Sprites::Binding < OpenStruct
  def get_binding; end
end
class Compass::SpriteImporter < Sass::Importers::Base
  def eql?(other); end
  def find(uri, options); end
  def find_relative(uri, base, options); end
  def hash; end
  def key(uri, options = nil); end
  def mtime(uri, options); end
  def public_url(*args); end
  def self.content_for_images(uri, name, skip_overrides = nil); end
  def self.files(uri); end
  def self.find_all_sprite_map_files(path); end
  def self.path(uri); end
  def self.path_and_name(uri); end
  def self.sass_engine(uri, name, importer, options); end
  def self.sass_options(uri, importer, options); end
  def self.sprite_name(uri); end
  def self.sprite_names(uri); end
  def to_s; end
end
module Compass::SassExtensions
end
module Compass::SassExtensions::Sprites
end
class Compass::SassExtensions::Sprites::Images < Array
  def sort_by!(method); end
end
module Compass::SassExtensions::Sprites::Layout
end
class Compass::SassExtensions::Sprites::Layout::SpriteLayout
  def height; end
  def height=(arg0); end
  def images; end
  def initialize(images, kwargs = nil); end
  def layout!; end
  def options; end
  def properties; end
  def width; end
  def width=(arg0); end
end
class Compass::SassExtensions::Sprites::ImageRow
  def <<(image); end
  def add(image); end
  def delete(*args, &block); end
  def efficiency; end
  def empty?(*args, &block); end
  def height; end
  def images; end
  def initialize(max_width); end
  def last(*args, &block); end
  def length(*args, &block); end
  def max_width; end
  def total_width; end
  def width; end
  def will_fit?(image); end
  extend Forwardable
end
class Compass::SassExtensions::Sprites::RowFitter
  def [](*args, &block); end
  def efficiency; end
  def fast_fit; end
  def fit!(style = nil); end
  def height; end
  def images; end
  def initialize(images); end
  def new_row(image = nil); end
  def rows; end
  def scan_fit; end
  def width; end
  extend Forwardable
end
class Compass::SassExtensions::Sprites::Image
  def active; end
  def active?; end
  def base; end
  def digest; end
  def dimensions; end
  def file; end
  def find_file; end
  def focus; end
  def focus?; end
  def get_var_file(var); end
  def height; end
  def hover; end
  def hover?; end
  def initialize(base, relative_file, options); end
  def left; end
  def left=(arg0); end
  def mtime; end
  def name; end
  def no_repeat?; end
  def offset; end
  def options; end
  def parent; end
  def position; end
  def relative_file; end
  def repeat; end
  def repeat_x?; end
  def repeat_y?; end
  def size; end
  def spacing; end
  def target; end
  def target?; end
  def top; end
  def top=(arg0); end
  def width; end
  include Sass::Script::Value::Helpers
end
module Compass::SassExtensions::Sprites::LayoutMethods
  def compute_image_positions!; end
  def diagonal?; end
  def horizontal?; end
  def layout; end
  def smart?; end
  def vertical?; end
end
module Compass::SassExtensions::Sprites::SpriteMethods
  def cleanup_old_sprites; end
  def compute_image_metadata!; end
  def filename; end
  def generate; end
  def generation_required?; end
  def image_filenames; end
  def init_engine; end
  def init_images; end
  def log(action, filename, *extra); end
  def mtime; end
  def name_and_hash; end
  def outdated?; end
  def relativize(path); end
  def save!; end
  def size; end
  def uniqueness_hash; end
end
module Compass::SassExtensions::Sprites::ImageMethods
  def get_magic_selector_image(name, selector); end
  def has_active?(name); end
  def has_focus?(name); end
  def has_hover?(name); end
  def has_target?(name); end
  def image_for(name); end
  def sprite_names; end
end
class Compass::SassExtensions::Sprites::SpriteMap < Sass::Script::Value::Base
  def engine; end
  def engine=(arg0); end
  def height; end
  def height=(arg0); end
  def image_names; end
  def image_names=(arg0); end
  def images; end
  def images=(arg0); end
  def initialize(sprites, path, name, context, kwargs); end
  def inspect; end
  def kwargs; end
  def kwargs=(arg0); end
  def map; end
  def map=(arg0); end
  def method_missing(meth, *args, &block); end
  def modulize; end
  def name; end
  def name=(arg0); end
  def path; end
  def path=(arg0); end
  def respond_to?(meth); end
  def self.from_uri(uri, context, kwargs); end
  def self.relative_name(sprite); end
  def sort_method; end
  def to_s(kwargs = nil); end
  def width; end
  def width=(arg0); end
  include Compass::SassExtensions::Sprites::ImageMethods
  include Compass::SassExtensions::Sprites::LayoutMethods
  include Compass::SassExtensions::Sprites::SpriteMethods
  include Sass::Script::Value::Helpers
end
class Compass::SassExtensions::Sprites::ChunkyPngEngine < Compass::SassExtensions::Sprites::Engine
  def construct_sprite; end
  def save(filename); end
end
class Compass::SassExtensions::Sprites::Engine
  def canvas; end
  def canvas=(arg0); end
  def construct_sprite; end
  def height; end
  def height=(arg0); end
  def images; end
  def images=(arg0); end
  def initialize(width, height, images); end
  def save(filename); end
  def width; end
  def width=(arg0); end
end
module Compass::Version
  def parse_version(version, name); end
  def scope(file); end
  def version; end
end
class Compass::FilesystemConflict < Compass::Error
end
class Compass::MissingDependency < Compass::Error
end
class Compass::SpriteException < Compass::Error
end
module QuickCache
  def quick_cache(key, ttl = nil); end
end
class Compass::Logger
  def action_padding(action); end
  def actions; end
  def actions=(arg0); end
  def color(c); end
  def emit(msg); end
  def green; end
  def initialize(*actions); end
  def log(msg); end
  def max_action_length; end
  def options; end
  def options=(arg0); end
  def record(action, *arguments); end
  def red; end
  def time; end
  def time=(arg0); end
  def wrap(c, reset_to = nil); end
  def yellow; end
end
class Compass::NullLogger < Compass::Logger
  def emit(msg); end
  def log(msg); end
  def record(*args); end
end
module Compass::Actions
  def basename(file); end
  def copy(from, to, options = nil, binary = nil); end
  def directory(dir, options = nil); end
  def log_action(action, file, options); end
  def logger; end
  def logger=(arg0); end
  def process_erb(contents, ctx = nil); end
  def relativize(path); end
  def remove(file_name); end
  def separate(path); end
  def strip_trailing_separator(path); end
  def write_file(file_name, contents, options = nil, binary = nil); end
end
module Compass::Configuration
end
module Compass::Configuration::Helpers
  def add_project_configuration(*args); end
  def compiler; end
  def configuration_for(config, filename = nil, defaults = nil); end
  def configure_sass_plugin!; end
  def detect_configuration_file(project_path = nil); end
  def handle_configuration_change!; end
  def sass_compiler(*args); end
  def sass_engine_options; end
  def sass_plugin_configuration; end
end
module Compass::Configuration::Comments
  def comment_for_http_path; end
  def comment_for_line_comments; end
  def comment_for_output_style; end
  def comment_for_preferred_syntax; end
  def comment_for_relative_assets; end
end
class Compass::Configuration::Data
  include Compass::Configuration::Comments
  include Compass::Configuration::Serialization
end
module Compass::Configuration::Serialization
  def _parse(config_file); end
  def get_binding; end
  def issue_deprecation_warnings; end
  def parse(config_file); end
  def parse_string(contents, filename); end
  def serialize; end
  def serialize_property(prop, value); end
end
class Compass::Configuration::FileData < Compass::Configuration::Data
  def self.new_from_file(config_file, defaults = nil); end
  def self.new_from_string(contents, filename, defaults = nil); end
end
module Compass::AppIntegration
  extend Compass::AppIntegration::Helpers
end
module Compass::AppIntegration::StandAlone
  def configuration; end
  def installer(*args); end
  extend Compass::AppIntegration::StandAlone
end
module Compass::AppIntegration::StandAlone::ConfigurationDefaults
  def css_dir_without_default; end
  def default_cache_dir; end
  def default_project_type; end
  def images_dir_without_default; end
  def javascripts_dir_without_default; end
  def sass_dir_without_default; end
end
module Compass::Installers
end
class Compass::Installers::Base
end
class Compass::Installers::ManifestInstaller < Compass::Installers::Base
end
class Compass::AppIntegration::StandAlone::Installer < Compass::Installers::ManifestInstaller
  def compilation_required?; end
  def completed_configuration; end
  def config_contents; end
  def config_files_exist?; end
  def finalize(options = nil); end
  def init; end
  def prepare; end
  def write_configuration_files(config_file = nil); end
end
module Compass::AppIntegration::Helpers
  def default?; end
  def init; end
  def lookup(type); end
  def project_types; end
  def register(type, klass); end
end
class Compass::Compiler
  def clean!; end
  def compile(sass_filename, css_filename, sourcemap_filename = nil); end
  def compile_if_required(sass_filename, css_filename, sourcemap_filename = nil); end
  def corresponding_css_file(sass_file); end
  def corresponding_sourcemap_file(sass_file); end
  def css_files; end
  def determine_cache_location; end
  def engine(sass_filename, css_filename, sourcemap_filename = nil); end
  def error_contents(e, sass_filename); end
  def from; end
  def from=(arg0); end
  def handle_exception(sass_filename, css_filename, e); end
  def importer; end
  def importer=(arg0); end
  def initialize(working_path, from, to, options); end
  def needs_update?(css_filename, sass_filename); end
  def new_config?; end
  def options; end
  def options=(arg0); end
  def out_of_date?; end
  def relative_path(from_path, to_path); end
  def relative_stylesheet_name(sass_file); end
  def reset!; end
  def reset_staleness_checker!; end
  def run; end
  def sass_files(options = nil); end
  def sass_options; end
  def sass_options=(arg0); end
  def should_compile?(sass_filename, css_filename, sourcemap_filename = nil); end
  def show_full_exception?; end
  def sourcemap_files; end
  def staleness_checker; end
  def staleness_checker=(arg0); end
  def stylesheet_name(sass_file); end
  def target_directories; end
  def timed(timed_thing = nil); end
  def to; end
  def to=(arg0); end
  def working_path; end
  def working_path=(arg0); end
  include Compass::Actions
end
