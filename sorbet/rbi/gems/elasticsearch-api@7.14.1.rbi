# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-api` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch-api`.

# typed: true

module Elasticsearch; end

module Elasticsearch::API
  class << self
    def included(base); end
    def serializer; end
    def settings; end
  end
end

module Elasticsearch::API::Actions
  def abort_benchmark(arguments = T.unsafe(nil)); end
  def benchmark(arguments = T.unsafe(nil)); end
  def bulk(arguments = T.unsafe(nil)); end
  def clear_scroll(arguments = T.unsafe(nil)); end
  def close_point_in_time(arguments = T.unsafe(nil)); end
  def count(arguments = T.unsafe(nil)); end
  def create(arguments = T.unsafe(nil)); end
  def delete(arguments = T.unsafe(nil)); end
  def delete_by_query(arguments = T.unsafe(nil)); end
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end
  def delete_script(arguments = T.unsafe(nil)); end
  def exists(arguments = T.unsafe(nil)); end
  def exists?(arguments = T.unsafe(nil)); end
  def exists_source(arguments = T.unsafe(nil)); end
  def exists_source?(arguments = T.unsafe(nil)); end
  def explain(arguments = T.unsafe(nil)); end
  def field_caps(arguments = T.unsafe(nil)); end
  def get(arguments = T.unsafe(nil)); end
  def get_script(arguments = T.unsafe(nil)); end
  def get_script_context(arguments = T.unsafe(nil)); end
  def get_script_languages(arguments = T.unsafe(nil)); end
  def get_source(arguments = T.unsafe(nil)); end
  def index(arguments = T.unsafe(nil)); end
  def info(arguments = T.unsafe(nil)); end
  def mget(arguments = T.unsafe(nil)); end
  def msearch(arguments = T.unsafe(nil)); end
  def msearch_template(arguments = T.unsafe(nil)); end
  def mtermvectors(arguments = T.unsafe(nil)); end
  def open_point_in_time(arguments = T.unsafe(nil)); end
  def ping(arguments = T.unsafe(nil)); end
  def put_script(arguments = T.unsafe(nil)); end
  def rank_eval(arguments = T.unsafe(nil)); end
  def reindex(arguments = T.unsafe(nil)); end
  def reindex_rethrottle(arguments = T.unsafe(nil)); end
  def render_search_template(arguments = T.unsafe(nil)); end
  def scripts_painless_execute(arguments = T.unsafe(nil)); end
  def scroll(arguments = T.unsafe(nil)); end
  def search(arguments = T.unsafe(nil)); end
  def search_shards(arguments = T.unsafe(nil)); end
  def search_template(arguments = T.unsafe(nil)); end
  def termvector(arguments = T.unsafe(nil)); end
  def termvectors(arguments = T.unsafe(nil)); end
  def update(arguments = T.unsafe(nil)); end
  def update_by_query(arguments = T.unsafe(nil)); end
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)
Elasticsearch::API::COMMON_PARAMS = T.let(T.unsafe(nil), Array)
Elasticsearch::API::COMMON_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

module Elasticsearch::API::Cat
  def cat; end
end

module Elasticsearch::API::Cat::Actions
  def aliases(arguments = T.unsafe(nil)); end
  def allocation(arguments = T.unsafe(nil)); end
  def count(arguments = T.unsafe(nil)); end
  def fielddata(arguments = T.unsafe(nil)); end
  def health(arguments = T.unsafe(nil)); end
  def help(arguments = T.unsafe(nil)); end
  def indices(arguments = T.unsafe(nil)); end
  def master(arguments = T.unsafe(nil)); end
  def nodeattrs(arguments = T.unsafe(nil)); end
  def nodes(arguments = T.unsafe(nil)); end
  def pending_tasks(arguments = T.unsafe(nil)); end
  def plugins(arguments = T.unsafe(nil)); end
  def recovery(arguments = T.unsafe(nil)); end
  def repositories(arguments = T.unsafe(nil)); end
  def segments(arguments = T.unsafe(nil)); end
  def shards(arguments = T.unsafe(nil)); end
  def snapshots(arguments = T.unsafe(nil)); end
  def tasks(arguments = T.unsafe(nil)); end
  def templates(arguments = T.unsafe(nil)); end
  def thread_pool(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Cat::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cat::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Cat::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Cat::CatClient
  include ::Elasticsearch::API::Cat::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Cluster
  def cluster; end
end

module Elasticsearch::API::Cluster::Actions
  def allocation_explain(arguments = T.unsafe(nil)); end
  def delete_component_template(arguments = T.unsafe(nil)); end
  def delete_voting_config_exclusions(arguments = T.unsafe(nil)); end
  def exists_component_template(arguments = T.unsafe(nil)); end
  def exists_component_template?(arguments = T.unsafe(nil)); end
  def get_component_template(arguments = T.unsafe(nil)); end
  def get_settings(arguments = T.unsafe(nil)); end
  def health(arguments = T.unsafe(nil)); end
  def pending_tasks(arguments = T.unsafe(nil)); end
  def post_voting_config_exclusions(arguments = T.unsafe(nil)); end
  def put_component_template(arguments = T.unsafe(nil)); end
  def put_settings(arguments = T.unsafe(nil)); end
  def remote_info(arguments = T.unsafe(nil)); end
  def reroute(arguments = T.unsafe(nil)); end
  def state(arguments = T.unsafe(nil)); end
  def stats(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Cluster::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cluster::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Cluster::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Cluster::ClusterClient
  include ::Elasticsearch::API::Cluster::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Common; end
module Elasticsearch::API::Common::Actions; end

module Elasticsearch::API::Common::Client
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

module Elasticsearch::API::Common::Client::Base
  def initialize(client); end

  def client; end
end

Elasticsearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)
Elasticsearch::API::DEFAULT_SERIALIZER = MultiJson

module Elasticsearch::API::DanglingIndices
  def dangling_indices; end
end

module Elasticsearch::API::DanglingIndices::Actions
  def delete_dangling_index(arguments = T.unsafe(nil)); end
  def import_dangling_index(arguments = T.unsafe(nil)); end
  def list_dangling_indices(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry
  extend ::Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::DanglingIndices::DanglingIndicesClient
  include ::Elasticsearch::API::DanglingIndices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Features
  def features; end
end

module Elasticsearch::API::Features::Actions
  def get_features(arguments = T.unsafe(nil)); end
  def reset_features(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Features::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Features::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Features::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Features::FeaturesClient
  include ::Elasticsearch::API::Features::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

Elasticsearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)
Elasticsearch::API::HTTP_GET = T.let(T.unsafe(nil), String)
Elasticsearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)
Elasticsearch::API::HTTP_POST = T.let(T.unsafe(nil), String)
Elasticsearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

module Elasticsearch::API::Indices
  def indices; end
end

module Elasticsearch::API::Indices::Actions
  def add_block(arguments = T.unsafe(nil)); end
  def analyze(arguments = T.unsafe(nil)); end
  def clear_cache(arguments = T.unsafe(nil)); end
  def clone(arguments = T.unsafe(nil)); end
  def close(arguments = T.unsafe(nil)); end
  def create(arguments = T.unsafe(nil)); end
  def delete(arguments = T.unsafe(nil)); end
  def delete_alias(arguments = T.unsafe(nil)); end
  def delete_index_template(arguments = T.unsafe(nil)); end
  def delete_template(arguments = T.unsafe(nil)); end
  def exists(arguments = T.unsafe(nil)); end
  def exists?(arguments = T.unsafe(nil)); end
  def exists_alias(arguments = T.unsafe(nil)); end
  def exists_alias?(arguments = T.unsafe(nil)); end
  def exists_index_template(arguments = T.unsafe(nil)); end
  def exists_index_template?(arguments = T.unsafe(nil)); end
  def exists_template(arguments = T.unsafe(nil)); end
  def exists_template?(arguments = T.unsafe(nil)); end
  def exists_type(arguments = T.unsafe(nil)); end
  def exists_type?(arguments = T.unsafe(nil)); end
  def flush(arguments = T.unsafe(nil)); end
  def flush_synced(arguments = T.unsafe(nil)); end
  def forcemerge(arguments = T.unsafe(nil)); end
  def get(arguments = T.unsafe(nil)); end
  def get_alias(arguments = T.unsafe(nil)); end
  def get_field_mapping(arguments = T.unsafe(nil)); end
  def get_index_template(arguments = T.unsafe(nil)); end
  def get_mapping(arguments = T.unsafe(nil)); end
  def get_settings(arguments = T.unsafe(nil)); end
  def get_template(arguments = T.unsafe(nil)); end
  def get_upgrade(arguments = T.unsafe(nil)); end
  def open(arguments = T.unsafe(nil)); end
  def put_alias(arguments = T.unsafe(nil)); end
  def put_index_template(arguments = T.unsafe(nil)); end
  def put_mapping(arguments = T.unsafe(nil)); end
  def put_settings(arguments = T.unsafe(nil)); end
  def put_template(arguments = T.unsafe(nil)); end
  def recovery(arguments = T.unsafe(nil)); end
  def refresh(arguments = T.unsafe(nil)); end
  def resolve_index(arguments = T.unsafe(nil)); end
  def rollover(arguments = T.unsafe(nil)); end
  def segments(arguments = T.unsafe(nil)); end
  def shard_stores(arguments = T.unsafe(nil)); end
  def shrink(arguments = T.unsafe(nil)); end
  def simulate_index_template(arguments = T.unsafe(nil)); end
  def simulate_template(arguments = T.unsafe(nil)); end
  def split(arguments = T.unsafe(nil)); end
  def stats(arguments = T.unsafe(nil)); end
  def update_aliases(arguments = T.unsafe(nil)); end
  def upgrade(arguments = T.unsafe(nil)); end
  def validate_query(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Indices::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Indices::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Indices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Indices::IndicesClient
  include ::Elasticsearch::API::Indices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Ingest
  def ingest; end
end

module Elasticsearch::API::Ingest::Actions
  def delete_pipeline(arguments = T.unsafe(nil)); end
  def geo_ip_stats(arguments = T.unsafe(nil)); end
  def get_pipeline(arguments = T.unsafe(nil)); end
  def processor_grok(arguments = T.unsafe(nil)); end
  def put_pipeline(arguments = T.unsafe(nil)); end
  def simulate(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Ingest::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Ingest::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Ingest::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Ingest::IngestClient
  include ::Elasticsearch::API::Ingest::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Nodes
  def nodes; end
end

module Elasticsearch::API::Nodes::Actions
  def hot_threads(arguments = T.unsafe(nil)); end
  def info(arguments = T.unsafe(nil)); end
  def reload_secure_settings(arguments = T.unsafe(nil)); end
  def shutdown(arguments = T.unsafe(nil)); end
  def stats(arguments = T.unsafe(nil)); end
  def usage(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Nodes::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Nodes::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Nodes::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Nodes::NodesClient
  include ::Elasticsearch::API::Nodes::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Remote
  def remote; end
end

module Elasticsearch::API::Remote::Actions
  def info(arguments = T.unsafe(nil)); end
end

class Elasticsearch::API::Remote::RemoteClient
  include ::Elasticsearch::API::Remote::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Security
  def security; end
end

module Elasticsearch::API::Security::Actions; end

class Elasticsearch::API::Security::SecurityClient
  include ::Elasticsearch::API::Security::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Shutdown
  def shutdown; end
end

module Elasticsearch::API::Shutdown::Actions
  def delete_node(arguments = T.unsafe(nil)); end
  def get_node(arguments = T.unsafe(nil)); end
  def put_node(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Shutdown::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Shutdown::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Shutdown::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Shutdown::ShutdownClient
  include ::Elasticsearch::API::Shutdown::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Snapshot
  def snapshot; end
end

module Elasticsearch::API::Snapshot::Actions
  def cleanup_repository(arguments = T.unsafe(nil)); end
  def clone(arguments = T.unsafe(nil)); end
  def create(arguments = T.unsafe(nil)); end
  def create_repository(arguments = T.unsafe(nil)); end
  def delete(arguments = T.unsafe(nil)); end
  def delete_repository(arguments = T.unsafe(nil)); end
  def get(arguments = T.unsafe(nil)); end
  def get_features(arguments = T.unsafe(nil)); end
  def get_repository(arguments = T.unsafe(nil)); end
  def repository_analyze(arguments = T.unsafe(nil)); end
  def restore(arguments = T.unsafe(nil)); end
  def status(arguments = T.unsafe(nil)); end
  def verify_repository(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Snapshot::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Snapshot::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Snapshot::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Snapshot::SnapshotClient
  include ::Elasticsearch::API::Snapshot::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

module Elasticsearch::API::Tasks
  def tasks; end
end

module Elasticsearch::API::Tasks::Actions
  def cancel(arguments = T.unsafe(nil)); end
  def get(arguments = T.unsafe(nil)); end
  def list(arguments = T.unsafe(nil)); end
end

module Elasticsearch::API::Tasks::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Tasks::Actions::ParamsRegistry

  def get(action); end
  def register(action, valid_params); end
end

Elasticsearch::API::Tasks::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

class Elasticsearch::API::Tasks::TasksClient
  include ::Elasticsearch::API::Tasks::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

Elasticsearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)
Elasticsearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

module Elasticsearch::API::Utils
  extend ::Elasticsearch::API::Utils

  def __bulkify(payload); end
  def __escape(string); end
  def __extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end
  def __listify(*list); end
  def __pathify(*segments); end
  def __report_unsupported_method(name); end
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end
  def __rescue_from_not_found(&block); end
  def __validate_and_extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end
  def __validate_params(arguments, valid_params = T.unsafe(nil)); end
end

Elasticsearch::API::VERSION = T.let(T.unsafe(nil), String)
Elasticsearch::NOT_ELASTICSEARCH_WARNING = T.let(T.unsafe(nil), String)
Elasticsearch::NOT_SUPPORTED_ELASTICSEARCH_WARNING = T.let(T.unsafe(nil), String)
Elasticsearch::SECURITY_PRIVILEGES_VALIDATION_WARNING = T.let(T.unsafe(nil), String)
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
Elasticsearch::YOU_KNOW_FOR_SEARCH = T.let(T.unsafe(nil), String)
