# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/thin/all/thin.rbi
#
# thin-1.8.1

module Thin
  def self.linux?; end
  def self.ruby_18?; end
  def self.win?; end
end
class Thin::PlatformNotSupported < RuntimeError
end
module Thin::VERSION
end
module Rack
end
class Rack::AdapterNotFound < RuntimeError
end
module Rack::Adapter
  def self.for(name, options = nil); end
  def self.guess(dir); end
  def self.load(config); end
end
class Thin::HttpParser
  def error?; end
  def execute(arg0, arg1, arg2); end
  def finish; end
  def finished?; end
  def initialize; end
  def nread; end
  def reset; end
end
module Thin::Backends
end
module Thin::Controllers
end
module Thin::Logging
  def log(msg); end
  def log_debug(msg = nil); end
  def log_error(msg, e = nil); end
  def log_info(msg); end
  def self.debug=(val); end
  def self.debug?; end
  def self.level; end
  def self.level=(value); end
  def self.log_debug(msg = nil); end
  def self.log_error(msg, e = nil); end
  def self.log_info(msg); end
  def self.log_msg(msg, level = nil); end
  def self.logger; end
  def self.logger=(custom_logger); end
  def self.silent=(shh); end
  def self.silent?; end
  def self.trace(msg = nil); end
  def self.trace=(enabled); end
  def self.trace?; end
  def self.trace_logger; end
  def self.trace_logger=(custom_tracer); end
  def self.trace_msg(msg); end
  def silent; end
  def silent=(value); end
  def trace(msg = nil); end
end
class Thin::Logging::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module Process
  def running?(pid); end
  def self.running?(pid); end
end
class Thin::PidFileExist < RuntimeError
end
class Thin::PidFileNotFound < RuntimeError
end
module Thin::Daemonizable
  def change_privilege(user, group = nil); end
  def daemonize; end
  def kill(timeout = nil); end
  def log_file; end
  def log_file=(arg0); end
  def on_restart(&block); end
  def pid; end
  def pid_file; end
  def pid_file=(arg0); end
  def remove_pid_file; end
  def remove_stale_pid_file; end
  def restart; end
  def self.included(base); end
  def write_pid_file; end
end
module Thin::Daemonizable::ClassMethods
  def force_kill(pid, pid_file); end
  def kill(pid_file, timeout = nil); end
  def monotonic_time; end
  def read_pid_file(file); end
  def restart(pid_file); end
  def send_signal(signal, pid_file, timeout = nil); end
end
class Thin::Server
  def app; end
  def app=(arg0); end
  def backend; end
  def backend=(arg0); end
  def config; end
  def handle_signals; end
  def host(*args, &block); end
  def initialize(*args, &block); end
  def load_cgi_multipart_eof_fix; end
  def maximum_connections(*args, &block); end
  def maximum_connections=(*args, &block); end
  def maximum_persistent_connections(*args, &block); end
  def maximum_persistent_connections=(*args, &block); end
  def name; end
  def no_epoll(*args, &block); end
  def no_epoll=(*args, &block); end
  def port(*args, &block); end
  def reopen_log; end
  def running?; end
  def select_backend(host, port, options); end
  def self.start(*args, &block); end
  def setup_signals; end
  def socket(*args, &block); end
  def ssl=(*args, &block); end
  def ssl?(*args, &block); end
  def ssl_options=(*args, &block); end
  def start!; end
  def start; end
  def stop!; end
  def stop; end
  def tag; end
  def tag=(arg0); end
  def threaded=(*args, &block); end
  def threaded?(*args, &block); end
  def threadpool_size(*args, &block); end
  def threadpool_size=(*args, &block); end
  def timeout(*args, &block); end
  def timeout=(*args, &block); end
  def to_s; end
  extend Forwardable
  extend Thin::Daemonizable::ClassMethods
  include Thin::Daemonizable
  include Thin::Logging
end
