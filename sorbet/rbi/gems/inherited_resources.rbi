# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/inherited_resources/all/inherited_resources.rbi
#
# inherited_resources-1.11.0

module InheritedResources
  def self.flash_keys=(array); end
end
class InheritedResources::Railtie < Rails::Engine
end
class InheritedResources::BlankSlate
  def method_missing(*args); end
end
class InheritedResources::Responder < ActionController::Responder
  include Responders::FlashResponder
end
module InheritedResources::Actions
  def create!(options = nil, &block); end
  def create(options = nil, &block); end
  def destroy!(options = nil, &block); end
  def destroy(options = nil, &block); end
  def edit!(options = nil, &block); end
  def edit(options = nil, &block); end
  def index!(options = nil, &block); end
  def index(options = nil, &block); end
  def new!(options = nil, &block); end
  def new(options = nil, &block); end
  def show!(options = nil, &block); end
  def show(options = nil, &block); end
  def update!(options = nil, &block); end
  def update(options = nil, &block); end
end
module InheritedResources::BaseHelpers
  def apply_scopes_if_available(target_object); end
  def as_role; end
  def association_chain; end
  def begin_of_association_chain; end
  def build_resource; end
  def build_resource_params; end
  def collection; end
  def create_resource(object); end
  def destroy_resource(object); end
  def end_of_association_chain; end
  def get_collection_ivar; end
  def get_resource_ivar; end
  def method_for_association_build; end
  def method_for_association_chain; end
  def method_for_build; end
  def method_for_find; end
  def parent?; end
  def permitted_params; end
  def resource; end
  def resource_collection_name; end
  def resource_instance_name; end
  def resource_params; end
  def resource_params_method_name; end
  def resource_request_name; end
  def respond_with_dual_blocks(object, options, &block); end
  def role_given?; end
  def set_collection_ivar(collection); end
  def set_resource_ivar(resource); end
  def smart_collection_url; end
  def smart_resource_url; end
  def symbols_for_association_chain; end
  def update_resource(object, attributes); end
  def with_chain(object); end
  def without_protection; end
  def without_protection_given?; end
end
module InheritedResources::ClassMethods
  def actions(*actions_to_keep); end
  def acts_as_polymorphic!; end
  def acts_as_shallow!; end
  def acts_as_singleton!; end
  def belongs_to(*symbols, &block); end
  def create_custom_action(resource_or_collection, action); end
  def custom_actions(options); end
  def defaults(options); end
  def inherited(base); end
  def initialize_resources_class_accessors!; end
  def nested_belongs_to(*symbols, &block); end
  def optional_belongs_to(*symbols, &block); end
  def polymorphic_belongs_to(*symbols, &block); end
  def singleton_belongs_to(*symbols, &block); end
  def with_role(role); end
  def without_protection(flag); end
end
module InheritedResources::UrlHelpers
  def create_resources_url_helpers!; end
  def define_helper_method(prefix, name, suffix, segments); end
  def define_params_helper(prefix, name, singleton, polymorphic, parent_index, ivars); end
  def generate_url_and_path_helpers(prefix, name, resource_segments, resource_ivars); end
  def handle_shallow_resource(prefix, name, segments, ivars); end
end
