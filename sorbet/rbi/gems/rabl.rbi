# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rabl/all/rabl.rbi
#
# rabl-0.14.0

module Rabl
  def self.configuration; end
  def self.configure(&block); end
  def self.register!; end
  def self.render(object, source, options = nil); end
  def self.reset_configuration!; end
  def self.reset_source_cache!; end
  def self.source_cache(file, view_path, &block); end
end
module Rabl::Helpers
  def collection_root_name; end
  def context_scope; end
  def data_name(data_token); end
  def data_object(data); end
  def data_object_attribute(data); end
  def determine_object_root(data_token, data_name = nil, include_root = nil); end
  def fetch_result_from_cache(cache_key, cache_options = nil, &block); end
  def is_collection?(obj, follow_symbols = nil); end
  def is_name_value?(val); end
  def is_object?(obj, follow_symbols = nil); end
  def object_root_name; end
  def object_to_engine(object, options = nil, &block); end
  def template_cache_configured?; end
  def view_path; end
  def write_result_to_cache(cache_key, cache_options = nil, &block); end
end
module Rabl::Helpers::Escaper
  def escape_output(response); end
  def escape_value(value); end
end
module Rabl::Sources
  def fetch_manual_template(view_path, file); end
  def fetch_padrino_source(file, options = nil); end
  def fetch_rails_source(file, options = nil); end
  def fetch_sinatra_source(file, options = nil); end
  def fetch_source(file, options = nil); end
  def partialized(file); end
  include Rabl::Helpers
end
module Rabl::Partials
  def partial_as_engine(file, options = nil, &block); end
  include Rabl::Helpers
  include Rabl::Sources
end
class Rabl::Engine
  def apply(context_scope, locals, &block); end
  def attribute(*args); end
  def attributes(*args); end
  def cache(key = nil, options = nil); end
  def cache_key; end
  def cache_read_on_render=(read); end
  def cache_read_on_render?; end
  def cache_results(&block); end
  def child(data, options = nil, &block); end
  def code(name = nil, options = nil, &block); end
  def collection(data, options = nil); end
  def copy_instance_variables_from(object, exclude = nil); end
  def default_object; end
  def digestor_available?; end
  def eval_source(locals, &block); end
  def extends(file, options = nil, &block); end
  def format_json(json_output); end
  def glue(data, options = nil, &block); end
  def helper(*klasses); end
  def helpers(*klasses); end
  def initialize(source, options = nil); end
  def method_missing(name, *args, &block); end
  def node(name = nil, options = nil, &block); end
  def object(template_data); end
  def partial(file, options = nil, &block); end
  def render(context_scope = nil, locals = nil, &block); end
  def request_format; end
  def request_params; end
  def reset_options!; end
  def reset_settings!; end
  def respond_to?(name, include_private = nil); end
  def root_name; end
  def root_object; end
  def set_instance_variables!(context_scope, locals); end
  def set_locals(locals); end
  def source=(source); end
  def to_bson(options = nil); end
  def to_dumpable(options = nil); end
  def to_hash(options = nil); end
  def to_json(options = nil); end
  def to_mpac(options = nil); end
  def to_msgpack(options = nil); end
  def to_plist(options = nil); end
  def to_xml(options = nil); end
  include Rabl::Helpers
  include Rabl::Helpers::Escaper
  include Rabl::Partials
end
class Rabl::Builder
  def attribute(name, options = nil); end
  def attribute_present?(name); end
  def attributes(name, options = nil); end
  def cache_results(&block); end
  def call_condition_proc(condition, object); end
  def child(data, options = nil, &block); end
  def code(name, options = nil, &block); end
  def compile_settings(type); end
  def create_key(name); end
  def deep_replace_empty_string_values(hash); end
  def deep_replace_nil_values(hash); end
  def engines; end
  def extends(file, options = nil, &block); end
  def glue(data, options = nil, &block); end
  def initialize(object, settings = nil, options = nil); end
  def merge_engines_into_result; end
  def node(name, options = nil, &block); end
  def remove_nil_values; end
  def replace_empty_string_values; end
  def replace_engine(engine, value); end
  def replace_nil_values; end
  def request_format; end
  def resolve_condition(options); end
  def to_hash(object = nil, settings = nil, options = nil); end
  include Rabl::Helpers
  include Rabl::Partials
end
class Rabl::MultiBuilder
  def cache_key_for(engine); end
  def disable_cache_read_on_render(engine); end
  def generate_builders; end
  def initialize(data, settings = nil, options = nil); end
  def map_cache_key_to_engine(engine); end
  def map_engines_to_builders; end
  def read_cache_results; end
  def replace_engines_with_cache_results; end
  def to_a; end
  include Rabl::Helpers
end
class Rabl::Configuration
  def [](option); end
  def bson_check_keys; end
  def bson_check_keys=(arg0); end
  def bson_engine; end
  def bson_engine=(arg0); end
  def bson_move_id; end
  def bson_move_id=(arg0); end
  def cache_all_output; end
  def cache_all_output=(arg0); end
  def cache_engine; end
  def cache_engine=(arg0); end
  def cache_sources; end
  def cache_sources=(arg0); end
  def camelize_keys; end
  def camelize_keys=(arg0); end
  def default_xml_options; end
  def enable_json_callbacks; end
  def enable_json_callbacks=(arg0); end
  def escape_all_output; end
  def escape_all_output=(arg0); end
  def exclude_empty_values_in_collections; end
  def exclude_empty_values_in_collections=(arg0); end
  def exclude_nil_values; end
  def exclude_nil_values=(arg0); end
  def include_bson_root; end
  def include_bson_root=(arg0); end
  def include_child_root; end
  def include_child_root=(arg0); end
  def include_json_root; end
  def include_json_root=(arg0); end
  def include_msgpack_root; end
  def include_msgpack_root=(arg0); end
  def include_plist_root; end
  def include_plist_root=(arg0); end
  def include_xml_root; end
  def include_xml_root=(arg0); end
  def initialize; end
  def json_engine; end
  def json_engine=(arg0); end
  def msgpack_engine; end
  def msgpack_engine=(arg0); end
  def perform_caching; end
  def perform_caching=(arg0); end
  def plist_engine; end
  def plist_engine=(arg0); end
  def raise_on_missing_attribute; end
  def raise_on_missing_attribute=(arg0); end
  def replace_empty_string_values_with_nil_values; end
  def replace_empty_string_values_with_nil_values=(arg0); end
  def replace_nil_values_with_empty_strings; end
  def replace_nil_values_with_empty_strings=(arg0); end
  def use_read_multi; end
  def use_read_multi=(arg0); end
  def view_paths; end
  def view_paths=(arg0); end
  def xml_options=(arg0); end
end
class Rabl::Renderer
  def engine; end
  def initialize(source, object = nil, options = nil); end
  def object; end
  def object_model_name; end
  def options; end
  def process_source(source); end
  def render(context_scope = nil); end
  def self.bson(object, source, options = nil); end
  def self.json(object, source, options = nil); end
  def self.msgpack(object, source, options = nil); end
  def self.plist(object, source, options = nil); end
  def self.xml(object, source, options = nil); end
  def set_object_instance_variable; end
end
class Rabl::CacheEngine
  def fetch(key, cache_options, &block); end
  def read_multi(*keys); end
  def write(key, value, options = nil); end
end
class Rabl::Tracker
  def dependencies; end
  def directory; end
  def extends_dependencies; end
  def initialize(name, template); end
  def name; end
  def partial_dependencies; end
  def self.call(name, template); end
  def source; end
  def template; end
end
class Rabl::Digestor < ActionView::Digestor
  def dependency_digest; end
end
class Rabl::Railtie < Rails::Railtie
end
class RablTemplate < Tilt::Template
  def evaluate(context_scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
end
module ActionView
end
module ActionView::Template::Handlers
end
class ActionView::Template::Handlers::Rabl
  def default_format; end
  def default_format=(val); end
  def default_format?; end
  def self.call(template); end
  def self.default_format; end
  def self.default_format=(val); end
  def self.default_format?; end
end
