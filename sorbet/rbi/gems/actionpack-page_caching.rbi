# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/actionpack-page_caching/all/actionpack-page_caching.rbi
#
# actionpack-page_caching-1.2.3

module ActionPack
end
module ActionPack::PageCaching
end
class ActionPack::PageCaching::Railtie < Rails::Railtie
end
module ActionController
end
module ActionController::Caching
  include ActionController::Caching::Pages
end
module ActionController::Caching::Pages
  def cache_page(content = nil, options = nil, gzip = nil); end
  def caching_allowed?; end
  def expire_page(options = nil); end
  def page_cache; end
  def perform_caching?; end
  extend ActiveSupport::Concern
end
class ActionController::Caching::Pages::PageCache
  def cache(content, path, extension = nil, gzip = nil); end
  def cache_directory; end
  def cache_file(path, extension); end
  def cache_path(path, extension = nil); end
  def default_extension; end
  def delete(path); end
  def expire(path); end
  def handle_callable_cache_directory; end
  def handle_default_cache_directory; end
  def handle_proc_cache_directory; end
  def handle_symbol_cache_directory; end
  def initialize(cache_directory, default_extension, controller = nil); end
  def instrument(name, path); end
  def normalized_cache_directory; end
  def raise_runtime_error; end
  def write(content, path, gzip); end
end
module ActionController::Caching::Pages::ClassMethods
  def cache_page(content, path, extension = nil, gzip = nil); end
  def caches_page(*actions); end
  def expire_page(path); end
  def page_cache; end
end
class ActionController::Base < ActionController::Metal
  def page_cache_compression; end
  def page_cache_compression=(val); end
  def page_cache_compression?; end
  def page_cache_directory; end
  def page_cache_directory=(val); end
  def page_cache_directory?; end
  def self.page_cache_compression; end
  def self.page_cache_compression=(val); end
  def self.page_cache_compression?; end
  def self.page_cache_directory; end
  def self.page_cache_directory=(val); end
  def self.page_cache_directory?; end
  extend ActionController::Caching::Pages::ClassMethods
  include ActionController::Caching::Pages
end
